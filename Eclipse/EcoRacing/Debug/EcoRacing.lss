
EcoRacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000056ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000058  00800060  000056ea  0000577e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000b8  008000b8  000057d6  2**0
                  ALLOC
  3 .stab         00004e78  00000000  00000000  000057d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004b63  00000000  00000000  0000a650  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000f1b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000f463  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000110ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00011f97  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00012d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00013131  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  000138ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__vector_4>
      14:	0c 94 ad 09 	jmp	0x135a	; 0x135a <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7a 09 	jmp	0x12f4	; 0x12f4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 09 	jmp	0x128e	; 0x128e <__vector_9>
      28:	0c 94 14 09 	jmp	0x1228	; 0x1228 <__vector_10>
      2c:	0c 94 e1 08 	jmp	0x11c2	; 0x11c2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea ee       	ldi	r30, 0xEA	; 234
      68:	f6 e5       	ldi	r31, 0x56	; 86
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3b       	cpi	r26, 0xB8	; 184
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 eb       	ldi	r26, 0xB8	; 184
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3c       	cpi	r26, 0xC5	; 197
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <main>
      8a:	0c 94 73 2b 	jmp	0x56e6	; 0x56e6 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0b 2b 	jmp	0x5616	; 0x5616 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e8       	ldi	r26, 0x8F	; 143
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 27 2b 	jmp	0x564e	; 0x564e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0b 2b 	jmp	0x5616	; 0x5616 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e8       	ldi	r24, 0x8F	; 143
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 27 2b 	jmp	0x564e	; 0x564e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 17 2b 	jmp	0x562e	; 0x562e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 33 2b 	jmp	0x5666	; 0x5666 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1b 2b 	jmp	0x5636	; 0x5636 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 37 2b 	jmp	0x566e	; 0x566e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <GPIO_setupPinDirection+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <GPIO_setupPinDirection+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
     b54:	89 83       	std	Y+1, r24	; 0x01
     b56:	6a 83       	std	Y+2, r22	; 0x02
     b58:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     b5a:	89 81       	ldd	r24, Y+1	; 0x01
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	08 f0       	brcs	.+2      	; 0xb62 <GPIO_setupPinDirection+0x1c>
     b60:	d5 c0       	rjmp	.+426    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b62:	8a 81       	ldd	r24, Y+2	; 0x02
     b64:	88 30       	cpi	r24, 0x08	; 8
     b66:	08 f0       	brcs	.+2      	; 0xb6a <GPIO_setupPinDirection+0x24>
     b68:	d1 c0       	rjmp	.+418    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     b6a:	89 81       	ldd	r24, Y+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	3d 83       	std	Y+5, r19	; 0x05
     b72:	2c 83       	std	Y+4, r18	; 0x04
     b74:	8c 81       	ldd	r24, Y+4	; 0x04
     b76:	9d 81       	ldd	r25, Y+5	; 0x05
     b78:	81 30       	cpi	r24, 0x01	; 1
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <GPIO_setupPinDirection+0x3a>
     b7e:	43 c0       	rjmp	.+134    	; 0xc06 <GPIO_setupPinDirection+0xc0>
     b80:	2c 81       	ldd	r18, Y+4	; 0x04
     b82:	3d 81       	ldd	r19, Y+5	; 0x05
     b84:	22 30       	cpi	r18, 0x02	; 2
     b86:	31 05       	cpc	r19, r1
     b88:	2c f4       	brge	.+10     	; 0xb94 <GPIO_setupPinDirection+0x4e>
     b8a:	8c 81       	ldd	r24, Y+4	; 0x04
     b8c:	9d 81       	ldd	r25, Y+5	; 0x05
     b8e:	00 97       	sbiw	r24, 0x00	; 0
     b90:	71 f0       	breq	.+28     	; 0xbae <GPIO_setupPinDirection+0x68>
     b92:	bc c0       	rjmp	.+376    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
     b94:	2c 81       	ldd	r18, Y+4	; 0x04
     b96:	3d 81       	ldd	r19, Y+5	; 0x05
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	09 f4       	brne	.+2      	; 0xba0 <GPIO_setupPinDirection+0x5a>
     b9e:	5f c0       	rjmp	.+190    	; 0xc5e <GPIO_setupPinDirection+0x118>
     ba0:	8c 81       	ldd	r24, Y+4	; 0x04
     ba2:	9d 81       	ldd	r25, Y+5	; 0x05
     ba4:	83 30       	cpi	r24, 0x03	; 3
     ba6:	91 05       	cpc	r25, r1
     ba8:	09 f4       	brne	.+2      	; 0xbac <GPIO_setupPinDirection+0x66>
     baa:	85 c0       	rjmp	.+266    	; 0xcb6 <GPIO_setupPinDirection+0x170>
     bac:	af c0       	rjmp	.+350    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(direction == PIN_INPUT)
     bae:	8b 81       	ldd	r24, Y+3	; 0x03
     bb0:	88 23       	and	r24, r24
     bb2:	a9 f4       	brne	.+42     	; 0xbde <GPIO_setupPinDirection+0x98>
			{
				CLEAR_BIT(DDRA,pin_num);
     bb4:	aa e3       	ldi	r26, 0x3A	; 58
     bb6:	b0 e0       	ldi	r27, 0x00	; 0
     bb8:	ea e3       	ldi	r30, 0x3A	; 58
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	80 81       	ld	r24, Z
     bbe:	48 2f       	mov	r20, r24
     bc0:	8a 81       	ldd	r24, Y+2	; 0x02
     bc2:	28 2f       	mov	r18, r24
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	81 e0       	ldi	r24, 0x01	; 1
     bc8:	90 e0       	ldi	r25, 0x00	; 0
     bca:	02 2e       	mov	r0, r18
     bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <GPIO_setupPinDirection+0x8c>
     bce:	88 0f       	add	r24, r24
     bd0:	99 1f       	adc	r25, r25
     bd2:	0a 94       	dec	r0
     bd4:	e2 f7       	brpl	.-8      	; 0xbce <GPIO_setupPinDirection+0x88>
     bd6:	80 95       	com	r24
     bd8:	84 23       	and	r24, r20
     bda:	8c 93       	st	X, r24
     bdc:	97 c0       	rjmp	.+302    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRA,pin_num);
     bde:	aa e3       	ldi	r26, 0x3A	; 58
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	ea e3       	ldi	r30, 0x3A	; 58
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	28 2f       	mov	r18, r24
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	02 2e       	mov	r0, r18
     bf6:	02 c0       	rjmp	.+4      	; 0xbfc <GPIO_setupPinDirection+0xb6>
     bf8:	88 0f       	add	r24, r24
     bfa:	99 1f       	adc	r25, r25
     bfc:	0a 94       	dec	r0
     bfe:	e2 f7       	brpl	.-8      	; 0xbf8 <GPIO_setupPinDirection+0xb2>
     c00:	84 2b       	or	r24, r20
     c02:	8c 93       	st	X, r24
     c04:	83 c0       	rjmp	.+262    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(direction == PIN_INPUT)
     c06:	8b 81       	ldd	r24, Y+3	; 0x03
     c08:	88 23       	and	r24, r24
     c0a:	a9 f4       	brne	.+42     	; 0xc36 <GPIO_setupPinDirection+0xf0>
			{
				CLEAR_BIT(DDRB,pin_num);
     c0c:	a7 e3       	ldi	r26, 0x37	; 55
     c0e:	b0 e0       	ldi	r27, 0x00	; 0
     c10:	e7 e3       	ldi	r30, 0x37	; 55
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	48 2f       	mov	r20, r24
     c18:	8a 81       	ldd	r24, Y+2	; 0x02
     c1a:	28 2f       	mov	r18, r24
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	81 e0       	ldi	r24, 0x01	; 1
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	02 2e       	mov	r0, r18
     c24:	02 c0       	rjmp	.+4      	; 0xc2a <GPIO_setupPinDirection+0xe4>
     c26:	88 0f       	add	r24, r24
     c28:	99 1f       	adc	r25, r25
     c2a:	0a 94       	dec	r0
     c2c:	e2 f7       	brpl	.-8      	; 0xc26 <GPIO_setupPinDirection+0xe0>
     c2e:	80 95       	com	r24
     c30:	84 23       	and	r24, r20
     c32:	8c 93       	st	X, r24
     c34:	6b c0       	rjmp	.+214    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRB,pin_num);
     c36:	a7 e3       	ldi	r26, 0x37	; 55
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e7 e3       	ldi	r30, 0x37	; 55
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	48 2f       	mov	r20, r24
     c42:	8a 81       	ldd	r24, Y+2	; 0x02
     c44:	28 2f       	mov	r18, r24
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	02 2e       	mov	r0, r18
     c4e:	02 c0       	rjmp	.+4      	; 0xc54 <GPIO_setupPinDirection+0x10e>
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	0a 94       	dec	r0
     c56:	e2 f7       	brpl	.-8      	; 0xc50 <GPIO_setupPinDirection+0x10a>
     c58:	84 2b       	or	r24, r20
     c5a:	8c 93       	st	X, r24
     c5c:	57 c0       	rjmp	.+174    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(direction == PIN_INPUT)
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	88 23       	and	r24, r24
     c62:	a9 f4       	brne	.+42     	; 0xc8e <GPIO_setupPinDirection+0x148>
			{
				CLEAR_BIT(DDRC,pin_num);
     c64:	a4 e3       	ldi	r26, 0x34	; 52
     c66:	b0 e0       	ldi	r27, 0x00	; 0
     c68:	e4 e3       	ldi	r30, 0x34	; 52
     c6a:	f0 e0       	ldi	r31, 0x00	; 0
     c6c:	80 81       	ld	r24, Z
     c6e:	48 2f       	mov	r20, r24
     c70:	8a 81       	ldd	r24, Y+2	; 0x02
     c72:	28 2f       	mov	r18, r24
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	02 2e       	mov	r0, r18
     c7c:	02 c0       	rjmp	.+4      	; 0xc82 <GPIO_setupPinDirection+0x13c>
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	0a 94       	dec	r0
     c84:	e2 f7       	brpl	.-8      	; 0xc7e <GPIO_setupPinDirection+0x138>
     c86:	80 95       	com	r24
     c88:	84 23       	and	r24, r20
     c8a:	8c 93       	st	X, r24
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRC,pin_num);
     c8e:	a4 e3       	ldi	r26, 0x34	; 52
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	e4 e3       	ldi	r30, 0x34	; 52
     c94:	f0 e0       	ldi	r31, 0x00	; 0
     c96:	80 81       	ld	r24, Z
     c98:	48 2f       	mov	r20, r24
     c9a:	8a 81       	ldd	r24, Y+2	; 0x02
     c9c:	28 2f       	mov	r18, r24
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 2e       	mov	r0, r18
     ca6:	02 c0       	rjmp	.+4      	; 0xcac <GPIO_setupPinDirection+0x166>
     ca8:	88 0f       	add	r24, r24
     caa:	99 1f       	adc	r25, r25
     cac:	0a 94       	dec	r0
     cae:	e2 f7       	brpl	.-8      	; 0xca8 <GPIO_setupPinDirection+0x162>
     cb0:	84 2b       	or	r24, r20
     cb2:	8c 93       	st	X, r24
     cb4:	2b c0       	rjmp	.+86     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(direction == PIN_INPUT)
     cb6:	8b 81       	ldd	r24, Y+3	; 0x03
     cb8:	88 23       	and	r24, r24
     cba:	a9 f4       	brne	.+42     	; 0xce6 <GPIO_setupPinDirection+0x1a0>
			{
				CLEAR_BIT(DDRD,pin_num);
     cbc:	a1 e3       	ldi	r26, 0x31	; 49
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e1 e3       	ldi	r30, 0x31	; 49
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	48 2f       	mov	r20, r24
     cc8:	8a 81       	ldd	r24, Y+2	; 0x02
     cca:	28 2f       	mov	r18, r24
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	02 2e       	mov	r0, r18
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <GPIO_setupPinDirection+0x194>
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	0a 94       	dec	r0
     cdc:	e2 f7       	brpl	.-8      	; 0xcd6 <GPIO_setupPinDirection+0x190>
     cde:	80 95       	com	r24
     ce0:	84 23       	and	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	13 c0       	rjmp	.+38     	; 0xd0c <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				SET_BIT(DDRD,pin_num);
     ce6:	a1 e3       	ldi	r26, 0x31	; 49
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e1 e3       	ldi	r30, 0x31	; 49
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <GPIO_setupPinDirection+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <GPIO_setupPinDirection+0x1ba>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	cf 91       	pop	r28
     d18:	df 91       	pop	r29
     d1a:	08 95       	ret

00000d1c <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     d1c:	df 93       	push	r29
     d1e:	cf 93       	push	r28
     d20:	00 d0       	rcall	.+0      	; 0xd22 <GPIO_writePin+0x6>
     d22:	00 d0       	rcall	.+0      	; 0xd24 <GPIO_writePin+0x8>
     d24:	0f 92       	push	r0
     d26:	cd b7       	in	r28, 0x3d	; 61
     d28:	de b7       	in	r29, 0x3e	; 62
     d2a:	89 83       	std	Y+1, r24	; 0x01
     d2c:	6a 83       	std	Y+2, r22	; 0x02
     d2e:	4b 83       	std	Y+3, r20	; 0x03
	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	08 f0       	brcs	.+2      	; 0xd38 <GPIO_writePin+0x1c>
     d36:	d5 c0       	rjmp	.+426    	; 0xee2 <GPIO_writePin+0x1c6>
     d38:	8a 81       	ldd	r24, Y+2	; 0x02
     d3a:	88 30       	cpi	r24, 0x08	; 8
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <GPIO_writePin+0x24>
     d3e:	d1 c0       	rjmp	.+418    	; 0xee2 <GPIO_writePin+0x1c6>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	28 2f       	mov	r18, r24
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	3d 83       	std	Y+5, r19	; 0x05
     d48:	2c 83       	std	Y+4, r18	; 0x04
     d4a:	8c 81       	ldd	r24, Y+4	; 0x04
     d4c:	9d 81       	ldd	r25, Y+5	; 0x05
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	91 05       	cpc	r25, r1
     d52:	09 f4       	brne	.+2      	; 0xd56 <GPIO_writePin+0x3a>
     d54:	43 c0       	rjmp	.+134    	; 0xddc <GPIO_writePin+0xc0>
     d56:	2c 81       	ldd	r18, Y+4	; 0x04
     d58:	3d 81       	ldd	r19, Y+5	; 0x05
     d5a:	22 30       	cpi	r18, 0x02	; 2
     d5c:	31 05       	cpc	r19, r1
     d5e:	2c f4       	brge	.+10     	; 0xd6a <GPIO_writePin+0x4e>
     d60:	8c 81       	ldd	r24, Y+4	; 0x04
     d62:	9d 81       	ldd	r25, Y+5	; 0x05
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	71 f0       	breq	.+28     	; 0xd84 <GPIO_writePin+0x68>
     d68:	bc c0       	rjmp	.+376    	; 0xee2 <GPIO_writePin+0x1c6>
     d6a:	2c 81       	ldd	r18, Y+4	; 0x04
     d6c:	3d 81       	ldd	r19, Y+5	; 0x05
     d6e:	22 30       	cpi	r18, 0x02	; 2
     d70:	31 05       	cpc	r19, r1
     d72:	09 f4       	brne	.+2      	; 0xd76 <GPIO_writePin+0x5a>
     d74:	5f c0       	rjmp	.+190    	; 0xe34 <GPIO_writePin+0x118>
     d76:	8c 81       	ldd	r24, Y+4	; 0x04
     d78:	9d 81       	ldd	r25, Y+5	; 0x05
     d7a:	83 30       	cpi	r24, 0x03	; 3
     d7c:	91 05       	cpc	r25, r1
     d7e:	09 f4       	brne	.+2      	; 0xd82 <GPIO_writePin+0x66>
     d80:	85 c0       	rjmp	.+266    	; 0xe8c <GPIO_writePin+0x170>
     d82:	af c0       	rjmp	.+350    	; 0xee2 <GPIO_writePin+0x1c6>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(value == LOGIC_LOW)
     d84:	8b 81       	ldd	r24, Y+3	; 0x03
     d86:	88 23       	and	r24, r24
     d88:	a9 f4       	brne	.+42     	; 0xdb4 <GPIO_writePin+0x98>
			{
				CLEAR_BIT(PORTA,pin_num);
     d8a:	ab e3       	ldi	r26, 0x3B	; 59
     d8c:	b0 e0       	ldi	r27, 0x00	; 0
     d8e:	eb e3       	ldi	r30, 0x3B	; 59
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	80 81       	ld	r24, Z
     d94:	48 2f       	mov	r20, r24
     d96:	8a 81       	ldd	r24, Y+2	; 0x02
     d98:	28 2f       	mov	r18, r24
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	02 2e       	mov	r0, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <GPIO_writePin+0x8c>
     da4:	88 0f       	add	r24, r24
     da6:	99 1f       	adc	r25, r25
     da8:	0a 94       	dec	r0
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <GPIO_writePin+0x88>
     dac:	80 95       	com	r24
     dae:	84 23       	and	r24, r20
     db0:	8c 93       	st	X, r24
     db2:	97 c0       	rjmp	.+302    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTA,pin_num);
     db4:	ab e3       	ldi	r26, 0x3B	; 59
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	eb e3       	ldi	r30, 0x3B	; 59
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	48 2f       	mov	r20, r24
     dc0:	8a 81       	ldd	r24, Y+2	; 0x02
     dc2:	28 2f       	mov	r18, r24
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	81 e0       	ldi	r24, 0x01	; 1
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	02 2e       	mov	r0, r18
     dcc:	02 c0       	rjmp	.+4      	; 0xdd2 <GPIO_writePin+0xb6>
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	0a 94       	dec	r0
     dd4:	e2 f7       	brpl	.-8      	; 0xdce <GPIO_writePin+0xb2>
     dd6:	84 2b       	or	r24, r20
     dd8:	8c 93       	st	X, r24
     dda:	83 c0       	rjmp	.+262    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(value == LOGIC_LOW)
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
     dde:	88 23       	and	r24, r24
     de0:	a9 f4       	brne	.+42     	; 0xe0c <GPIO_writePin+0xf0>
			{
				CLEAR_BIT(PORTB,pin_num);
     de2:	a8 e3       	ldi	r26, 0x38	; 56
     de4:	b0 e0       	ldi	r27, 0x00	; 0
     de6:	e8 e3       	ldi	r30, 0x38	; 56
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	48 2f       	mov	r20, r24
     dee:	8a 81       	ldd	r24, Y+2	; 0x02
     df0:	28 2f       	mov	r18, r24
     df2:	30 e0       	ldi	r19, 0x00	; 0
     df4:	81 e0       	ldi	r24, 0x01	; 1
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	02 2e       	mov	r0, r18
     dfa:	02 c0       	rjmp	.+4      	; 0xe00 <GPIO_writePin+0xe4>
     dfc:	88 0f       	add	r24, r24
     dfe:	99 1f       	adc	r25, r25
     e00:	0a 94       	dec	r0
     e02:	e2 f7       	brpl	.-8      	; 0xdfc <GPIO_writePin+0xe0>
     e04:	80 95       	com	r24
     e06:	84 23       	and	r24, r20
     e08:	8c 93       	st	X, r24
     e0a:	6b c0       	rjmp	.+214    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTB,pin_num);
     e0c:	a8 e3       	ldi	r26, 0x38	; 56
     e0e:	b0 e0       	ldi	r27, 0x00	; 0
     e10:	e8 e3       	ldi	r30, 0x38	; 56
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	80 81       	ld	r24, Z
     e16:	48 2f       	mov	r20, r24
     e18:	8a 81       	ldd	r24, Y+2	; 0x02
     e1a:	28 2f       	mov	r18, r24
     e1c:	30 e0       	ldi	r19, 0x00	; 0
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	02 2e       	mov	r0, r18
     e24:	02 c0       	rjmp	.+4      	; 0xe2a <GPIO_writePin+0x10e>
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	0a 94       	dec	r0
     e2c:	e2 f7       	brpl	.-8      	; 0xe26 <GPIO_writePin+0x10a>
     e2e:	84 2b       	or	r24, r20
     e30:	8c 93       	st	X, r24
     e32:	57 c0       	rjmp	.+174    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(value == LOGIC_LOW)
     e34:	8b 81       	ldd	r24, Y+3	; 0x03
     e36:	88 23       	and	r24, r24
     e38:	a9 f4       	brne	.+42     	; 0xe64 <GPIO_writePin+0x148>
			{
				CLEAR_BIT(PORTC,pin_num);
     e3a:	a5 e3       	ldi	r26, 0x35	; 53
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	e5 e3       	ldi	r30, 0x35	; 53
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	48 2f       	mov	r20, r24
     e46:	8a 81       	ldd	r24, Y+2	; 0x02
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	02 2e       	mov	r0, r18
     e52:	02 c0       	rjmp	.+4      	; 0xe58 <GPIO_writePin+0x13c>
     e54:	88 0f       	add	r24, r24
     e56:	99 1f       	adc	r25, r25
     e58:	0a 94       	dec	r0
     e5a:	e2 f7       	brpl	.-8      	; 0xe54 <GPIO_writePin+0x138>
     e5c:	80 95       	com	r24
     e5e:	84 23       	and	r24, r20
     e60:	8c 93       	st	X, r24
     e62:	3f c0       	rjmp	.+126    	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTC,pin_num);
     e64:	a5 e3       	ldi	r26, 0x35	; 53
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e5 e3       	ldi	r30, 0x35	; 53
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8a 81       	ldd	r24, Y+2	; 0x02
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <GPIO_writePin+0x166>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <GPIO_writePin+0x162>
     e86:	84 2b       	or	r24, r20
     e88:	8c 93       	st	X, r24
     e8a:	2b c0       	rjmp	.+86     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(value == LOGIC_LOW)
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	88 23       	and	r24, r24
     e90:	a9 f4       	brne	.+42     	; 0xebc <GPIO_writePin+0x1a0>
			{
				CLEAR_BIT(PORTD,pin_num);
     e92:	a2 e3       	ldi	r26, 0x32	; 50
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	e2 e3       	ldi	r30, 0x32	; 50
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	48 2f       	mov	r20, r24
     e9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ea0:	28 2f       	mov	r18, r24
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	02 2e       	mov	r0, r18
     eaa:	02 c0       	rjmp	.+4      	; 0xeb0 <GPIO_writePin+0x194>
     eac:	88 0f       	add	r24, r24
     eae:	99 1f       	adc	r25, r25
     eb0:	0a 94       	dec	r0
     eb2:	e2 f7       	brpl	.-8      	; 0xeac <GPIO_writePin+0x190>
     eb4:	80 95       	com	r24
     eb6:	84 23       	and	r24, r20
     eb8:	8c 93       	st	X, r24
     eba:	13 c0       	rjmp	.+38     	; 0xee2 <GPIO_writePin+0x1c6>
			}
			else
			{
				SET_BIT(PORTD,pin_num);
     ebc:	a2 e3       	ldi	r26, 0x32	; 50
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e2 e3       	ldi	r30, 0x32	; 50
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	48 2f       	mov	r20, r24
     ec8:	8a 81       	ldd	r24, Y+2	; 0x02
     eca:	28 2f       	mov	r18, r24
     ecc:	30 e0       	ldi	r19, 0x00	; 0
     ece:	81 e0       	ldi	r24, 0x01	; 1
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 2e       	mov	r0, r18
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <GPIO_writePin+0x1be>
     ed6:	88 0f       	add	r24, r24
     ed8:	99 1f       	adc	r25, r25
     eda:	0a 94       	dec	r0
     edc:	e2 f7       	brpl	.-8      	; 0xed6 <GPIO_writePin+0x1ba>
     ede:	84 2b       	or	r24, r20
     ee0:	8c 93       	st	X, r24
			}
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
     ee2:	0f 90       	pop	r0
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	00 d0       	rcall	.+0      	; 0xef8 <GPIO_readPin+0x6>
     ef8:	00 d0       	rcall	.+0      	; 0xefa <GPIO_readPin+0x8>
     efa:	0f 92       	push	r0
     efc:	cd b7       	in	r28, 0x3d	; 61
     efe:	de b7       	in	r29, 0x3e	; 62
     f00:	8a 83       	std	Y+2, r24	; 0x02
     f02:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_pinValue = LOGIC_LOW;
     f04:	19 82       	std	Y+1, r1	; 0x01

	if(port_num >= NUM_OF_PORTS || pin_num >= NUM_OF_PINS_PER_PORT) /* Corner Case : If input was wrong */
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	84 30       	cpi	r24, 0x04	; 4
     f0a:	08 f0       	brcs	.+2      	; 0xf0e <GPIO_readPin+0x1c>
     f0c:	84 c0       	rjmp	.+264    	; 0x1016 <GPIO_readPin+0x124>
     f0e:	8b 81       	ldd	r24, Y+3	; 0x03
     f10:	88 30       	cpi	r24, 0x08	; 8
     f12:	08 f0       	brcs	.+2      	; 0xf16 <GPIO_readPin+0x24>
     f14:	80 c0       	rjmp	.+256    	; 0x1016 <GPIO_readPin+0x124>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
     f16:	8a 81       	ldd	r24, Y+2	; 0x02
     f18:	28 2f       	mov	r18, r24
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	3d 83       	std	Y+5, r19	; 0x05
     f1e:	2c 83       	std	Y+4, r18	; 0x04
     f20:	4c 81       	ldd	r20, Y+4	; 0x04
     f22:	5d 81       	ldd	r21, Y+5	; 0x05
     f24:	41 30       	cpi	r20, 0x01	; 1
     f26:	51 05       	cpc	r21, r1
     f28:	79 f1       	breq	.+94     	; 0xf88 <GPIO_readPin+0x96>
     f2a:	8c 81       	ldd	r24, Y+4	; 0x04
     f2c:	9d 81       	ldd	r25, Y+5	; 0x05
     f2e:	82 30       	cpi	r24, 0x02	; 2
     f30:	91 05       	cpc	r25, r1
     f32:	34 f4       	brge	.+12     	; 0xf40 <GPIO_readPin+0x4e>
     f34:	2c 81       	ldd	r18, Y+4	; 0x04
     f36:	3d 81       	ldd	r19, Y+5	; 0x05
     f38:	21 15       	cp	r18, r1
     f3a:	31 05       	cpc	r19, r1
     f3c:	69 f0       	breq	.+26     	; 0xf58 <GPIO_readPin+0x66>
     f3e:	6b c0       	rjmp	.+214    	; 0x1016 <GPIO_readPin+0x124>
     f40:	4c 81       	ldd	r20, Y+4	; 0x04
     f42:	5d 81       	ldd	r21, Y+5	; 0x05
     f44:	42 30       	cpi	r20, 0x02	; 2
     f46:	51 05       	cpc	r21, r1
     f48:	b9 f1       	breq	.+110    	; 0xfb8 <GPIO_readPin+0xc6>
     f4a:	8c 81       	ldd	r24, Y+4	; 0x04
     f4c:	9d 81       	ldd	r25, Y+5	; 0x05
     f4e:	83 30       	cpi	r24, 0x03	; 3
     f50:	91 05       	cpc	r25, r1
     f52:	09 f4       	brne	.+2      	; 0xf56 <GPIO_readPin+0x64>
     f54:	49 c0       	rjmp	.+146    	; 0xfe8 <GPIO_readPin+0xf6>
     f56:	5f c0       	rjmp	.+190    	; 0x1016 <GPIO_readPin+0x124>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
     f58:	e9 e3       	ldi	r30, 0x39	; 57
     f5a:	f0 e0       	ldi	r31, 0x00	; 0
     f5c:	80 81       	ld	r24, Z
     f5e:	28 2f       	mov	r18, r24
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 2f       	mov	r24, r24
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	a9 01       	movw	r20, r18
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <GPIO_readPin+0x7e>
     f6c:	55 95       	asr	r21
     f6e:	47 95       	ror	r20
     f70:	8a 95       	dec	r24
     f72:	e2 f7       	brpl	.-8      	; 0xf6c <GPIO_readPin+0x7a>
     f74:	ca 01       	movw	r24, r20
     f76:	81 70       	andi	r24, 0x01	; 1
     f78:	90 70       	andi	r25, 0x00	; 0
     f7a:	88 23       	and	r24, r24
     f7c:	19 f0       	breq	.+6      	; 0xf84 <GPIO_readPin+0x92>
			{
				a_pinValue = LOGIC_HIGH;
     f7e:	81 e0       	ldi	r24, 0x01	; 1
     f80:	89 83       	std	Y+1, r24	; 0x01
     f82:	49 c0       	rjmp	.+146    	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     f84:	19 82       	std	Y+1, r1	; 0x01
     f86:	47 c0       	rjmp	.+142    	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
     f88:	e6 e3       	ldi	r30, 0x36	; 54
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	28 2f       	mov	r18, r24
     f90:	30 e0       	ldi	r19, 0x00	; 0
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	a9 01       	movw	r20, r18
     f9a:	02 c0       	rjmp	.+4      	; 0xfa0 <GPIO_readPin+0xae>
     f9c:	55 95       	asr	r21
     f9e:	47 95       	ror	r20
     fa0:	8a 95       	dec	r24
     fa2:	e2 f7       	brpl	.-8      	; 0xf9c <GPIO_readPin+0xaa>
     fa4:	ca 01       	movw	r24, r20
     fa6:	81 70       	andi	r24, 0x01	; 1
     fa8:	90 70       	andi	r25, 0x00	; 0
     faa:	88 23       	and	r24, r24
     fac:	19 f0       	breq	.+6      	; 0xfb4 <GPIO_readPin+0xc2>
			{
				a_pinValue = LOGIC_HIGH;
     fae:	81 e0       	ldi	r24, 0x01	; 1
     fb0:	89 83       	std	Y+1, r24	; 0x01
     fb2:	31 c0       	rjmp	.+98     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     fb4:	19 82       	std	Y+1, r1	; 0x01
     fb6:	2f c0       	rjmp	.+94     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
     fb8:	e3 e3       	ldi	r30, 0x33	; 51
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	80 81       	ld	r24, Z
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	a9 01       	movw	r20, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <GPIO_readPin+0xde>
     fcc:	55 95       	asr	r21
     fce:	47 95       	ror	r20
     fd0:	8a 95       	dec	r24
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <GPIO_readPin+0xda>
     fd4:	ca 01       	movw	r24, r20
     fd6:	81 70       	andi	r24, 0x01	; 1
     fd8:	90 70       	andi	r25, 0x00	; 0
     fda:	88 23       	and	r24, r24
     fdc:	19 f0       	breq	.+6      	; 0xfe4 <GPIO_readPin+0xf2>
			{
				a_pinValue = LOGIC_HIGH;
     fde:	81 e0       	ldi	r24, 0x01	; 1
     fe0:	89 83       	std	Y+1, r24	; 0x01
     fe2:	19 c0       	rjmp	.+50     	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
     fe4:	19 82       	std	Y+1, r1	; 0x01
     fe6:	17 c0       	rjmp	.+46     	; 0x1016 <GPIO_readPin+0x124>
			}
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
     fe8:	e0 e3       	ldi	r30, 0x30	; 48
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	28 2f       	mov	r18, r24
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a9 01       	movw	r20, r18
     ffa:	02 c0       	rjmp	.+4      	; 0x1000 <GPIO_readPin+0x10e>
     ffc:	55 95       	asr	r21
     ffe:	47 95       	ror	r20
    1000:	8a 95       	dec	r24
    1002:	e2 f7       	brpl	.-8      	; 0xffc <GPIO_readPin+0x10a>
    1004:	ca 01       	movw	r24, r20
    1006:	81 70       	andi	r24, 0x01	; 1
    1008:	90 70       	andi	r25, 0x00	; 0
    100a:	88 23       	and	r24, r24
    100c:	19 f0       	breq	.+6      	; 0x1014 <GPIO_readPin+0x122>
			{
				a_pinValue = LOGIC_HIGH;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	89 83       	std	Y+1, r24	; 0x01
    1012:	01 c0       	rjmp	.+2      	; 0x1016 <GPIO_readPin+0x124>
			}
			else
			{
				a_pinValue = LOGIC_LOW;
    1014:	19 82       	std	Y+1, r1	; 0x01
			break;
/*----------------------------------------------------------------------------*/
		}
	}

	return a_pinValue;
    1016:	89 81       	ldd	r24, Y+1	; 0x01
}
    1018:	0f 90       	pop	r0
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	cf 91       	pop	r28
    1024:	df 91       	pop	r29
    1026:	08 95       	ret

00001028 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1028:	df 93       	push	r29
    102a:	cf 93       	push	r28
    102c:	00 d0       	rcall	.+0      	; 0x102e <GPIO_setupPortDirection+0x6>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <GPIO_setupPortDirection+0x8>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	6a 83       	std	Y+2, r22	; 0x02

	if(port_num >= NUM_OF_PORTS) /* Corner Case : If input was wrong */
    1038:	89 81       	ldd	r24, Y+1	; 0x01
    103a:	84 30       	cpi	r24, 0x04	; 4
    103c:	90 f5       	brcc	.+100    	; 0x10a2 <GPIO_setupPortDirection+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	28 2f       	mov	r18, r24
    1042:	30 e0       	ldi	r19, 0x00	; 0
    1044:	3c 83       	std	Y+4, r19	; 0x04
    1046:	2b 83       	std	Y+3, r18	; 0x03
    1048:	8b 81       	ldd	r24, Y+3	; 0x03
    104a:	9c 81       	ldd	r25, Y+4	; 0x04
    104c:	81 30       	cpi	r24, 0x01	; 1
    104e:	91 05       	cpc	r25, r1
    1050:	d1 f0       	breq	.+52     	; 0x1086 <GPIO_setupPortDirection+0x5e>
    1052:	2b 81       	ldd	r18, Y+3	; 0x03
    1054:	3c 81       	ldd	r19, Y+4	; 0x04
    1056:	22 30       	cpi	r18, 0x02	; 2
    1058:	31 05       	cpc	r19, r1
    105a:	2c f4       	brge	.+10     	; 0x1066 <GPIO_setupPortDirection+0x3e>
    105c:	8b 81       	ldd	r24, Y+3	; 0x03
    105e:	9c 81       	ldd	r25, Y+4	; 0x04
    1060:	00 97       	sbiw	r24, 0x00	; 0
    1062:	61 f0       	breq	.+24     	; 0x107c <GPIO_setupPortDirection+0x54>
    1064:	1e c0       	rjmp	.+60     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
    1066:	2b 81       	ldd	r18, Y+3	; 0x03
    1068:	3c 81       	ldd	r19, Y+4	; 0x04
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	81 f0       	breq	.+32     	; 0x1090 <GPIO_setupPortDirection+0x68>
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	9c 81       	ldd	r25, Y+4	; 0x04
    1074:	83 30       	cpi	r24, 0x03	; 3
    1076:	91 05       	cpc	r25, r1
    1078:	81 f0       	breq	.+32     	; 0x109a <GPIO_setupPortDirection+0x72>
    107a:	13 c0       	rjmp	.+38     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			DDRA = direction;
    107c:	ea e3       	ldi	r30, 0x3A	; 58
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	8a 81       	ldd	r24, Y+2	; 0x02
    1082:	80 83       	st	Z, r24
    1084:	0e c0       	rjmp	.+28     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			DDRB = direction;
    1086:	e7 e3       	ldi	r30, 0x37	; 55
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	8a 81       	ldd	r24, Y+2	; 0x02
    108c:	80 83       	st	Z, r24
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			DDRC = direction;
    1090:	e4 e3       	ldi	r30, 0x34	; 52
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	80 83       	st	Z, r24
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <GPIO_setupPortDirection+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			DDRD = direction;
    109a:	e1 e3       	ldi	r30, 0x31	; 49
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	8a 81       	ldd	r24, Y+2	; 0x02
    10a0:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	cf 91       	pop	r28
    10ac:	df 91       	pop	r29
    10ae:	08 95       	ret

000010b0 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	00 d0       	rcall	.+0      	; 0x10b6 <GPIO_writePort+0x6>
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <GPIO_writePort+0x8>
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	89 83       	std	Y+1, r24	; 0x01
    10be:	6a 83       	std	Y+2, r22	; 0x02
	if(port_num > NUM_OF_PORTS) /* Corner Case : If input was wrong */
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	85 30       	cpi	r24, 0x05	; 5
    10c4:	90 f5       	brcc	.+100    	; 0x112a <GPIO_writePort+0x7a>
	{
		/* Do Nothing */
	}
	else
	{
		switch(port_num)
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	3c 83       	std	Y+4, r19	; 0x04
    10ce:	2b 83       	std	Y+3, r18	; 0x03
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	81 30       	cpi	r24, 0x01	; 1
    10d6:	91 05       	cpc	r25, r1
    10d8:	d1 f0       	breq	.+52     	; 0x110e <GPIO_writePort+0x5e>
    10da:	2b 81       	ldd	r18, Y+3	; 0x03
    10dc:	3c 81       	ldd	r19, Y+4	; 0x04
    10de:	22 30       	cpi	r18, 0x02	; 2
    10e0:	31 05       	cpc	r19, r1
    10e2:	2c f4       	brge	.+10     	; 0x10ee <GPIO_writePort+0x3e>
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	00 97       	sbiw	r24, 0x00	; 0
    10ea:	61 f0       	breq	.+24     	; 0x1104 <GPIO_writePort+0x54>
    10ec:	1e c0       	rjmp	.+60     	; 0x112a <GPIO_writePort+0x7a>
    10ee:	2b 81       	ldd	r18, Y+3	; 0x03
    10f0:	3c 81       	ldd	r19, Y+4	; 0x04
    10f2:	22 30       	cpi	r18, 0x02	; 2
    10f4:	31 05       	cpc	r19, r1
    10f6:	81 f0       	breq	.+32     	; 0x1118 <GPIO_writePort+0x68>
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	83 30       	cpi	r24, 0x03	; 3
    10fe:	91 05       	cpc	r25, r1
    1100:	81 f0       	breq	.+32     	; 0x1122 <GPIO_writePort+0x72>
    1102:	13 c0       	rjmp	.+38     	; 0x112a <GPIO_writePort+0x7a>
		{
/*----------------------------------------------------------------------------*/
		case PORTA_ID:
			PORTA = value;
    1104:	eb e3       	ldi	r30, 0x3B	; 59
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	80 83       	st	Z, r24
    110c:	0e c0       	rjmp	.+28     	; 0x112a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTB_ID:
			PORTB = value;
    110e:	e8 e3       	ldi	r30, 0x38	; 56
    1110:	f0 e0       	ldi	r31, 0x00	; 0
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	80 83       	st	Z, r24
    1116:	09 c0       	rjmp	.+18     	; 0x112a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTC_ID:
			PORTC = value;
    1118:	e5 e3       	ldi	r30, 0x35	; 53
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	80 83       	st	Z, r24
    1120:	04 c0       	rjmp	.+8      	; 0x112a <GPIO_writePort+0x7a>
			break;
/*----------------------------------------------------------------------------*/
		case PORTD_ID:
			PORTD = value;
    1122:	e2 e3       	ldi	r30, 0x32	; 50
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	80 83       	st	Z, r24
			break;
/*----------------------------------------------------------------------------*/
		}
	}
}
    112a:	0f 90       	pop	r0
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	cf 91       	pop	r28
    1134:	df 91       	pop	r29
    1136:	08 95       	ret

00001138 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1138:	df 93       	push	r29
    113a:	cf 93       	push	r28
    113c:	00 d0       	rcall	.+0      	; 0x113e <GPIO_readPort+0x6>
    113e:	00 d0       	rcall	.+0      	; 0x1140 <GPIO_readPort+0x8>
    1140:	cd b7       	in	r28, 0x3d	; 61
    1142:	de b7       	in	r29, 0x3e	; 62
    1144:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_portValue = LOGIC_LOW;
    1146:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1148:	8a 81       	ldd	r24, Y+2	; 0x02
    114a:	84 30       	cpi	r24, 0x04	; 4
    114c:	90 f5       	brcc	.+100    	; 0x11b2 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    114e:	8a 81       	ldd	r24, Y+2	; 0x02
    1150:	28 2f       	mov	r18, r24
    1152:	30 e0       	ldi	r19, 0x00	; 0
    1154:	3c 83       	std	Y+4, r19	; 0x04
    1156:	2b 83       	std	Y+3, r18	; 0x03
    1158:	8b 81       	ldd	r24, Y+3	; 0x03
    115a:	9c 81       	ldd	r25, Y+4	; 0x04
    115c:	81 30       	cpi	r24, 0x01	; 1
    115e:	91 05       	cpc	r25, r1
    1160:	d1 f0       	breq	.+52     	; 0x1196 <GPIO_readPort+0x5e>
    1162:	2b 81       	ldd	r18, Y+3	; 0x03
    1164:	3c 81       	ldd	r19, Y+4	; 0x04
    1166:	22 30       	cpi	r18, 0x02	; 2
    1168:	31 05       	cpc	r19, r1
    116a:	2c f4       	brge	.+10     	; 0x1176 <GPIO_readPort+0x3e>
    116c:	8b 81       	ldd	r24, Y+3	; 0x03
    116e:	9c 81       	ldd	r25, Y+4	; 0x04
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	61 f0       	breq	.+24     	; 0x118c <GPIO_readPort+0x54>
    1174:	1e c0       	rjmp	.+60     	; 0x11b2 <GPIO_readPort+0x7a>
    1176:	2b 81       	ldd	r18, Y+3	; 0x03
    1178:	3c 81       	ldd	r19, Y+4	; 0x04
    117a:	22 30       	cpi	r18, 0x02	; 2
    117c:	31 05       	cpc	r19, r1
    117e:	81 f0       	breq	.+32     	; 0x11a0 <GPIO_readPort+0x68>
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	83 30       	cpi	r24, 0x03	; 3
    1186:	91 05       	cpc	r25, r1
    1188:	81 f0       	breq	.+32     	; 0x11aa <GPIO_readPort+0x72>
    118a:	13 c0       	rjmp	.+38     	; 0x11b2 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			a_portValue = PINA;
    118c:	e9 e3       	ldi	r30, 0x39	; 57
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	0e c0       	rjmp	.+28     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			a_portValue = PINB;
    1196:	e6 e3       	ldi	r30, 0x36	; 54
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	80 81       	ld	r24, Z
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	09 c0       	rjmp	.+18     	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			a_portValue = PINC;
    11a0:	e3 e3       	ldi	r30, 0x33	; 51
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	89 83       	std	Y+1, r24	; 0x01
    11a8:	04 c0       	rjmp	.+8      	; 0x11b2 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			a_portValue = PIND;
    11aa:	e0 e3       	ldi	r30, 0x30	; 48
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return a_portValue;
    11b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <__vector_11>:

/**-------------------------Interrupts Section----------------------**/
/**                               TIMER 0                          **/
/* Interrupt for normal mode */
ISR(TIMER0_OVF_vect)
{
    11c2:	1f 92       	push	r1
    11c4:	0f 92       	push	r0
    11c6:	0f b6       	in	r0, 0x3f	; 63
    11c8:	0f 92       	push	r0
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 93       	push	r18
    11ce:	3f 93       	push	r19
    11d0:	4f 93       	push	r20
    11d2:	5f 93       	push	r21
    11d4:	6f 93       	push	r22
    11d6:	7f 93       	push	r23
    11d8:	8f 93       	push	r24
    11da:	9f 93       	push	r25
    11dc:	af 93       	push	r26
    11de:	bf 93       	push	r27
    11e0:	ef 93       	push	r30
    11e2:	ff 93       	push	r31
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    11ec:	80 91 b8 00 	lds	r24, 0x00B8
    11f0:	90 91 b9 00 	lds	r25, 0x00B9
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	29 f0       	breq	.+10     	; 0x1202 <__vector_11+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    11f8:	e0 91 b8 00 	lds	r30, 0x00B8
    11fc:	f0 91 b9 00 	lds	r31, 0x00B9
    1200:	09 95       	icall
	}
}
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	ff 91       	pop	r31
    1208:	ef 91       	pop	r30
    120a:	bf 91       	pop	r27
    120c:	af 91       	pop	r26
    120e:	9f 91       	pop	r25
    1210:	8f 91       	pop	r24
    1212:	7f 91       	pop	r23
    1214:	6f 91       	pop	r22
    1216:	5f 91       	pop	r21
    1218:	4f 91       	pop	r20
    121a:	3f 91       	pop	r19
    121c:	2f 91       	pop	r18
    121e:	0f 90       	pop	r0
    1220:	0f be       	out	0x3f, r0	; 63
    1222:	0f 90       	pop	r0
    1224:	1f 90       	pop	r1
    1226:	18 95       	reti

00001228 <__vector_10>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER0_COMP_vect)
{
    1228:	1f 92       	push	r1
    122a:	0f 92       	push	r0
    122c:	0f b6       	in	r0, 0x3f	; 63
    122e:	0f 92       	push	r0
    1230:	11 24       	eor	r1, r1
    1232:	2f 93       	push	r18
    1234:	3f 93       	push	r19
    1236:	4f 93       	push	r20
    1238:	5f 93       	push	r21
    123a:	6f 93       	push	r22
    123c:	7f 93       	push	r23
    123e:	8f 93       	push	r24
    1240:	9f 93       	push	r25
    1242:	af 93       	push	r26
    1244:	bf 93       	push	r27
    1246:	ef 93       	push	r30
    1248:	ff 93       	push	r31
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	cd b7       	in	r28, 0x3d	; 61
    1250:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrZERO != NULL_PTR)
    1252:	80 91 b8 00 	lds	r24, 0x00B8
    1256:	90 91 b9 00 	lds	r25, 0x00B9
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	29 f0       	breq	.+10     	; 0x1268 <__vector_10+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrZERO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    125e:	e0 91 b8 00 	lds	r30, 0x00B8
    1262:	f0 91 b9 00 	lds	r31, 0x00B9
    1266:	09 95       	icall
	}
}
    1268:	cf 91       	pop	r28
    126a:	df 91       	pop	r29
    126c:	ff 91       	pop	r31
    126e:	ef 91       	pop	r30
    1270:	bf 91       	pop	r27
    1272:	af 91       	pop	r26
    1274:	9f 91       	pop	r25
    1276:	8f 91       	pop	r24
    1278:	7f 91       	pop	r23
    127a:	6f 91       	pop	r22
    127c:	5f 91       	pop	r21
    127e:	4f 91       	pop	r20
    1280:	3f 91       	pop	r19
    1282:	2f 91       	pop	r18
    1284:	0f 90       	pop	r0
    1286:	0f be       	out	0x3f, r0	; 63
    1288:	0f 90       	pop	r0
    128a:	1f 90       	pop	r1
    128c:	18 95       	reti

0000128e <__vector_9>:
/*------------------------------------------------------------------*/
/**                               TIMER 1                          **/

/* Interrupt for normal mode */
ISR(TIMER1_OVF_vect)
{
    128e:	1f 92       	push	r1
    1290:	0f 92       	push	r0
    1292:	0f b6       	in	r0, 0x3f	; 63
    1294:	0f 92       	push	r0
    1296:	11 24       	eor	r1, r1
    1298:	2f 93       	push	r18
    129a:	3f 93       	push	r19
    129c:	4f 93       	push	r20
    129e:	5f 93       	push	r21
    12a0:	6f 93       	push	r22
    12a2:	7f 93       	push	r23
    12a4:	8f 93       	push	r24
    12a6:	9f 93       	push	r25
    12a8:	af 93       	push	r26
    12aa:	bf 93       	push	r27
    12ac:	ef 93       	push	r30
    12ae:	ff 93       	push	r31
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	cd b7       	in	r28, 0x3d	; 61
    12b6:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    12b8:	80 91 ba 00 	lds	r24, 0x00BA
    12bc:	90 91 bb 00 	lds	r25, 0x00BB
    12c0:	00 97       	sbiw	r24, 0x00	; 0
    12c2:	29 f0       	breq	.+10     	; 0x12ce <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    12c4:	e0 91 ba 00 	lds	r30, 0x00BA
    12c8:	f0 91 bb 00 	lds	r31, 0x00BB
    12cc:	09 95       	icall
	}
}
    12ce:	cf 91       	pop	r28
    12d0:	df 91       	pop	r29
    12d2:	ff 91       	pop	r31
    12d4:	ef 91       	pop	r30
    12d6:	bf 91       	pop	r27
    12d8:	af 91       	pop	r26
    12da:	9f 91       	pop	r25
    12dc:	8f 91       	pop	r24
    12de:	7f 91       	pop	r23
    12e0:	6f 91       	pop	r22
    12e2:	5f 91       	pop	r21
    12e4:	4f 91       	pop	r20
    12e6:	3f 91       	pop	r19
    12e8:	2f 91       	pop	r18
    12ea:	0f 90       	pop	r0
    12ec:	0f be       	out	0x3f, r0	; 63
    12ee:	0f 90       	pop	r0
    12f0:	1f 90       	pop	r1
    12f2:	18 95       	reti

000012f4 <__vector_7>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER1_COMPA_vect)
{
    12f4:	1f 92       	push	r1
    12f6:	0f 92       	push	r0
    12f8:	0f b6       	in	r0, 0x3f	; 63
    12fa:	0f 92       	push	r0
    12fc:	11 24       	eor	r1, r1
    12fe:	2f 93       	push	r18
    1300:	3f 93       	push	r19
    1302:	4f 93       	push	r20
    1304:	5f 93       	push	r21
    1306:	6f 93       	push	r22
    1308:	7f 93       	push	r23
    130a:	8f 93       	push	r24
    130c:	9f 93       	push	r25
    130e:	af 93       	push	r26
    1310:	bf 93       	push	r27
    1312:	ef 93       	push	r30
    1314:	ff 93       	push	r31
    1316:	df 93       	push	r29
    1318:	cf 93       	push	r28
    131a:	cd b7       	in	r28, 0x3d	; 61
    131c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrONE != NULL_PTR)
    131e:	80 91 ba 00 	lds	r24, 0x00BA
    1322:	90 91 bb 00 	lds	r25, 0x00BB
    1326:	00 97       	sbiw	r24, 0x00	; 0
    1328:	29 f0       	breq	.+10     	; 0x1334 <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrONE)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    132a:	e0 91 ba 00 	lds	r30, 0x00BA
    132e:	f0 91 bb 00 	lds	r31, 0x00BB
    1332:	09 95       	icall
	}
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	ff 91       	pop	r31
    133a:	ef 91       	pop	r30
    133c:	bf 91       	pop	r27
    133e:	af 91       	pop	r26
    1340:	9f 91       	pop	r25
    1342:	8f 91       	pop	r24
    1344:	7f 91       	pop	r23
    1346:	6f 91       	pop	r22
    1348:	5f 91       	pop	r21
    134a:	4f 91       	pop	r20
    134c:	3f 91       	pop	r19
    134e:	2f 91       	pop	r18
    1350:	0f 90       	pop	r0
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	0f 90       	pop	r0
    1356:	1f 90       	pop	r1
    1358:	18 95       	reti

0000135a <__vector_5>:
/*-------------------------------------------------------------------*/
/**                               TIMER 2                          **/

/* Interrupt for normal mode */
ISR(TIMER2_OVF_vect)
{
    135a:	1f 92       	push	r1
    135c:	0f 92       	push	r0
    135e:	0f b6       	in	r0, 0x3f	; 63
    1360:	0f 92       	push	r0
    1362:	11 24       	eor	r1, r1
    1364:	2f 93       	push	r18
    1366:	3f 93       	push	r19
    1368:	4f 93       	push	r20
    136a:	5f 93       	push	r21
    136c:	6f 93       	push	r22
    136e:	7f 93       	push	r23
    1370:	8f 93       	push	r24
    1372:	9f 93       	push	r25
    1374:	af 93       	push	r26
    1376:	bf 93       	push	r27
    1378:	ef 93       	push	r30
    137a:	ff 93       	push	r31
    137c:	df 93       	push	r29
    137e:	cf 93       	push	r28
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    1384:	80 91 bc 00 	lds	r24, 0x00BC
    1388:	90 91 bd 00 	lds	r25, 0x00BD
    138c:	00 97       	sbiw	r24, 0x00	; 0
    138e:	29 f0       	breq	.+10     	; 0x139a <__vector_5+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1390:	e0 91 bc 00 	lds	r30, 0x00BC
    1394:	f0 91 bd 00 	lds	r31, 0x00BD
    1398:	09 95       	icall
	}
}
    139a:	cf 91       	pop	r28
    139c:	df 91       	pop	r29
    139e:	ff 91       	pop	r31
    13a0:	ef 91       	pop	r30
    13a2:	bf 91       	pop	r27
    13a4:	af 91       	pop	r26
    13a6:	9f 91       	pop	r25
    13a8:	8f 91       	pop	r24
    13aa:	7f 91       	pop	r23
    13ac:	6f 91       	pop	r22
    13ae:	5f 91       	pop	r21
    13b0:	4f 91       	pop	r20
    13b2:	3f 91       	pop	r19
    13b4:	2f 91       	pop	r18
    13b6:	0f 90       	pop	r0
    13b8:	0f be       	out	0x3f, r0	; 63
    13ba:	0f 90       	pop	r0
    13bc:	1f 90       	pop	r1
    13be:	18 95       	reti

000013c0 <__vector_4>:
/*-------------------------------------------------------------------*/
/* Interrupt for Compare Mode */
ISR(TIMER2_COMP_vect)
{
    13c0:	1f 92       	push	r1
    13c2:	0f 92       	push	r0
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	0f 92       	push	r0
    13c8:	11 24       	eor	r1, r1
    13ca:	2f 93       	push	r18
    13cc:	3f 93       	push	r19
    13ce:	4f 93       	push	r20
    13d0:	5f 93       	push	r21
    13d2:	6f 93       	push	r22
    13d4:	7f 93       	push	r23
    13d6:	8f 93       	push	r24
    13d8:	9f 93       	push	r25
    13da:	af 93       	push	r26
    13dc:	bf 93       	push	r27
    13de:	ef 93       	push	r30
    13e0:	ff 93       	push	r31
    13e2:	df 93       	push	r29
    13e4:	cf 93       	push	r28
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtrTWO != NULL_PTR)
    13ea:	80 91 bc 00 	lds	r24, 0x00BC
    13ee:	90 91 bd 00 	lds	r25, 0x00BD
    13f2:	00 97       	sbiw	r24, 0x00	; 0
    13f4:	29 f0       	breq	.+10     	; 0x1400 <__vector_4+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtrTWO)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    13f6:	e0 91 bc 00 	lds	r30, 0x00BC
    13fa:	f0 91 bd 00 	lds	r31, 0x00BD
    13fe:	09 95       	icall
	}
}
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	ff 91       	pop	r31
    1406:	ef 91       	pop	r30
    1408:	bf 91       	pop	r27
    140a:	af 91       	pop	r26
    140c:	9f 91       	pop	r25
    140e:	8f 91       	pop	r24
    1410:	7f 91       	pop	r23
    1412:	6f 91       	pop	r22
    1414:	5f 91       	pop	r21
    1416:	4f 91       	pop	r20
    1418:	3f 91       	pop	r19
    141a:	2f 91       	pop	r18
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	0f 90       	pop	r0
    1422:	1f 90       	pop	r1
    1424:	18 95       	reti

00001426 <Timer0_Init>:
/**------------------------Timer ZERO-----------------------**/
/*
 * Initializing Timer0
 */
void Timer0_Init(const Timer0_ConfigType *Config_Ptr)
{
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	00 d0       	rcall	.+0      	; 0x142c <Timer0_Init+0x6>
    142c:	cd b7       	in	r28, 0x3d	; 61
    142e:	de b7       	in	r29, 0x3e	; 62
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
	TCCR0 = (TCCR0 & 0x7F) | ((Config_Ptr->Timer0_ForceCompare)<<FOC0);
    1434:	a3 e5       	ldi	r26, 0x53	; 83
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e3 e5       	ldi	r30, 0x53	; 83
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	28 2f       	mov	r18, r24
    1440:	2f 77       	andi	r18, 0x7F	; 127
    1442:	e9 81       	ldd	r30, Y+1	; 0x01
    1444:	fa 81       	ldd	r31, Y+2	; 0x02
    1446:	81 81       	ldd	r24, Z+1	; 0x01
    1448:	88 2f       	mov	r24, r24
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	96 95       	lsr	r25
    144e:	98 2f       	mov	r25, r24
    1450:	88 27       	eor	r24, r24
    1452:	97 95       	ror	r25
    1454:	87 95       	ror	r24
    1456:	82 2b       	or	r24, r18
    1458:	8c 93       	st	X, r24

	/* Selecting the WaveForm Generation */
	TCCR0 = (TCCR0 & 0xBF) | (((Config_Ptr->Timer0_WaveForm)<<7)>>1);
    145a:	a3 e5       	ldi	r26, 0x53	; 83
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	e3 e5       	ldi	r30, 0x53	; 83
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	28 2f       	mov	r18, r24
    1466:	2f 7b       	andi	r18, 0xBF	; 191
    1468:	e9 81       	ldd	r30, Y+1	; 0x01
    146a:	fa 81       	ldd	r31, Y+2	; 0x02
    146c:	82 81       	ldd	r24, Z+2	; 0x02
    146e:	88 2f       	mov	r24, r24
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	96 95       	lsr	r25
    1474:	98 2f       	mov	r25, r24
    1476:	88 27       	eor	r24, r24
    1478:	97 95       	ror	r25
    147a:	87 95       	ror	r24
    147c:	95 95       	asr	r25
    147e:	87 95       	ror	r24
    1480:	82 2b       	or	r24, r18
    1482:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 & 0xF7) | (((Config_Ptr->Timer0_WaveForm)>>1)<<WGM01);
    1484:	a3 e5       	ldi	r26, 0x53	; 83
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e3 e5       	ldi	r30, 0x53	; 83
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	28 2f       	mov	r18, r24
    1490:	27 7f       	andi	r18, 0xF7	; 247
    1492:	e9 81       	ldd	r30, Y+1	; 0x01
    1494:	fa 81       	ldd	r31, Y+2	; 0x02
    1496:	82 81       	ldd	r24, Z+2	; 0x02
    1498:	86 95       	lsr	r24
    149a:	88 2f       	mov	r24, r24
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	88 0f       	add	r24, r24
    14a0:	99 1f       	adc	r25, r25
    14a2:	88 0f       	add	r24, r24
    14a4:	99 1f       	adc	r25, r25
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	82 2b       	or	r24, r18
    14ac:	8c 93       	st	X, r24

	/* Select Compare Match output mode */
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->Timer0_CompareMode)<<4);
    14ae:	a3 e5       	ldi	r26, 0x53	; 83
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	e3 e5       	ldi	r30, 0x53	; 83
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	28 2f       	mov	r18, r24
    14ba:	2f 7c       	andi	r18, 0xCF	; 207
    14bc:	e9 81       	ldd	r30, Y+1	; 0x01
    14be:	fa 81       	ldd	r31, Y+2	; 0x02
    14c0:	83 81       	ldd	r24, Z+3	; 0x03
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	82 95       	swap	r24
    14c8:	92 95       	swap	r25
    14ca:	90 7f       	andi	r25, 0xF0	; 240
    14cc:	98 27       	eor	r25, r24
    14ce:	80 7f       	andi	r24, 0xF0	; 240
    14d0:	98 27       	eor	r25, r24
    14d2:	82 2b       	or	r24, r18
    14d4:	8c 93       	st	X, r24

	/* Select the Prescaler Value */
	TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->Timer0_PreScaler));
    14d6:	a3 e5       	ldi	r26, 0x53	; 83
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e3 e5       	ldi	r30, 0x53	; 83
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	98 2f       	mov	r25, r24
    14e2:	98 7f       	andi	r25, 0xF8	; 248
    14e4:	e9 81       	ldd	r30, Y+1	; 0x01
    14e6:	fa 81       	ldd	r31, Y+2	; 0x02
    14e8:	80 81       	ld	r24, Z
    14ea:	89 2b       	or	r24, r25
    14ec:	8c 93       	st	X, r24

	/* Choosing the OVF value */
	TCNT0 = Config_Ptr->Timer0_TCNT0_Value;
    14ee:	a2 e5       	ldi	r26, 0x52	; 82
    14f0:	b0 e0       	ldi	r27, 0x00	; 0
    14f2:	e9 81       	ldd	r30, Y+1	; 0x01
    14f4:	fa 81       	ldd	r31, Y+2	; 0x02
    14f6:	86 81       	ldd	r24, Z+6	; 0x06
    14f8:	8c 93       	st	X, r24

	/* Choosing OCR0 value */
	OCR0 = Config_Ptr->Timer0_OCR0_Value;
    14fa:	ac e5       	ldi	r26, 0x5C	; 92
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1500:	fa 81       	ldd	r31, Y+2	; 0x02
    1502:	87 81       	ldd	r24, Z+7	; 0x07
    1504:	8c 93       	st	X, r24

	/* Enabling Interrupt for Compare */
	TIMSK = (TIMSK & 0xFD) | ((Config_Ptr->Timer0_COMP_INT)<<OCIE0);
    1506:	a9 e5       	ldi	r26, 0x59	; 89
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e9 e5       	ldi	r30, 0x59	; 89
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	28 2f       	mov	r18, r24
    1512:	2d 7f       	andi	r18, 0xFD	; 253
    1514:	e9 81       	ldd	r30, Y+1	; 0x01
    1516:	fa 81       	ldd	r31, Y+2	; 0x02
    1518:	84 81       	ldd	r24, Z+4	; 0x04
    151a:	88 2f       	mov	r24, r24
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	82 2b       	or	r24, r18
    1524:	8c 93       	st	X, r24

	/* Enabling Interrupts for OVF */
	TIMSK = (TIMSK & 0xFE) | ((Config_Ptr->Timer0_OVF_INT));
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	98 2f       	mov	r25, r24
    1532:	9e 7f       	andi	r25, 0xFE	; 254
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	85 81       	ldd	r24, Z+5	; 0x05
    153a:	89 2b       	or	r24, r25
    153c:	8c 93       	st	X, r24
}
    153e:	0f 90       	pop	r0
    1540:	0f 90       	pop	r0
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	08 95       	ret

00001548 <Timer0_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer0_deInit(void)
{
    1548:	df 93       	push	r29
    154a:	cf 93       	push	r28
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
	TCCR0 = 0;
    1550:	e3 e5       	ldi	r30, 0x53	; 83
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0xFC);
    1556:	a9 e5       	ldi	r26, 0x59	; 89
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e9 e5       	ldi	r30, 0x59	; 89
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	8c 7f       	andi	r24, 0xFC	; 252
    1562:	8c 93       	st	X, r24
}
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	08 95       	ret

0000156a <Timer0_setCallBackZERO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer0_setCallBackZERO(void(*a_ptr)(void))
{
    156a:	df 93       	push	r29
    156c:	cf 93       	push	r28
    156e:	00 d0       	rcall	.+0      	; 0x1570 <Timer0_setCallBackZERO+0x6>
    1570:	cd b7       	in	r28, 0x3d	; 61
    1572:	de b7       	in	r29, 0x3e	; 62
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrZERO = a_ptr;
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	90 93 b9 00 	sts	0x00B9, r25
    1580:	80 93 b8 00 	sts	0x00B8, r24
}
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <Timer0_PWM_Init>:

/*
 * Initializing Timer0_PWM
 */
void Timer0_PWM_Init(const Timer0_ConfigType *Config_Ptr)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <Timer0_PWM_Init+0x6>
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	9a 83       	std	Y+2, r25	; 0x02
    159a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    159c:	e2 e5       	ldi	r30, 0x52	; 82
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	10 82       	st	Z, r1

	/* Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC */
	GPIO_setupPinDirection(PWM0_PORT_ID, PWM0_PIN_ID, PIN_OUTPUT);
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	63 e0       	ldi	r22, 0x03	; 3
    15a6:	41 e0       	ldi	r20, 0x01	; 1
    15a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = Dependent on the user
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01);
    15ac:	e3 e5       	ldi	r30, 0x53	; 83
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	88 e6       	ldi	r24, 0x68	; 104
    15b2:	80 83       	st	Z, r24
	TCCR0 |= Config_Ptr->Timer0_PreScaler;
    15b4:	a3 e5       	ldi	r26, 0x53	; 83
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e3 e5       	ldi	r30, 0x53	; 83
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	90 81       	ld	r25, Z
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	80 81       	ld	r24, Z
    15c4:	89 2b       	or	r24, r25
    15c6:	8c 93       	st	X, r24
}
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <Timer0_PWM_Activate>:

/*
 * Setting Timer0_PWM
 */
void Timer0_PWM_Activate(uint8 *SetDuty_Ptr)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <Timer0_PWM_Activate+0x6>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = 0; /* Set Timer Initial Value to 0 */
    15e0:	e2 e5       	ldi	r30, 0x52	; 82
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	10 82       	st	Z, r1
	OCR0  = *SetDuty_Ptr; /* Set Compare Value */
    15e6:	ac e5       	ldi	r26, 0x5C	; 92
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	e9 81       	ldd	r30, Y+1	; 0x01
    15ec:	fa 81       	ldd	r31, Y+2	; 0x02
    15ee:	80 81       	ld	r24, Z
    15f0:	8c 93       	st	X, r24
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	cf 91       	pop	r28
    15f8:	df 91       	pop	r29
    15fa:	08 95       	ret

000015fc <Timer1_Init>:

/*
 * Initializing TIMER0
 */
void Timer1_Init(const Timer1_ConfigType *Config_Ptr)
{
    15fc:	df 93       	push	r29
    15fe:	cf 93       	push	r28
    1600:	00 d0       	rcall	.+0      	; 0x1602 <Timer1_Init+0x6>
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	9a 83       	std	Y+2, r25	; 0x02
    1608:	89 83       	std	Y+1, r24	; 0x01
	/* Compare Output Mode for channel A */
	TCCR1A = (TCCR1A & 0x3F) | (Config_Ptr->CompareModeA<<6);
    160a:	af e4       	ldi	r26, 0x4F	; 79
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ef e4       	ldi	r30, 0x4F	; 79
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	2f 73       	andi	r18, 0x3F	; 63
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	80 81       	ld	r24, Z
    161e:	88 2f       	mov	r24, r24
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	00 24       	eor	r0, r0
    1624:	96 95       	lsr	r25
    1626:	87 95       	ror	r24
    1628:	07 94       	ror	r0
    162a:	96 95       	lsr	r25
    162c:	87 95       	ror	r24
    162e:	07 94       	ror	r0
    1630:	98 2f       	mov	r25, r24
    1632:	80 2d       	mov	r24, r0
    1634:	82 2b       	or	r24, r18
    1636:	8c 93       	st	X, r24

	/* Compare Output Mode for channel B */
	TCCR1A = (TCCR1A & 0xCF) | (Config_Ptr->CompareModeB<<4);
    1638:	af e4       	ldi	r26, 0x4F	; 79
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	ef e4       	ldi	r30, 0x4F	; 79
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	28 2f       	mov	r18, r24
    1644:	2f 7c       	andi	r18, 0xCF	; 207
    1646:	e9 81       	ldd	r30, Y+1	; 0x01
    1648:	fa 81       	ldd	r31, Y+2	; 0x02
    164a:	81 81       	ldd	r24, Z+1	; 0x01
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	82 95       	swap	r24
    1652:	92 95       	swap	r25
    1654:	90 7f       	andi	r25, 0xF0	; 240
    1656:	98 27       	eor	r25, r24
    1658:	80 7f       	andi	r24, 0xF0	; 240
    165a:	98 27       	eor	r25, r24
    165c:	82 2b       	or	r24, r18
    165e:	8c 93       	st	X, r24

	/* Force Output Compare for Channel A */
	TCCR1A = (TCCR1A & 0xF7) | (Config_Ptr->ForceCompareA<<3);
    1660:	af e4       	ldi	r26, 0x4F	; 79
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ef e4       	ldi	r30, 0x4F	; 79
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	28 2f       	mov	r18, r24
    166c:	27 7f       	andi	r18, 0xF7	; 247
    166e:	e9 81       	ldd	r30, Y+1	; 0x01
    1670:	fa 81       	ldd	r31, Y+2	; 0x02
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	88 2f       	mov	r24, r24
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	88 0f       	add	r24, r24
    167a:	99 1f       	adc	r25, r25
    167c:	88 0f       	add	r24, r24
    167e:	99 1f       	adc	r25, r25
    1680:	88 0f       	add	r24, r24
    1682:	99 1f       	adc	r25, r25
    1684:	82 2b       	or	r24, r18
    1686:	8c 93       	st	X, r24

	/* Force Output Compare for Channel B */
	TCCR1A = (TCCR1A & 0xFB) | (Config_Ptr->ForceCompareB<<2);
    1688:	af e4       	ldi	r26, 0x4F	; 79
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	ef e4       	ldi	r30, 0x4F	; 79
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	28 2f       	mov	r18, r24
    1694:	2b 7f       	andi	r18, 0xFB	; 251
    1696:	e9 81       	ldd	r30, Y+1	; 0x01
    1698:	fa 81       	ldd	r31, Y+2	; 0x02
    169a:	83 81       	ldd	r24, Z+3	; 0x03
    169c:	88 2f       	mov	r24, r24
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	88 0f       	add	r24, r24
    16a2:	99 1f       	adc	r25, r25
    16a4:	88 0f       	add	r24, r24
    16a6:	99 1f       	adc	r25, r25
    16a8:	82 2b       	or	r24, r18
    16aa:	8c 93       	st	X, r24

	/* Setting the waveform */
	TCCR1A = (TCCR1A & 0xFC) | ((Config_Ptr->WaveForm<<6)>>6); /* Getting the first 2 bits only */
    16ac:	af e4       	ldi	r26, 0x4F	; 79
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	ef e4       	ldi	r30, 0x4F	; 79
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	28 2f       	mov	r18, r24
    16b8:	2c 7f       	andi	r18, 0xFC	; 252
    16ba:	e9 81       	ldd	r30, Y+1	; 0x01
    16bc:	fa 81       	ldd	r31, Y+2	; 0x02
    16be:	87 81       	ldd	r24, Z+7	; 0x07
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	00 24       	eor	r0, r0
    16c6:	96 95       	lsr	r25
    16c8:	87 95       	ror	r24
    16ca:	07 94       	ror	r0
    16cc:	96 95       	lsr	r25
    16ce:	87 95       	ror	r24
    16d0:	07 94       	ror	r0
    16d2:	98 2f       	mov	r25, r24
    16d4:	80 2d       	mov	r24, r0
    16d6:	08 2e       	mov	r0, r24
    16d8:	89 2f       	mov	r24, r25
    16da:	00 0c       	add	r0, r0
    16dc:	88 1f       	adc	r24, r24
    16de:	99 0b       	sbc	r25, r25
    16e0:	00 0c       	add	r0, r0
    16e2:	88 1f       	adc	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	82 2b       	or	r24, r18
    16e8:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xE7) | ((Config_Ptr->WaveForm>>2)<<3); /* Getting bit 2 and 3 only*/
    16ea:	ae e4       	ldi	r26, 0x4E	; 78
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	ee e4       	ldi	r30, 0x4E	; 78
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	27 7e       	andi	r18, 0xE7	; 231
    16f8:	e9 81       	ldd	r30, Y+1	; 0x01
    16fa:	fa 81       	ldd	r31, Y+2	; 0x02
    16fc:	87 81       	ldd	r24, Z+7	; 0x07
    16fe:	86 95       	lsr	r24
    1700:	86 95       	lsr	r24
    1702:	88 2f       	mov	r24, r24
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	88 0f       	add	r24, r24
    1708:	99 1f       	adc	r25, r25
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	88 0f       	add	r24, r24
    1710:	99 1f       	adc	r25, r25
    1712:	82 2b       	or	r24, r18
    1714:	8c 93       	st	X, r24

	/* Noise Canceler */
	TCCR1B = (TCCR1B & 0x7F) | ((Config_Ptr->NoiseControl)<<7);
    1716:	ae e4       	ldi	r26, 0x4E	; 78
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	ee e4       	ldi	r30, 0x4E	; 78
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	28 2f       	mov	r18, r24
    1722:	2f 77       	andi	r18, 0x7F	; 127
    1724:	e9 81       	ldd	r30, Y+1	; 0x01
    1726:	fa 81       	ldd	r31, Y+2	; 0x02
    1728:	85 81       	ldd	r24, Z+5	; 0x05
    172a:	88 2f       	mov	r24, r24
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	96 95       	lsr	r25
    1730:	98 2f       	mov	r25, r24
    1732:	88 27       	eor	r24, r24
    1734:	97 95       	ror	r25
    1736:	87 95       	ror	r24
    1738:	82 2b       	or	r24, r18
    173a:	8c 93       	st	X, r24

	/* Edge Select */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->EdgeControl)<<ICES1);
    173c:	ae e4       	ldi	r26, 0x4E	; 78
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	ee e4       	ldi	r30, 0x4E	; 78
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	28 2f       	mov	r18, r24
    1748:	2f 7b       	andi	r18, 0xBF	; 191
    174a:	e9 81       	ldd	r30, Y+1	; 0x01
    174c:	fa 81       	ldd	r31, Y+2	; 0x02
    174e:	84 81       	ldd	r24, Z+4	; 0x04
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	00 24       	eor	r0, r0
    1756:	96 95       	lsr	r25
    1758:	87 95       	ror	r24
    175a:	07 94       	ror	r0
    175c:	96 95       	lsr	r25
    175e:	87 95       	ror	r24
    1760:	07 94       	ror	r0
    1762:	98 2f       	mov	r25, r24
    1764:	80 2d       	mov	r24, r0
    1766:	82 2b       	or	r24, r18
    1768:	8c 93       	st	X, r24

	/* Clock Selection */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->F_TIMER1_CLOCK);
    176a:	ae e4       	ldi	r26, 0x4E	; 78
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	ee e4       	ldi	r30, 0x4E	; 78
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	98 2f       	mov	r25, r24
    1776:	98 7f       	andi	r25, 0xF8	; 248
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	86 81       	ldd	r24, Z+6	; 0x06
    177e:	89 2b       	or	r24, r25
    1780:	8c 93       	st	X, r24

	/* Enable compare A interrupt */
	TIMSK = (TIMSK & 0xEF) | ((Config_Ptr->interruptA)<<OCIE1A);
    1782:	a9 e5       	ldi	r26, 0x59	; 89
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e9 e5       	ldi	r30, 0x59	; 89
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	28 2f       	mov	r18, r24
    178e:	2f 7e       	andi	r18, 0xEF	; 239
    1790:	e9 81       	ldd	r30, Y+1	; 0x01
    1792:	fa 81       	ldd	r31, Y+2	; 0x02
    1794:	80 85       	ldd	r24, Z+8	; 0x08
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	82 95       	swap	r24
    179c:	92 95       	swap	r25
    179e:	90 7f       	andi	r25, 0xF0	; 240
    17a0:	98 27       	eor	r25, r24
    17a2:	80 7f       	andi	r24, 0xF0	; 240
    17a4:	98 27       	eor	r25, r24
    17a6:	82 2b       	or	r24, r18
    17a8:	8c 93       	st	X, r24

	/* Enable compare B interrupt */
	TIMSK = (TIMSK & 0xF7) | ((Config_Ptr->interruptB)<<OCIE1B);
    17aa:	a9 e5       	ldi	r26, 0x59	; 89
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e9 e5       	ldi	r30, 0x59	; 89
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	28 2f       	mov	r18, r24
    17b6:	27 7f       	andi	r18, 0xF7	; 247
    17b8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ba:	fa 81       	ldd	r31, Y+2	; 0x02
    17bc:	81 85       	ldd	r24, Z+9	; 0x09
    17be:	88 2f       	mov	r24, r24
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	88 0f       	add	r24, r24
    17c4:	99 1f       	adc	r25, r25
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	82 2b       	or	r24, r18
    17d0:	8c 93       	st	X, r24

	/* Enable OverFlow interrupt */
	TIMSK = (TIMSK & 0xFB) | ((Config_Ptr->interruptOvf)<<TOIE1);
    17d2:	a9 e5       	ldi	r26, 0x59	; 89
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e9 e5       	ldi	r30, 0x59	; 89
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	28 2f       	mov	r18, r24
    17de:	2b 7f       	andi	r18, 0xFB	; 251
    17e0:	e9 81       	ldd	r30, Y+1	; 0x01
    17e2:	fa 81       	ldd	r31, Y+2	; 0x02
    17e4:	82 85       	ldd	r24, Z+10	; 0x0a
    17e6:	88 2f       	mov	r24, r24
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	88 0f       	add	r24, r24
    17ec:	99 1f       	adc	r25, r25
    17ee:	88 0f       	add	r24, r24
    17f0:	99 1f       	adc	r25, r25
    17f2:	82 2b       	or	r24, r18
    17f4:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = Config_Ptr->TCNT1_Value;
    17f6:	ac e4       	ldi	r26, 0x4C	; 76
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	83 85       	ldd	r24, Z+11	; 0x0b
    1800:	94 85       	ldd	r25, Z+12	; 0x0c
    1802:	11 96       	adiw	r26, 0x01	; 1
    1804:	9c 93       	st	X, r25
    1806:	8e 93       	st	-X, r24

	/* Initializing the compare value register */
	OCR1A = Config_Ptr->OCR1A_Value;
    1808:	aa e4       	ldi	r26, 0x4A	; 74
    180a:	b0 e0       	ldi	r27, 0x00	; 0
    180c:	e9 81       	ldd	r30, Y+1	; 0x01
    180e:	fa 81       	ldd	r31, Y+2	; 0x02
    1810:	85 85       	ldd	r24, Z+13	; 0x0d
    1812:	96 85       	ldd	r25, Z+14	; 0x0e
    1814:	11 96       	adiw	r26, 0x01	; 1
    1816:	9c 93       	st	X, r25
    1818:	8e 93       	st	-X, r24
	OCR1B = Config_Ptr->OCR1B_Value;
    181a:	a8 e4       	ldi	r26, 0x48	; 72
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	e9 81       	ldd	r30, Y+1	; 0x01
    1820:	fa 81       	ldd	r31, Y+2	; 0x02
    1822:	87 85       	ldd	r24, Z+15	; 0x0f
    1824:	90 89       	ldd	r25, Z+16	; 0x10
    1826:	11 96       	adiw	r26, 0x01	; 1
    1828:	9c 93       	st	X, r25
    182a:	8e 93       	st	-X, r24
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	cf 91       	pop	r28
    1832:	df 91       	pop	r29
    1834:	08 95       	ret

00001836 <Timer1_setCallBackONE>:
/*-------------------------------------------------------------------*/

/* Description: Function to set the Call Back function address. */
void Timer1_setCallBackONE(void(*a_ptr)(void))
{
    1836:	df 93       	push	r29
    1838:	cf 93       	push	r28
    183a:	00 d0       	rcall	.+0      	; 0x183c <Timer1_setCallBackONE+0x6>
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrONE = a_ptr;
    1844:	89 81       	ldd	r24, Y+1	; 0x01
    1846:	9a 81       	ldd	r25, Y+2	; 0x02
    1848:	90 93 bb 00 	sts	0x00BB, r25
    184c:	80 93 ba 00 	sts	0x00BA, r24
}
    1850:	0f 90       	pop	r0
    1852:	0f 90       	pop	r0
    1854:	cf 91       	pop	r28
    1856:	df 91       	pop	r29
    1858:	08 95       	ret

0000185a <Timer1_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer1_deInit()
{
    185a:	df 93       	push	r29
    185c:	cf 93       	push	r28
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    1862:	ef e4       	ldi	r30, 0x4F	; 79
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	10 82       	st	Z, r1
	TCCR1B = 0;
    1868:	ee e4       	ldi	r30, 0x4E	; 78
    186a:	f0 e0       	ldi	r31, 0x00	; 0
    186c:	10 82       	st	Z, r1
	TIMSK = TIMSK & 0xC3;
    186e:	a9 e5       	ldi	r26, 0x59	; 89
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e9 e5       	ldi	r30, 0x59	; 89
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	83 7c       	andi	r24, 0xC3	; 195
    187a:	8c 93       	st	X, r24
}
    187c:	cf 91       	pop	r28
    187e:	df 91       	pop	r29
    1880:	08 95       	ret

00001882 <Timer2_Init>:
/**------------------------Timer TWO-----------------------**/
/*
 * Initializing Timer2
 */
void Timer2_Init(const Timer2_ConfigType *Config_Ptr)
{
    1882:	df 93       	push	r29
    1884:	cf 93       	push	r28
    1886:	00 d0       	rcall	.+0      	; 0x1888 <Timer2_Init+0x6>
    1888:	cd b7       	in	r28, 0x3d	; 61
    188a:	de b7       	in	r29, 0x3e	; 62
    188c:	9a 83       	std	Y+2, r25	; 0x02
    188e:	89 83       	std	Y+1, r24	; 0x01
	/* Selecting Force Output Compare */
		TCCR2 = (TCCR2 & 0x7F) | ((Config_Ptr->Timer2_ForceCompare)<<FOC2);
    1890:	a5 e4       	ldi	r26, 0x45	; 69
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e5 e4       	ldi	r30, 0x45	; 69
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	28 2f       	mov	r18, r24
    189c:	2f 77       	andi	r18, 0x7F	; 127
    189e:	e9 81       	ldd	r30, Y+1	; 0x01
    18a0:	fa 81       	ldd	r31, Y+2	; 0x02
    18a2:	81 81       	ldd	r24, Z+1	; 0x01
    18a4:	88 2f       	mov	r24, r24
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	96 95       	lsr	r25
    18aa:	98 2f       	mov	r25, r24
    18ac:	88 27       	eor	r24, r24
    18ae:	97 95       	ror	r25
    18b0:	87 95       	ror	r24
    18b2:	82 2b       	or	r24, r18
    18b4:	8c 93       	st	X, r24

		/* Selecting the WaveForm Generation */
		TCCR2 = (TCCR2 & 0xBF) | (((Config_Ptr->Timer2_WaveForm)<<7)>>1);
    18b6:	a5 e4       	ldi	r26, 0x45	; 69
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e4       	ldi	r30, 0x45	; 69
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	28 2f       	mov	r18, r24
    18c2:	2f 7b       	andi	r18, 0xBF	; 191
    18c4:	e9 81       	ldd	r30, Y+1	; 0x01
    18c6:	fa 81       	ldd	r31, Y+2	; 0x02
    18c8:	82 81       	ldd	r24, Z+2	; 0x02
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	96 95       	lsr	r25
    18d0:	98 2f       	mov	r25, r24
    18d2:	88 27       	eor	r24, r24
    18d4:	97 95       	ror	r25
    18d6:	87 95       	ror	r24
    18d8:	95 95       	asr	r25
    18da:	87 95       	ror	r24
    18dc:	82 2b       	or	r24, r18
    18de:	8c 93       	st	X, r24
		TCCR2 = (TCCR2 & 0xF7) | (((Config_Ptr->Timer2_WaveForm)>>1)<<WGM21);
    18e0:	a5 e4       	ldi	r26, 0x45	; 69
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	e5 e4       	ldi	r30, 0x45	; 69
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	80 81       	ld	r24, Z
    18ea:	28 2f       	mov	r18, r24
    18ec:	27 7f       	andi	r18, 0xF7	; 247
    18ee:	e9 81       	ldd	r30, Y+1	; 0x01
    18f0:	fa 81       	ldd	r31, Y+2	; 0x02
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	86 95       	lsr	r24
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	88 0f       	add	r24, r24
    18fc:	99 1f       	adc	r25, r25
    18fe:	88 0f       	add	r24, r24
    1900:	99 1f       	adc	r25, r25
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	82 2b       	or	r24, r18
    1908:	8c 93       	st	X, r24

		/* Select Compare Match output mode */
		TCCR2 = (TCCR2 & 0xCF) | ((Config_Ptr->Timer2_CompareMode)<<4);
    190a:	a5 e4       	ldi	r26, 0x45	; 69
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	e5 e4       	ldi	r30, 0x45	; 69
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	80 81       	ld	r24, Z
    1914:	28 2f       	mov	r18, r24
    1916:	2f 7c       	andi	r18, 0xCF	; 207
    1918:	e9 81       	ldd	r30, Y+1	; 0x01
    191a:	fa 81       	ldd	r31, Y+2	; 0x02
    191c:	83 81       	ldd	r24, Z+3	; 0x03
    191e:	88 2f       	mov	r24, r24
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	82 95       	swap	r24
    1924:	92 95       	swap	r25
    1926:	90 7f       	andi	r25, 0xF0	; 240
    1928:	98 27       	eor	r25, r24
    192a:	80 7f       	andi	r24, 0xF0	; 240
    192c:	98 27       	eor	r25, r24
    192e:	82 2b       	or	r24, r18
    1930:	8c 93       	st	X, r24

		/* Select the Prescaler Value */
		TCCR2 = (TCCR2 & 0xF8) | ((Config_Ptr->Timer2_PreScaler));
    1932:	a5 e4       	ldi	r26, 0x45	; 69
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e5 e4       	ldi	r30, 0x45	; 69
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	98 2f       	mov	r25, r24
    193e:	98 7f       	andi	r25, 0xF8	; 248
    1940:	e9 81       	ldd	r30, Y+1	; 0x01
    1942:	fa 81       	ldd	r31, Y+2	; 0x02
    1944:	80 81       	ld	r24, Z
    1946:	89 2b       	or	r24, r25
    1948:	8c 93       	st	X, r24

		/* Choosing the OVF value */
		TCNT0 = Config_Ptr->Timer2_TCNT2_Value;
    194a:	a2 e5       	ldi	r26, 0x52	; 82
    194c:	b0 e0       	ldi	r27, 0x00	; 0
    194e:	e9 81       	ldd	r30, Y+1	; 0x01
    1950:	fa 81       	ldd	r31, Y+2	; 0x02
    1952:	86 81       	ldd	r24, Z+6	; 0x06
    1954:	8c 93       	st	X, r24

		/* Choosing OCR2 value */
		OCR2 = Config_Ptr->Timer2_OCR2_Value;
    1956:	a3 e4       	ldi	r26, 0x43	; 67
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e9 81       	ldd	r30, Y+1	; 0x01
    195c:	fa 81       	ldd	r31, Y+2	; 0x02
    195e:	87 81       	ldd	r24, Z+7	; 0x07
    1960:	8c 93       	st	X, r24

		/* Enabling Interrupt for Compare */
		TIMSK = (TIMSK & 0x7F) | ((Config_Ptr->Timer2_COMP_INT)<<OCIE2);
    1962:	a9 e5       	ldi	r26, 0x59	; 89
    1964:	b0 e0       	ldi	r27, 0x00	; 0
    1966:	e9 e5       	ldi	r30, 0x59	; 89
    1968:	f0 e0       	ldi	r31, 0x00	; 0
    196a:	80 81       	ld	r24, Z
    196c:	28 2f       	mov	r18, r24
    196e:	2f 77       	andi	r18, 0x7F	; 127
    1970:	e9 81       	ldd	r30, Y+1	; 0x01
    1972:	fa 81       	ldd	r31, Y+2	; 0x02
    1974:	84 81       	ldd	r24, Z+4	; 0x04
    1976:	88 2f       	mov	r24, r24
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	96 95       	lsr	r25
    197c:	98 2f       	mov	r25, r24
    197e:	88 27       	eor	r24, r24
    1980:	97 95       	ror	r25
    1982:	87 95       	ror	r24
    1984:	82 2b       	or	r24, r18
    1986:	8c 93       	st	X, r24

		/* Enabling Interrupts for OVF */
		TIMSK = (TIMSK & 0xBF) | ((Config_Ptr->Timer2_OVF_INT));
    1988:	a9 e5       	ldi	r26, 0x59	; 89
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e9 e5       	ldi	r30, 0x59	; 89
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	98 2f       	mov	r25, r24
    1994:	9f 7b       	andi	r25, 0xBF	; 191
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	85 81       	ldd	r24, Z+5	; 0x05
    199c:	89 2b       	or	r24, r25
    199e:	8c 93       	st	X, r24
}
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <Timer2_deInit>:
/*
 * Description:
 * De-Initializing Everything
 */
void Timer2_deInit(void)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	TCCR2 = 0;
    19b2:	e5 e4       	ldi	r30, 0x45	; 69
    19b4:	f0 e0       	ldi	r31, 0x00	; 0
    19b6:	10 82       	st	Z, r1
	TIMSK = (TIMSK & 0x3F);
    19b8:	a9 e5       	ldi	r26, 0x59	; 89
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e9 e5       	ldi	r30, 0x59	; 89
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	8f 73       	andi	r24, 0x3F	; 63
    19c4:	8c 93       	st	X, r24
}
    19c6:	cf 91       	pop	r28
    19c8:	df 91       	pop	r29
    19ca:	08 95       	ret

000019cc <Timer2_setCallBackTWO>:

/*-------------------------------------------------------------------*/
/* Description: Function to set the Call Back function address. */
void Timer2_setCallBackTWO(void(*a_ptr)(void))
{
    19cc:	df 93       	push	r29
    19ce:	cf 93       	push	r28
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <Timer2_setCallBackTWO+0x6>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtrTWO = a_ptr;
    19da:	89 81       	ldd	r24, Y+1	; 0x01
    19dc:	9a 81       	ldd	r25, Y+2	; 0x02
    19de:	90 93 bd 00 	sts	0x00BD, r25
    19e2:	80 93 bc 00 	sts	0x00BC, r24
}
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	cf 91       	pop	r28
    19ec:	df 91       	pop	r29
    19ee:	08 95       	ret

000019f0 <UART_init>:
/*
 * Description:
 *
 */
void UART_init(UART_ConfigType *Config_Ptr)
{
    19f0:	ef 92       	push	r14
    19f2:	ff 92       	push	r15
    19f4:	0f 93       	push	r16
    19f6:	1f 93       	push	r17
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	00 d0       	rcall	.+0      	; 0x19fe <UART_init+0xe>
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <UART_init+0x10>
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
    1a04:	9c 83       	std	Y+4, r25	; 0x04
    1a06:	8b 83       	std	Y+3, r24	; 0x03
	/**-------------------------Local Variables---------------------**/
	/* UBRR_VALUE will be used to set the baud rate later */
	uint16 a_ubrr_value = 0;
    1a08:	1a 82       	std	Y+2, r1	; 0x02
    1a0a:	19 82       	std	Y+1, r1	; 0x01
	/**-------------------------END Local Variables-----------------**/

	/* Setting the transmission speed */
	UCSRA = (UCSRA & 0xFD) | ((Config_Ptr->transmitSpeed)<<U2X);
    1a0c:	ab e2       	ldi	r26, 0x2B	; 43
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e2       	ldi	r30, 0x2B	; 43
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	2d 7f       	andi	r18, 0xFD	; 253
    1a1a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a1c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a1e:	80 81       	ld	r24, Z
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	88 0f       	add	r24, r24
    1a26:	99 1f       	adc	r25, r25
    1a28:	82 2b       	or	r24, r18
    1a2a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for RX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->receiverINT)<<RXCIE);
    1a2c:	aa e2       	ldi	r26, 0x2A	; 42
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ea e2       	ldi	r30, 0x2A	; 42
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	28 2f       	mov	r18, r24
    1a38:	2f 77       	andi	r18, 0x7F	; 127
    1a3a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a3c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3e:	81 81       	ldd	r24, Z+1	; 0x01
    1a40:	88 2f       	mov	r24, r24
    1a42:	90 e0       	ldi	r25, 0x00	; 0
    1a44:	96 95       	lsr	r25
    1a46:	98 2f       	mov	r25, r24
    1a48:	88 27       	eor	r24, r24
    1a4a:	97 95       	ror	r25
    1a4c:	87 95       	ror	r24
    1a4e:	82 2b       	or	r24, r18
    1a50:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the INTERRUPT for TX */
	UCSRB = (UCSRB & 0x7F) | ((Config_Ptr->transmitterINT)<<TXCIE);
    1a52:	aa e2       	ldi	r26, 0x2A	; 42
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	ea e2       	ldi	r30, 0x2A	; 42
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	28 2f       	mov	r18, r24
    1a5e:	2f 77       	andi	r18, 0x7F	; 127
    1a60:	eb 81       	ldd	r30, Y+3	; 0x03
    1a62:	fc 81       	ldd	r31, Y+4	; 0x04
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	00 24       	eor	r0, r0
    1a6c:	96 95       	lsr	r25
    1a6e:	87 95       	ror	r24
    1a70:	07 94       	ror	r0
    1a72:	96 95       	lsr	r25
    1a74:	87 95       	ror	r24
    1a76:	07 94       	ror	r0
    1a78:	98 2f       	mov	r25, r24
    1a7a:	80 2d       	mov	r24, r0
    1a7c:	82 2b       	or	r24, r18
    1a7e:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the data register empty INTERRUPT */
	UCSRB = (UCSRB & 0xDF) | ((Config_Ptr->emptyINT)<<UDRIE);
    1a80:	aa e2       	ldi	r26, 0x2A	; 42
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ea e2       	ldi	r30, 0x2A	; 42
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	28 2f       	mov	r18, r24
    1a8c:	2f 7d       	andi	r18, 0xDF	; 223
    1a8e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a90:	fc 81       	ldd	r31, Y+4	; 0x04
    1a92:	83 81       	ldd	r24, Z+3	; 0x03
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	82 95       	swap	r24
    1a9e:	92 95       	swap	r25
    1aa0:	90 7f       	andi	r25, 0xF0	; 240
    1aa2:	98 27       	eor	r25, r24
    1aa4:	80 7f       	andi	r24, 0xF0	; 240
    1aa6:	98 27       	eor	r25, r24
    1aa8:	82 2b       	or	r24, r18
    1aaa:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Receiver Enable */
	UCSRB = (UCSRB & 0xEF) | ((Config_Ptr->receiverEN)<<RXEN);
    1aac:	aa e2       	ldi	r26, 0x2A	; 42
    1aae:	b0 e0       	ldi	r27, 0x00	; 0
    1ab0:	ea e2       	ldi	r30, 0x2A	; 42
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	2f 7e       	andi	r18, 0xEF	; 239
    1aba:	eb 81       	ldd	r30, Y+3	; 0x03
    1abc:	fc 81       	ldd	r31, Y+4	; 0x04
    1abe:	84 81       	ldd	r24, Z+4	; 0x04
    1ac0:	88 2f       	mov	r24, r24
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	82 95       	swap	r24
    1ac6:	92 95       	swap	r25
    1ac8:	90 7f       	andi	r25, 0xF0	; 240
    1aca:	98 27       	eor	r25, r24
    1acc:	80 7f       	andi	r24, 0xF0	; 240
    1ace:	98 27       	eor	r25, r24
    1ad0:	82 2b       	or	r24, r18
    1ad2:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Transmitter Enable */
	UCSRB = (UCSRB & 0xF7) | ((Config_Ptr->transmitterEN)<<TXEN);
    1ad4:	aa e2       	ldi	r26, 0x2A	; 42
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ea e2       	ldi	r30, 0x2A	; 42
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	28 2f       	mov	r18, r24
    1ae0:	27 7f       	andi	r18, 0xF7	; 247
    1ae2:	eb 81       	ldd	r30, Y+3	; 0x03
    1ae4:	fc 81       	ldd	r31, Y+4	; 0x04
    1ae6:	85 81       	ldd	r24, Z+5	; 0x05
    1ae8:	88 2f       	mov	r24, r24
    1aea:	90 e0       	ldi	r25, 0x00	; 0
    1aec:	88 0f       	add	r24, r24
    1aee:	99 1f       	adc	r25, r25
    1af0:	88 0f       	add	r24, r24
    1af2:	99 1f       	adc	r25, r25
    1af4:	88 0f       	add	r24, r24
    1af6:	99 1f       	adc	r25, r25
    1af8:	82 2b       	or	r24, r18
    1afa:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the character size on two separate register  */
	/* Adding only the third-bit to UCSRB and the 2 least bits to UCSRC */
	UCSRB = (UCSRB & 0xFB) | (((Config_Ptr->charSize)>>2)<<UCSZ2);
    1afc:	aa e2       	ldi	r26, 0x2A	; 42
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	ea e2       	ldi	r30, 0x2A	; 42
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	28 2f       	mov	r18, r24
    1b08:	2b 7f       	andi	r18, 0xFB	; 251
    1b0a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b0c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b0e:	86 81       	ldd	r24, Z+6	; 0x06
    1b10:	86 95       	lsr	r24
    1b12:	86 95       	lsr	r24
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	82 2b       	or	r24, r18
    1b22:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | (((Config_Ptr->charSize)<<6)>>5);
    1b24:	a0 e4       	ldi	r26, 0x40	; 64
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	e0 e4       	ldi	r30, 0x40	; 64
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	80 81       	ld	r24, Z
    1b2e:	28 2f       	mov	r18, r24
    1b30:	29 7f       	andi	r18, 0xF9	; 249
    1b32:	eb 81       	ldd	r30, Y+3	; 0x03
    1b34:	fc 81       	ldd	r31, Y+4	; 0x04
    1b36:	86 81       	ldd	r24, Z+6	; 0x06
    1b38:	88 2f       	mov	r24, r24
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	00 24       	eor	r0, r0
    1b3e:	96 95       	lsr	r25
    1b40:	87 95       	ror	r24
    1b42:	07 94       	ror	r0
    1b44:	96 95       	lsr	r25
    1b46:	87 95       	ror	r24
    1b48:	07 94       	ror	r0
    1b4a:	98 2f       	mov	r25, r24
    1b4c:	80 2d       	mov	r24, r0
    1b4e:	95 95       	asr	r25
    1b50:	87 95       	ror	r24
    1b52:	95 95       	asr	r25
    1b54:	87 95       	ror	r24
    1b56:	95 95       	asr	r25
    1b58:	87 95       	ror	r24
    1b5a:	95 95       	asr	r25
    1b5c:	87 95       	ror	r24
    1b5e:	95 95       	asr	r25
    1b60:	87 95       	ror	r24
    1b62:	82 2b       	or	r24, r18
    1b64:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Reg Select between UCSRC & UBRRH */
	UCSRC = (UCSRC & 0x7F) | ((Config_Ptr->regSelect)<<URSEL);
    1b66:	a0 e4       	ldi	r26, 0x40	; 64
    1b68:	b0 e0       	ldi	r27, 0x00	; 0
    1b6a:	e0 e4       	ldi	r30, 0x40	; 64
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	80 81       	ld	r24, Z
    1b70:	28 2f       	mov	r18, r24
    1b72:	2f 77       	andi	r18, 0x7F	; 127
    1b74:	eb 81       	ldd	r30, Y+3	; 0x03
    1b76:	fc 81       	ldd	r31, Y+4	; 0x04
    1b78:	87 81       	ldd	r24, Z+7	; 0x07
    1b7a:	88 2f       	mov	r24, r24
    1b7c:	90 e0       	ldi	r25, 0x00	; 0
    1b7e:	96 95       	lsr	r25
    1b80:	98 2f       	mov	r25, r24
    1b82:	88 27       	eor	r24, r24
    1b84:	97 95       	ror	r25
    1b86:	87 95       	ror	r24
    1b88:	82 2b       	or	r24, r18
    1b8a:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* USART Mode Select: 1- A-Synch , 2- Synch */
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->modeSelect)<<UMSEL);
    1b8c:	a0 e4       	ldi	r26, 0x40	; 64
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e0 e4       	ldi	r30, 0x40	; 64
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	28 2f       	mov	r18, r24
    1b98:	2f 7b       	andi	r18, 0xBF	; 191
    1b9a:	eb 81       	ldd	r30, Y+3	; 0x03
    1b9c:	fc 81       	ldd	r31, Y+4	; 0x04
    1b9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ba0:	88 2f       	mov	r24, r24
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	00 24       	eor	r0, r0
    1ba6:	96 95       	lsr	r25
    1ba8:	87 95       	ror	r24
    1baa:	07 94       	ror	r0
    1bac:	96 95       	lsr	r25
    1bae:	87 95       	ror	r24
    1bb0:	07 94       	ror	r0
    1bb2:	98 2f       	mov	r25, r24
    1bb4:	80 2d       	mov	r24, r0
    1bb6:	82 2b       	or	r24, r18
    1bb8:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the parity mode : Disabled/Even/ODD */
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->paritySelect)<<4);
    1bba:	a0 e4       	ldi	r26, 0x40	; 64
    1bbc:	b0 e0       	ldi	r27, 0x00	; 0
    1bbe:	e0 e4       	ldi	r30, 0x40	; 64
    1bc0:	f0 e0       	ldi	r31, 0x00	; 0
    1bc2:	80 81       	ld	r24, Z
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	2f 7c       	andi	r18, 0xCF	; 207
    1bc8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bca:	fc 81       	ldd	r31, Y+4	; 0x04
    1bcc:	81 85       	ldd	r24, Z+9	; 0x09
    1bce:	88 2f       	mov	r24, r24
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	82 95       	swap	r24
    1bd4:	92 95       	swap	r25
    1bd6:	90 7f       	andi	r25, 0xF0	; 240
    1bd8:	98 27       	eor	r25, r24
    1bda:	80 7f       	andi	r24, 0xF0	; 240
    1bdc:	98 27       	eor	r25, r24
    1bde:	82 2b       	or	r24, r18
    1be0:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the stop bit mode: 1-bit and 2-bit */
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stopBitSelect)<<USBS);
    1be2:	a0 e4       	ldi	r26, 0x40	; 64
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e0 e4       	ldi	r30, 0x40	; 64
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	28 2f       	mov	r18, r24
    1bee:	27 7f       	andi	r18, 0xF7	; 247
    1bf0:	eb 81       	ldd	r30, Y+3	; 0x03
    1bf2:	fc 81       	ldd	r31, Y+4	; 0x04
    1bf4:	82 85       	ldd	r24, Z+10	; 0x0a
    1bf6:	88 2f       	mov	r24, r24
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
    1bfa:	88 0f       	add	r24, r24
    1bfc:	99 1f       	adc	r25, r25
    1bfe:	88 0f       	add	r24, r24
    1c00:	99 1f       	adc	r25, r25
    1c02:	88 0f       	add	r24, r24
    1c04:	99 1f       	adc	r25, r25
    1c06:	82 2b       	or	r24, r18
    1c08:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Selecting the clock Polarity: Rising and Falling */
	UCSRC = (UCSRC & 0xFE) | (Config_Ptr->clockPolatiry);
    1c0a:	a0 e4       	ldi	r26, 0x40	; 64
    1c0c:	b0 e0       	ldi	r27, 0x00	; 0
    1c0e:	e0 e4       	ldi	r30, 0x40	; 64
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	80 81       	ld	r24, Z
    1c14:	98 2f       	mov	r25, r24
    1c16:	9e 7f       	andi	r25, 0xFE	; 254
    1c18:	eb 81       	ldd	r30, Y+3	; 0x03
    1c1a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c1c:	83 85       	ldd	r24, Z+11	; 0x0b
    1c1e:	89 2b       	or	r24, r25
    1c20:	8c 93       	st	X, r24
	/*-------------------------------------------------------------------*/

	/* Setting the baud rate */
	/* At first you should calculate the UBRR value */
	a_ubrr_value = (uint16)((F_CPU*(Config_Ptr->transmitSpeed+1)/((Config_Ptr->baud_rate)*(16)))-1);
    1c22:	eb 81       	ldd	r30, Y+3	; 0x03
    1c24:	fc 81       	ldd	r31, Y+4	; 0x04
    1c26:	80 81       	ld	r24, Z
    1c28:	88 2f       	mov	r24, r24
    1c2a:	90 e0       	ldi	r25, 0x00	; 0
    1c2c:	01 96       	adiw	r24, 0x01	; 1
    1c2e:	aa 27       	eor	r26, r26
    1c30:	97 fd       	sbrc	r25, 7
    1c32:	a0 95       	com	r26
    1c34:	ba 2f       	mov	r27, r26
    1c36:	20 e0       	ldi	r18, 0x00	; 0
    1c38:	32 e1       	ldi	r19, 0x12	; 18
    1c3a:	4a e7       	ldi	r20, 0x7A	; 122
    1c3c:	50 e0       	ldi	r21, 0x00	; 0
    1c3e:	bc 01       	movw	r22, r24
    1c40:	cd 01       	movw	r24, r26
    1c42:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__mulsi3>
    1c46:	7b 01       	movw	r14, r22
    1c48:	8c 01       	movw	r16, r24
    1c4a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c4c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c4e:	84 85       	ldd	r24, Z+12	; 0x0c
    1c50:	95 85       	ldd	r25, Z+13	; 0x0d
    1c52:	a6 85       	ldd	r26, Z+14	; 0x0e
    1c54:	b7 85       	ldd	r27, Z+15	; 0x0f
    1c56:	88 0f       	add	r24, r24
    1c58:	99 1f       	adc	r25, r25
    1c5a:	aa 1f       	adc	r26, r26
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	aa 1f       	adc	r26, r26
    1c64:	bb 1f       	adc	r27, r27
    1c66:	88 0f       	add	r24, r24
    1c68:	99 1f       	adc	r25, r25
    1c6a:	aa 1f       	adc	r26, r26
    1c6c:	bb 1f       	adc	r27, r27
    1c6e:	88 0f       	add	r24, r24
    1c70:	99 1f       	adc	r25, r25
    1c72:	aa 1f       	adc	r26, r26
    1c74:	bb 1f       	adc	r27, r27
    1c76:	9c 01       	movw	r18, r24
    1c78:	ad 01       	movw	r20, r26
    1c7a:	c8 01       	movw	r24, r16
    1c7c:	b7 01       	movw	r22, r14
    1c7e:	0e 94 d5 2a 	call	0x55aa	; 0x55aa <__udivmodsi4>
    1c82:	da 01       	movw	r26, r20
    1c84:	c9 01       	movw	r24, r18
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = a_ubrr_value>>8;
    1c8c:	e0 e4       	ldi	r30, 0x40	; 64
    1c8e:	f0 e0       	ldi	r31, 0x00	; 0
    1c90:	89 81       	ldd	r24, Y+1	; 0x01
    1c92:	9a 81       	ldd	r25, Y+2	; 0x02
    1c94:	89 2f       	mov	r24, r25
    1c96:	99 27       	eor	r25, r25
    1c98:	80 83       	st	Z, r24
	UBRRL = a_ubrr_value;
    1c9a:	e9 e2       	ldi	r30, 0x29	; 41
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	89 81       	ldd	r24, Y+1	; 0x01
    1ca0:	80 83       	st	Z, r24

	/*----------------------------END--------------------------------*/
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	08 95       	ret

00001cb8 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	0f 92       	push	r0
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	/* Need to wait till the buffer is ready to get a new data */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1cc4:	eb e2       	ldi	r30, 0x2B	; 43
    1cc6:	f0 e0       	ldi	r31, 0x00	; 0
    1cc8:	80 81       	ld	r24, Z
    1cca:	88 2f       	mov	r24, r24
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	80 72       	andi	r24, 0x20	; 32
    1cd0:	90 70       	andi	r25, 0x00	; 0
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	b9 f3       	breq	.-18     	; 0x1cc4 <UART_sendByte+0xc>

	/* When it's ready then send it  */
	UDR = data;
    1cd6:	ec e2       	ldi	r30, 0x2C	; 44
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	89 81       	ldd	r24, Y+1	; 0x01
    1cdc:	80 83       	st	Z, r24
}
    1cde:	0f 90       	pop	r0
    1ce0:	cf 91       	pop	r28
    1ce2:	df 91       	pop	r29
    1ce4:	08 95       	ret

00001ce6 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    1ce6:	df 93       	push	r29
    1ce8:	cf 93       	push	r28
    1cea:	cd b7       	in	r28, 0x3d	; 61
    1cec:	de b7       	in	r29, 0x3e	; 62
	/* Waiting till we get a new data */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1cee:	eb e2       	ldi	r30, 0x2B	; 43
    1cf0:	f0 e0       	ldi	r31, 0x00	; 0
    1cf2:	80 81       	ld	r24, Z
    1cf4:	88 23       	and	r24, r24
    1cf6:	dc f7       	brge	.-10     	; 0x1cee <UART_receiveByte+0x8>

	/* Return it after getting it */
	return UDR;
    1cf8:	ec e2       	ldi	r30, 0x2C	; 44
    1cfa:	f0 e0       	ldi	r31, 0x00	; 0
    1cfc:	80 81       	ld	r24, Z
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <UART_sendString+0x6>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9b 83       	std	Y+3, r25	; 0x03
    1d12:	8a 83       	std	Y+2, r24	; 0x02
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    1d14:	19 82       	std	Y+1, r1	; 0x01
    1d16:	0e c0       	rjmp	.+28     	; 0x1d34 <UART_sendString+0x30>

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
	{
		UART_sendByte(Str[a_stringCounter]);
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	28 2f       	mov	r18, r24
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d20:	9b 81       	ldd	r25, Y+3	; 0x03
    1d22:	fc 01       	movw	r30, r24
    1d24:	e2 0f       	add	r30, r18
    1d26:	f3 1f       	adc	r31, r19
    1d28:	80 81       	ld	r24, Z
    1d2a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <UART_sendByte>
		a_stringCounter++;
    1d2e:	89 81       	ldd	r24, Y+1	; 0x01
    1d30:	8f 5f       	subi	r24, 0xFF	; 255
    1d32:	89 83       	std	Y+1, r24	; 0x01
{
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;

	/* Sending byte by byte using UART_sendByte functio */
	while(Str[a_stringCounter] != '\0')
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	28 2f       	mov	r18, r24
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d3e:	fc 01       	movw	r30, r24
    1d40:	e2 0f       	add	r30, r18
    1d42:	f3 1f       	adc	r31, r19
    1d44:	80 81       	ld	r24, Z
    1d46:	88 23       	and	r24, r24
    1d48:	39 f7       	brne	.-50     	; 0x1d18 <UART_sendString+0x14>
	{
		UART_sendByte(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    1d4a:	0f 90       	pop	r0
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
    1d50:	cf 91       	pop	r28
    1d52:	df 91       	pop	r29
    1d54:	08 95       	ret

00001d56 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str,uint8 Size)
{
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	df 93       	push	r29
    1d5c:	cf 93       	push	r28
    1d5e:	00 d0       	rcall	.+0      	; 0x1d60 <UART_receiveString+0xa>
    1d60:	00 d0       	rcall	.+0      	; 0x1d62 <UART_receiveString+0xc>
    1d62:	cd b7       	in	r28, 0x3d	; 61
    1d64:	de b7       	in	r29, 0x3e	; 62
    1d66:	9b 83       	std	Y+3, r25	; 0x03
    1d68:	8a 83       	std	Y+2, r24	; 0x02
    1d6a:	6c 83       	std	Y+4, r22	; 0x04
	/* Initialing a counter which moves the pointer to another location */
	uint8 a_stringCounter = 0;
    1d6c:	19 82       	std	Y+1, r1	; 0x01

	Str[a_stringCounter] = UART_receiveByte();
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	8a 81       	ldd	r24, Y+2	; 0x02
    1d76:	9b 81       	ldd	r25, Y+3	; 0x03
    1d78:	8c 01       	movw	r16, r24
    1d7a:	02 0f       	add	r16, r18
    1d7c:	13 1f       	adc	r17, r19
    1d7e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <UART_receiveByte>
    1d82:	f8 01       	movw	r30, r16
    1d84:	80 83       	st	Z, r24
    1d86:	0f c0       	rjmp	.+30     	; 0x1da6 <UART_receiveString+0x50>

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != 'E' && a_stringCounter <(Size-1))
	{
		a_stringCounter++;
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	8f 5f       	subi	r24, 0xFF	; 255
    1d8c:	89 83       	std	Y+1, r24	; 0x01
		Str[a_stringCounter] = UART_receiveByte();
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	28 2f       	mov	r18, r24
    1d92:	30 e0       	ldi	r19, 0x00	; 0
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	9b 81       	ldd	r25, Y+3	; 0x03
    1d98:	8c 01       	movw	r16, r24
    1d9a:	02 0f       	add	r16, r18
    1d9c:	13 1f       	adc	r17, r19
    1d9e:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <UART_receiveByte>
    1da2:	f8 01       	movw	r30, r16
    1da4:	80 83       	st	Z, r24
	uint8 a_stringCounter = 0;

	Str[a_stringCounter] = UART_receiveByte();

	/* We will start check for a specific character which means to us a null char*/
	while(Str[a_stringCounter] != 'E' && a_stringCounter <(Size-1))
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	28 2f       	mov	r18, r24
    1daa:	30 e0       	ldi	r19, 0x00	; 0
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	fc 01       	movw	r30, r24
    1db2:	e2 0f       	add	r30, r18
    1db4:	f3 1f       	adc	r31, r19
    1db6:	80 81       	ld	r24, Z
    1db8:	85 34       	cpi	r24, 0x45	; 69
    1dba:	51 f0       	breq	.+20     	; 0x1dd0 <UART_receiveString+0x7a>
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
    1dbe:	28 2f       	mov	r18, r24
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	8c 81       	ldd	r24, Y+4	; 0x04
    1dc4:	88 2f       	mov	r24, r24
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	01 97       	sbiw	r24, 0x01	; 1
    1dca:	28 17       	cp	r18, r24
    1dcc:	39 07       	cpc	r19, r25
    1dce:	e4 f2       	brlt	.-72     	; 0x1d88 <UART_receiveString+0x32>
		Str[a_stringCounter] = UART_receiveByte();
	}

	/* Then redefining the string by replacing the stop char with NULL char */
//	Str[a_stringCounter] = '\0';
}
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	0f 90       	pop	r0
    1dd8:	cf 91       	pop	r28
    1dda:	df 91       	pop	r29
    1ddc:	1f 91       	pop	r17
    1dde:	0f 91       	pop	r16
    1de0:	08 95       	ret

00001de2 <DCMotor_init>:
#include "../MCAL/Header/TIMER.h"

/**-------------------------Function Definition Section-------------**/

void DCMotor_init()
{
    1de2:	df 93       	push	r29
    1de4:	cf 93       	push	r28
    1de6:	cd b7       	in	r28, 0x3d	; 61
    1de8:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Motor is connected to L293D Driver
	 */
	GPIO_setupPinDirection(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, PIN_OUTPUT);
    1dea:	82 e0       	ldi	r24, 0x02	; 2
    1dec:	64 e0       	ldi	r22, 0x04	; 4
    1dee:	41 e0       	ldi	r20, 0x01	; 1
    1df0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, PIN_OUTPUT);
    1df4:	82 e0       	ldi	r24, 0x02	; 2
    1df6:	65 e0       	ldi	r22, 0x05	; 5
    1df8:	41 e0       	ldi	r20, 0x01	; 1
    1dfa:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_EN_PORT_ID, 		L293D_EN1_ID, PIN_OUTPUT);
    1dfe:	81 e0       	ldi	r24, 0x01	; 1
    1e00:	63 e0       	ldi	r22, 0x03	; 3
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

} /* End DCMotor_init function */
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <DcMotor_Rotate>:

/*----------------------------------------------------------------------------*/

void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <DcMotor_Rotate+0x6>
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	6a 83       	std	Y+2, r22	; 0x02
	/* Selecting the Direction of the MOTOR */
	if(state == ClockWise)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	88 23       	and	r24, r24
    1e20:	59 f4       	brne	.+22     	; 0x1e38 <DcMotor_Rotate+0x2a>
	{
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_HIGH);
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	64 e0       	ldi	r22, 0x04	; 4
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_LOW);
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	65 e0       	ldi	r22, 0x05	; 5
    1e30:	40 e0       	ldi	r20, 0x00	; 0
    1e32:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    1e36:	0d c0       	rjmp	.+26     	; 0x1e52 <DcMotor_Rotate+0x44>
	}
	else if(state == Anti_ClockWise)
    1e38:	89 81       	ldd	r24, Y+1	; 0x01
    1e3a:	81 30       	cpi	r24, 0x01	; 1
    1e3c:	51 f4       	brne	.+20     	; 0x1e52 <DcMotor_Rotate+0x44>
	{
		GPIO_writePin(DC_MOTOR_IN2_OUTPUT_PORT_ID, L293D_IN2_ID, LOGIC_HIGH);
    1e3e:	82 e0       	ldi	r24, 0x02	; 2
    1e40:	65 e0       	ldi	r22, 0x05	; 5
    1e42:	41 e0       	ldi	r20, 0x01	; 1
    1e44:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_IN1_OUTPUT_PORT_ID, L293D_IN1_ID, LOGIC_LOW);
    1e48:	82 e0       	ldi	r24, 0x02	; 2
    1e4a:	64 e0       	ldi	r22, 0x04	; 4
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	}

	/* Sending the compare value to Timer everytime to change the motor speed */
	Timer0_PWM_Activate(&speed);
    1e52:	ce 01       	movw	r24, r28
    1e54:	02 96       	adiw	r24, 0x02	; 2
    1e56:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <Timer0_PWM_Activate>
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	cf 91       	pop	r28
    1e60:	df 91       	pop	r29
    1e62:	08 95       	ret

00001e64 <DCMotor_stop>:

/*----------------------------------------------------------------------------*/

void DCMotor_stop()
{
    1e64:	df 93       	push	r29
    1e66:	cf 93       	push	r28
    1e68:	cd b7       	in	r28, 0x3d	; 61
    1e6a:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(DC_MOTOR_EN_PORT_ID, L293D_EN1_ID , LOGIC_LOW); /* Sending speed 0 to DCMotor_Speed() */
    1e6c:	81 e0       	ldi	r24, 0x01	; 1
    1e6e:	63 e0       	ldi	r22, 0x03	; 3
    1e70:	40 e0       	ldi	r20, 0x00	; 0
    1e72:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}   /* End DCMotor_stop()function */
    1e76:	cf 91       	pop	r28
    1e78:	df 91       	pop	r29
    1e7a:	08 95       	ret

00001e7c <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e7c:	df 93       	push	r29
    1e7e:	cf 93       	push	r28
    1e80:	cd b7       	in	r28, 0x3d	; 61
    1e82:	de b7       	in	r29, 0x3e	; 62
    1e84:	2e 97       	sbiw	r28, 0x0e	; 14
    1e86:	0f b6       	in	r0, 0x3f	; 63
    1e88:	f8 94       	cli
    1e8a:	de bf       	out	0x3e, r29	; 62
    1e8c:	0f be       	out	0x3f, r0	; 63
    1e8e:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT, LCD_RS_PIN , PIN_OUTPUT);
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	60 e0       	ldi	r22, 0x00	; 0
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT, LCD_EN_PIN , PIN_OUTPUT);
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	61 e0       	ldi	r22, 0x01	; 1
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
    1ea4:	80 e0       	ldi	r24, 0x00	; 0
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	a0 ea       	ldi	r26, 0xA0	; 160
    1eaa:	b1 e4       	ldi	r27, 0x41	; 65
    1eac:	8b 87       	std	Y+11, r24	; 0x0b
    1eae:	9c 87       	std	Y+12, r25	; 0x0c
    1eb0:	ad 87       	std	Y+13, r26	; 0x0d
    1eb2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eb8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eba:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ebc:	20 e0       	ldi	r18, 0x00	; 0
    1ebe:	30 e0       	ldi	r19, 0x00	; 0
    1ec0:	4a ef       	ldi	r20, 0xFA	; 250
    1ec2:	54 e4       	ldi	r21, 0x44	; 68
    1ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ec8:	dc 01       	movw	r26, r24
    1eca:	cb 01       	movw	r24, r22
    1ecc:	8f 83       	std	Y+7, r24	; 0x07
    1ece:	98 87       	std	Y+8, r25	; 0x08
    1ed0:	a9 87       	std	Y+9, r26	; 0x09
    1ed2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1ed4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed6:	78 85       	ldd	r23, Y+8	; 0x08
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e8       	ldi	r20, 0x80	; 128
    1ee2:	5f e3       	ldi	r21, 0x3F	; 63
    1ee4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ee8:	88 23       	and	r24, r24
    1eea:	2c f4       	brge	.+10     	; 0x1ef6 <LCD_init+0x7a>
		__ticks = 1;
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	9e 83       	std	Y+6, r25	; 0x06
    1ef2:	8d 83       	std	Y+5, r24	; 0x05
    1ef4:	3f c0       	rjmp	.+126    	; 0x1f74 <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ef6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef8:	78 85       	ldd	r23, Y+8	; 0x08
    1efa:	89 85       	ldd	r24, Y+9	; 0x09
    1efc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	3f ef       	ldi	r19, 0xFF	; 255
    1f02:	4f e7       	ldi	r20, 0x7F	; 127
    1f04:	57 e4       	ldi	r21, 0x47	; 71
    1f06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f0a:	18 16       	cp	r1, r24
    1f0c:	4c f5       	brge	.+82     	; 0x1f60 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f10:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f12:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f14:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e2       	ldi	r20, 0x20	; 32
    1f1c:	51 e4       	ldi	r21, 0x41	; 65
    1f1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	bc 01       	movw	r22, r24
    1f28:	cd 01       	movw	r24, r26
    1f2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	9e 83       	std	Y+6, r25	; 0x06
    1f34:	8d 83       	std	Y+5, r24	; 0x05
    1f36:	0f c0       	rjmp	.+30     	; 0x1f56 <LCD_init+0xda>
    1f38:	88 ec       	ldi	r24, 0xC8	; 200
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	9c 83       	std	Y+4, r25	; 0x04
    1f3e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	01 97       	sbiw	r24, 0x01	; 1
    1f46:	f1 f7       	brne	.-4      	; 0x1f44 <LCD_init+0xc8>
    1f48:	9c 83       	std	Y+4, r25	; 0x04
    1f4a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	9e 83       	std	Y+6, r25	; 0x06
    1f54:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f56:	8d 81       	ldd	r24, Y+5	; 0x05
    1f58:	9e 81       	ldd	r25, Y+6	; 0x06
    1f5a:	00 97       	sbiw	r24, 0x00	; 0
    1f5c:	69 f7       	brne	.-38     	; 0x1f38 <LCD_init+0xbc>
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f6c:	dc 01       	movw	r26, r24
    1f6e:	cb 01       	movw	r24, r22
    1f70:	9e 83       	std	Y+6, r25	; 0x06
    1f72:	8d 83       	std	Y+5, r24	; 0x05
    1f74:	8d 81       	ldd	r24, Y+5	; 0x05
    1f76:	9e 81       	ldd	r25, Y+6	; 0x06
    1f78:	9a 83       	std	Y+2, r25	; 0x02
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <LCD_init+0x104>
    1f84:	9a 83       	std	Y+2, r25	; 0x02
    1f86:	89 83       	std	Y+1, r24	; 0x01
		LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
	}
#elif(LCD_DATA_MODE == 4) /* Using 4 bit mode */
	{

		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D4_PIN , PIN_OUTPUT);
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	64 e0       	ldi	r22, 0x04	; 4
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D5_PIN , PIN_OUTPUT);
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	65 e0       	ldi	r22, 0x05	; 5
    1f96:	41 e0       	ldi	r20, 0x01	; 1
    1f98:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D6_PIN , PIN_OUTPUT);
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	66 e0       	ldi	r22, 0x06	; 6
    1fa0:	41 e0       	ldi	r20, 0x01	; 1
    1fa2:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_OUTPUT_PORT, LCD_D7_PIN , PIN_OUTPUT);
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	67 e0       	ldi	r22, 0x07	; 7
    1faa:	41 e0       	ldi	r20, 0x01	; 1
    1fac:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

		/* Send for 4 bit initialization of LCD  */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1fb0:	83 e3       	ldi	r24, 0x33	; 51
    1fb2:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1fb6:	82 e3       	ldi	r24, 0x32	; 50
    1fb8:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
		/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
		LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1fbc:	88 e2       	ldi	r24, 0x28	; 40
    1fbe:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
	}

#endif

	LCD_sendCommand(DISPLAY_ON_CURSOR_OFF ); /* cursor off */
    1fc2:	8c e0       	ldi	r24, 0x0C	; 12
    1fc4:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLR_DISPLAY); 		 /* clear LCD at the beginning */
    1fc8:	81 e0       	ldi	r24, 0x01	; 1
    1fca:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
}
    1fce:	2e 96       	adiw	r28, 0x0e	; 14
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	cf 91       	pop	r28
    1fdc:	df 91       	pop	r29
    1fde:	08 95       	ret

00001fe0 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	df 93       	push	r29
    1fe6:	cf 93       	push	r28
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	c3 56       	subi	r28, 0x63	; 99
    1fee:	d0 40       	sbci	r29, 0x00	; 0
    1ff0:	0f b6       	in	r0, 0x3f	; 63
    1ff2:	f8 94       	cli
    1ff4:	de bf       	out	0x3e, r29	; 62
    1ff6:	0f be       	out	0x3f, r0	; 63
    1ff8:	cd bf       	out	0x3d, r28	; 61
    1ffa:	fe 01       	movw	r30, r28
    1ffc:	ed 59       	subi	r30, 0x9D	; 157
    1ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    2000:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_LOW); 	/* Setting to Command Register selection */
    2002:	80 e0       	ldi	r24, 0x00	; 0
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	40 e0       	ldi	r20, 0x00	; 0
    2008:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    200c:	fe 01       	movw	r30, r28
    200e:	e1 5a       	subi	r30, 0xA1	; 161
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	a0 e8       	ldi	r26, 0x80	; 128
    2018:	bf e3       	ldi	r27, 0x3F	; 63
    201a:	80 83       	st	Z, r24
    201c:	91 83       	std	Z+1, r25	; 0x01
    201e:	a2 83       	std	Z+2, r26	; 0x02
    2020:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2022:	8e 01       	movw	r16, r28
    2024:	05 5a       	subi	r16, 0xA5	; 165
    2026:	1f 4f       	sbci	r17, 0xFF	; 255
    2028:	fe 01       	movw	r30, r28
    202a:	e1 5a       	subi	r30, 0xA1	; 161
    202c:	ff 4f       	sbci	r31, 0xFF	; 255
    202e:	60 81       	ld	r22, Z
    2030:	71 81       	ldd	r23, Z+1	; 0x01
    2032:	82 81       	ldd	r24, Z+2	; 0x02
    2034:	93 81       	ldd	r25, Z+3	; 0x03
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4a ef       	ldi	r20, 0xFA	; 250
    203c:	54 e4       	ldi	r21, 0x44	; 68
    203e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	f8 01       	movw	r30, r16
    2048:	80 83       	st	Z, r24
    204a:	91 83       	std	Z+1, r25	; 0x01
    204c:	a2 83       	std	Z+2, r26	; 0x02
    204e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2050:	fe 01       	movw	r30, r28
    2052:	e5 5a       	subi	r30, 0xA5	; 165
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	60 81       	ld	r22, Z
    2058:	71 81       	ldd	r23, Z+1	; 0x01
    205a:	82 81       	ldd	r24, Z+2	; 0x02
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    206a:	88 23       	and	r24, r24
    206c:	44 f4       	brge	.+16     	; 0x207e <LCD_sendCommand+0x9e>
		__ticks = 1;
    206e:	fe 01       	movw	r30, r28
    2070:	e7 5a       	subi	r30, 0xA7	; 167
    2072:	ff 4f       	sbci	r31, 0xFF	; 255
    2074:	81 e0       	ldi	r24, 0x01	; 1
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	91 83       	std	Z+1, r25	; 0x01
    207a:	80 83       	st	Z, r24
    207c:	64 c0       	rjmp	.+200    	; 0x2146 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    207e:	fe 01       	movw	r30, r28
    2080:	e5 5a       	subi	r30, 0xA5	; 165
    2082:	ff 4f       	sbci	r31, 0xFF	; 255
    2084:	60 81       	ld	r22, Z
    2086:	71 81       	ldd	r23, Z+1	; 0x01
    2088:	82 81       	ldd	r24, Z+2	; 0x02
    208a:	93 81       	ldd	r25, Z+3	; 0x03
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	0c f0       	brlt	.+2      	; 0x209e <LCD_sendCommand+0xbe>
    209c:	43 c0       	rjmp	.+134    	; 0x2124 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209e:	fe 01       	movw	r30, r28
    20a0:	e1 5a       	subi	r30, 0xA1	; 161
    20a2:	ff 4f       	sbci	r31, 0xFF	; 255
    20a4:	60 81       	ld	r22, Z
    20a6:	71 81       	ldd	r23, Z+1	; 0x01
    20a8:	82 81       	ldd	r24, Z+2	; 0x02
    20aa:	93 81       	ldd	r25, Z+3	; 0x03
    20ac:	20 e0       	ldi	r18, 0x00	; 0
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	40 e2       	ldi	r20, 0x20	; 32
    20b2:	51 e4       	ldi	r21, 0x41	; 65
    20b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b8:	dc 01       	movw	r26, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	8e 01       	movw	r16, r28
    20be:	07 5a       	subi	r16, 0xA7	; 167
    20c0:	1f 4f       	sbci	r17, 0xFF	; 255
    20c2:	bc 01       	movw	r22, r24
    20c4:	cd 01       	movw	r24, r26
    20c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ca:	dc 01       	movw	r26, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	f8 01       	movw	r30, r16
    20d0:	91 83       	std	Z+1, r25	; 0x01
    20d2:	80 83       	st	Z, r24
    20d4:	1f c0       	rjmp	.+62     	; 0x2114 <LCD_sendCommand+0x134>
    20d6:	fe 01       	movw	r30, r28
    20d8:	e9 5a       	subi	r30, 0xA9	; 169
    20da:	ff 4f       	sbci	r31, 0xFF	; 255
    20dc:	88 ec       	ldi	r24, 0xC8	; 200
    20de:	90 e0       	ldi	r25, 0x00	; 0
    20e0:	91 83       	std	Z+1, r25	; 0x01
    20e2:	80 83       	st	Z, r24
    20e4:	fe 01       	movw	r30, r28
    20e6:	e9 5a       	subi	r30, 0xA9	; 169
    20e8:	ff 4f       	sbci	r31, 0xFF	; 255
    20ea:	80 81       	ld	r24, Z
    20ec:	91 81       	ldd	r25, Z+1	; 0x01
    20ee:	01 97       	sbiw	r24, 0x01	; 1
    20f0:	f1 f7       	brne	.-4      	; 0x20ee <LCD_sendCommand+0x10e>
    20f2:	fe 01       	movw	r30, r28
    20f4:	e9 5a       	subi	r30, 0xA9	; 169
    20f6:	ff 4f       	sbci	r31, 0xFF	; 255
    20f8:	91 83       	std	Z+1, r25	; 0x01
    20fa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20fc:	de 01       	movw	r26, r28
    20fe:	a7 5a       	subi	r26, 0xA7	; 167
    2100:	bf 4f       	sbci	r27, 0xFF	; 255
    2102:	fe 01       	movw	r30, r28
    2104:	e7 5a       	subi	r30, 0xA7	; 167
    2106:	ff 4f       	sbci	r31, 0xFF	; 255
    2108:	80 81       	ld	r24, Z
    210a:	91 81       	ldd	r25, Z+1	; 0x01
    210c:	01 97       	sbiw	r24, 0x01	; 1
    210e:	11 96       	adiw	r26, 0x01	; 1
    2110:	9c 93       	st	X, r25
    2112:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	fe 01       	movw	r30, r28
    2116:	e7 5a       	subi	r30, 0xA7	; 167
    2118:	ff 4f       	sbci	r31, 0xFF	; 255
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	00 97       	sbiw	r24, 0x00	; 0
    2120:	d1 f6       	brne	.-76     	; 0x20d6 <LCD_sendCommand+0xf6>
    2122:	27 c0       	rjmp	.+78     	; 0x2172 <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2124:	8e 01       	movw	r16, r28
    2126:	07 5a       	subi	r16, 0xA7	; 167
    2128:	1f 4f       	sbci	r17, 0xFF	; 255
    212a:	fe 01       	movw	r30, r28
    212c:	e5 5a       	subi	r30, 0xA5	; 165
    212e:	ff 4f       	sbci	r31, 0xFF	; 255
    2130:	60 81       	ld	r22, Z
    2132:	71 81       	ldd	r23, Z+1	; 0x01
    2134:	82 81       	ldd	r24, Z+2	; 0x02
    2136:	93 81       	ldd	r25, Z+3	; 0x03
    2138:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	f8 01       	movw	r30, r16
    2142:	91 83       	std	Z+1, r25	; 0x01
    2144:	80 83       	st	Z, r24
    2146:	de 01       	movw	r26, r28
    2148:	ab 5a       	subi	r26, 0xAB	; 171
    214a:	bf 4f       	sbci	r27, 0xFF	; 255
    214c:	fe 01       	movw	r30, r28
    214e:	e7 5a       	subi	r30, 0xA7	; 167
    2150:	ff 4f       	sbci	r31, 0xFF	; 255
    2152:	80 81       	ld	r24, Z
    2154:	91 81       	ldd	r25, Z+1	; 0x01
    2156:	8d 93       	st	X+, r24
    2158:	9c 93       	st	X, r25
    215a:	fe 01       	movw	r30, r28
    215c:	eb 5a       	subi	r30, 0xAB	; 171
    215e:	ff 4f       	sbci	r31, 0xFF	; 255
    2160:	80 81       	ld	r24, Z
    2162:	91 81       	ldd	r25, Z+1	; 0x01
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <LCD_sendCommand+0x184>
    2168:	fe 01       	movw	r30, r28
    216a:	eb 5a       	subi	r30, 0xAB	; 171
    216c:	ff 4f       	sbci	r31, 0xFF	; 255
    216e:	91 83       	std	Z+1, r25	; 0x01
    2170:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    2172:	80 e0       	ldi	r24, 0x00	; 0
    2174:	61 e0       	ldi	r22, 0x01	; 1
    2176:	41 e0       	ldi	r20, 0x01	; 1
    2178:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    217c:	fe 01       	movw	r30, r28
    217e:	ef 5a       	subi	r30, 0xAF	; 175
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	80 e0       	ldi	r24, 0x00	; 0
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	a0 e8       	ldi	r26, 0x80	; 128
    2188:	bf e3       	ldi	r27, 0x3F	; 63
    218a:	80 83       	st	Z, r24
    218c:	91 83       	std	Z+1, r25	; 0x01
    218e:	a2 83       	std	Z+2, r26	; 0x02
    2190:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2192:	8e 01       	movw	r16, r28
    2194:	03 5b       	subi	r16, 0xB3	; 179
    2196:	1f 4f       	sbci	r17, 0xFF	; 255
    2198:	fe 01       	movw	r30, r28
    219a:	ef 5a       	subi	r30, 0xAF	; 175
    219c:	ff 4f       	sbci	r31, 0xFF	; 255
    219e:	60 81       	ld	r22, Z
    21a0:	71 81       	ldd	r23, Z+1	; 0x01
    21a2:	82 81       	ldd	r24, Z+2	; 0x02
    21a4:	93 81       	ldd	r25, Z+3	; 0x03
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	f8 01       	movw	r30, r16
    21b8:	80 83       	st	Z, r24
    21ba:	91 83       	std	Z+1, r25	; 0x01
    21bc:	a2 83       	std	Z+2, r26	; 0x02
    21be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c0:	fe 01       	movw	r30, r28
    21c2:	e3 5b       	subi	r30, 0xB3	; 179
    21c4:	ff 4f       	sbci	r31, 0xFF	; 255
    21c6:	60 81       	ld	r22, Z
    21c8:	71 81       	ldd	r23, Z+1	; 0x01
    21ca:	82 81       	ldd	r24, Z+2	; 0x02
    21cc:	93 81       	ldd	r25, Z+3	; 0x03
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e8       	ldi	r20, 0x80	; 128
    21d4:	5f e3       	ldi	r21, 0x3F	; 63
    21d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21da:	88 23       	and	r24, r24
    21dc:	44 f4       	brge	.+16     	; 0x21ee <LCD_sendCommand+0x20e>
		__ticks = 1;
    21de:	fe 01       	movw	r30, r28
    21e0:	e5 5b       	subi	r30, 0xB5	; 181
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	81 e0       	ldi	r24, 0x01	; 1
    21e6:	90 e0       	ldi	r25, 0x00	; 0
    21e8:	91 83       	std	Z+1, r25	; 0x01
    21ea:	80 83       	st	Z, r24
    21ec:	64 c0       	rjmp	.+200    	; 0x22b6 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    21ee:	fe 01       	movw	r30, r28
    21f0:	e3 5b       	subi	r30, 0xB3	; 179
    21f2:	ff 4f       	sbci	r31, 0xFF	; 255
    21f4:	60 81       	ld	r22, Z
    21f6:	71 81       	ldd	r23, Z+1	; 0x01
    21f8:	82 81       	ldd	r24, Z+2	; 0x02
    21fa:	93 81       	ldd	r25, Z+3	; 0x03
    21fc:	20 e0       	ldi	r18, 0x00	; 0
    21fe:	3f ef       	ldi	r19, 0xFF	; 255
    2200:	4f e7       	ldi	r20, 0x7F	; 127
    2202:	57 e4       	ldi	r21, 0x47	; 71
    2204:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2208:	18 16       	cp	r1, r24
    220a:	0c f0       	brlt	.+2      	; 0x220e <LCD_sendCommand+0x22e>
    220c:	43 c0       	rjmp	.+134    	; 0x2294 <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    220e:	fe 01       	movw	r30, r28
    2210:	ef 5a       	subi	r30, 0xAF	; 175
    2212:	ff 4f       	sbci	r31, 0xFF	; 255
    2214:	60 81       	ld	r22, Z
    2216:	71 81       	ldd	r23, Z+1	; 0x01
    2218:	82 81       	ldd	r24, Z+2	; 0x02
    221a:	93 81       	ldd	r25, Z+3	; 0x03
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	40 e2       	ldi	r20, 0x20	; 32
    2222:	51 e4       	ldi	r21, 0x41	; 65
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8e 01       	movw	r16, r28
    222e:	05 5b       	subi	r16, 0xB5	; 181
    2230:	1f 4f       	sbci	r17, 0xFF	; 255
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	f8 01       	movw	r30, r16
    2240:	91 83       	std	Z+1, r25	; 0x01
    2242:	80 83       	st	Z, r24
    2244:	1f c0       	rjmp	.+62     	; 0x2284 <LCD_sendCommand+0x2a4>
    2246:	fe 01       	movw	r30, r28
    2248:	e7 5b       	subi	r30, 0xB7	; 183
    224a:	ff 4f       	sbci	r31, 0xFF	; 255
    224c:	88 ec       	ldi	r24, 0xC8	; 200
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	91 83       	std	Z+1, r25	; 0x01
    2252:	80 83       	st	Z, r24
    2254:	fe 01       	movw	r30, r28
    2256:	e7 5b       	subi	r30, 0xB7	; 183
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	80 81       	ld	r24, Z
    225c:	91 81       	ldd	r25, Z+1	; 0x01
    225e:	01 97       	sbiw	r24, 0x01	; 1
    2260:	f1 f7       	brne	.-4      	; 0x225e <LCD_sendCommand+0x27e>
    2262:	fe 01       	movw	r30, r28
    2264:	e7 5b       	subi	r30, 0xB7	; 183
    2266:	ff 4f       	sbci	r31, 0xFF	; 255
    2268:	91 83       	std	Z+1, r25	; 0x01
    226a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    226c:	de 01       	movw	r26, r28
    226e:	a5 5b       	subi	r26, 0xB5	; 181
    2270:	bf 4f       	sbci	r27, 0xFF	; 255
    2272:	fe 01       	movw	r30, r28
    2274:	e5 5b       	subi	r30, 0xB5	; 181
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 81       	ld	r24, Z
    227a:	91 81       	ldd	r25, Z+1	; 0x01
    227c:	01 97       	sbiw	r24, 0x01	; 1
    227e:	11 96       	adiw	r26, 0x01	; 1
    2280:	9c 93       	st	X, r25
    2282:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2284:	fe 01       	movw	r30, r28
    2286:	e5 5b       	subi	r30, 0xB5	; 181
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	91 81       	ldd	r25, Z+1	; 0x01
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	d1 f6       	brne	.-76     	; 0x2246 <LCD_sendCommand+0x266>
    2292:	27 c0       	rjmp	.+78     	; 0x22e2 <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2294:	8e 01       	movw	r16, r28
    2296:	05 5b       	subi	r16, 0xB5	; 181
    2298:	1f 4f       	sbci	r17, 0xFF	; 255
    229a:	fe 01       	movw	r30, r28
    229c:	e3 5b       	subi	r30, 0xB3	; 179
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	60 81       	ld	r22, Z
    22a2:	71 81       	ldd	r23, Z+1	; 0x01
    22a4:	82 81       	ldd	r24, Z+2	; 0x02
    22a6:	93 81       	ldd	r25, Z+3	; 0x03
    22a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	f8 01       	movw	r30, r16
    22b2:	91 83       	std	Z+1, r25	; 0x01
    22b4:	80 83       	st	Z, r24
    22b6:	de 01       	movw	r26, r28
    22b8:	a9 5b       	subi	r26, 0xB9	; 185
    22ba:	bf 4f       	sbci	r27, 0xFF	; 255
    22bc:	fe 01       	movw	r30, r28
    22be:	e5 5b       	subi	r30, 0xB5	; 181
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	80 81       	ld	r24, Z
    22c4:	91 81       	ldd	r25, Z+1	; 0x01
    22c6:	8d 93       	st	X+, r24
    22c8:	9c 93       	st	X, r25
    22ca:	fe 01       	movw	r30, r28
    22cc:	e9 5b       	subi	r30, 0xB9	; 185
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	01 97       	sbiw	r24, 0x01	; 1
    22d6:	f1 f7       	brne	.-4      	; 0x22d4 <LCD_sendCommand+0x2f4>
    22d8:	fe 01       	movw	r30, r28
    22da:	e9 5b       	subi	r30, 0xB9	; 185
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	91 83       	std	Z+1, r25	; 0x01
    22e0:	80 83       	st	Z, r24
		GPIO_writePort(LCD_OUTPUT_PORT, command); 			/* Sending the command through the 8 pins*/
	}
#else
	{
		/* Sending the LAST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(command,4));
    22e2:	fe 01       	movw	r30, r28
    22e4:	ed 59       	subi	r30, 0x9D	; 157
    22e6:	ff 4f       	sbci	r31, 0xFF	; 255
    22e8:	80 81       	ld	r24, Z
    22ea:	88 2f       	mov	r24, r24
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	80 71       	andi	r24, 0x10	; 16
    22f0:	90 70       	andi	r25, 0x00	; 0
    22f2:	95 95       	asr	r25
    22f4:	87 95       	ror	r24
    22f6:	95 95       	asr	r25
    22f8:	87 95       	ror	r24
    22fa:	95 95       	asr	r25
    22fc:	87 95       	ror	r24
    22fe:	95 95       	asr	r25
    2300:	87 95       	ror	r24
    2302:	98 2f       	mov	r25, r24
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	64 e0       	ldi	r22, 0x04	; 4
    2308:	49 2f       	mov	r20, r25
    230a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(command,5));
    230e:	fe 01       	movw	r30, r28
    2310:	ed 59       	subi	r30, 0x9D	; 157
    2312:	ff 4f       	sbci	r31, 0xFF	; 255
    2314:	80 81       	ld	r24, Z
    2316:	88 2f       	mov	r24, r24
    2318:	90 e0       	ldi	r25, 0x00	; 0
    231a:	80 72       	andi	r24, 0x20	; 32
    231c:	90 70       	andi	r25, 0x00	; 0
    231e:	95 95       	asr	r25
    2320:	87 95       	ror	r24
    2322:	95 95       	asr	r25
    2324:	87 95       	ror	r24
    2326:	95 95       	asr	r25
    2328:	87 95       	ror	r24
    232a:	95 95       	asr	r25
    232c:	87 95       	ror	r24
    232e:	95 95       	asr	r25
    2330:	87 95       	ror	r24
    2332:	98 2f       	mov	r25, r24
    2334:	80 e0       	ldi	r24, 0x00	; 0
    2336:	65 e0       	ldi	r22, 0x05	; 5
    2338:	49 2f       	mov	r20, r25
    233a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(command,6));
    233e:	fe 01       	movw	r30, r28
    2340:	ed 59       	subi	r30, 0x9D	; 157
    2342:	ff 4f       	sbci	r31, 0xFF	; 255
    2344:	80 81       	ld	r24, Z
    2346:	88 2f       	mov	r24, r24
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	80 74       	andi	r24, 0x40	; 64
    234c:	90 70       	andi	r25, 0x00	; 0
    234e:	08 2e       	mov	r0, r24
    2350:	89 2f       	mov	r24, r25
    2352:	00 0c       	add	r0, r0
    2354:	88 1f       	adc	r24, r24
    2356:	99 0b       	sbc	r25, r25
    2358:	00 0c       	add	r0, r0
    235a:	88 1f       	adc	r24, r24
    235c:	99 1f       	adc	r25, r25
    235e:	98 2f       	mov	r25, r24
    2360:	80 e0       	ldi	r24, 0x00	; 0
    2362:	66 e0       	ldi	r22, 0x06	; 6
    2364:	49 2f       	mov	r20, r25
    2366:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(command,7));
    236a:	fe 01       	movw	r30, r28
    236c:	ed 59       	subi	r30, 0x9D	; 157
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	80 81       	ld	r24, Z
    2372:	98 2f       	mov	r25, r24
    2374:	99 1f       	adc	r25, r25
    2376:	99 27       	eor	r25, r25
    2378:	99 1f       	adc	r25, r25
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	67 e0       	ldi	r22, 0x07	; 7
    237e:	49 2f       	mov	r20, r25
    2380:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2384:	fe 01       	movw	r30, r28
    2386:	ed 5b       	subi	r30, 0xBD	; 189
    2388:	ff 4f       	sbci	r31, 0xFF	; 255
    238a:	80 e0       	ldi	r24, 0x00	; 0
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	a0 e8       	ldi	r26, 0x80	; 128
    2390:	bf e3       	ldi	r27, 0x3F	; 63
    2392:	80 83       	st	Z, r24
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	a2 83       	std	Z+2, r26	; 0x02
    2398:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    239a:	8e 01       	movw	r16, r28
    239c:	01 5c       	subi	r16, 0xC1	; 193
    239e:	1f 4f       	sbci	r17, 0xFF	; 255
    23a0:	fe 01       	movw	r30, r28
    23a2:	ed 5b       	subi	r30, 0xBD	; 189
    23a4:	ff 4f       	sbci	r31, 0xFF	; 255
    23a6:	60 81       	ld	r22, Z
    23a8:	71 81       	ldd	r23, Z+1	; 0x01
    23aa:	82 81       	ldd	r24, Z+2	; 0x02
    23ac:	93 81       	ldd	r25, Z+3	; 0x03
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	4a ef       	ldi	r20, 0xFA	; 250
    23b4:	54 e4       	ldi	r21, 0x44	; 68
    23b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	f8 01       	movw	r30, r16
    23c0:	80 83       	st	Z, r24
    23c2:	91 83       	std	Z+1, r25	; 0x01
    23c4:	a2 83       	std	Z+2, r26	; 0x02
    23c6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23c8:	fe 01       	movw	r30, r28
    23ca:	ff 96       	adiw	r30, 0x3f	; 63
    23cc:	60 81       	ld	r22, Z
    23ce:	71 81       	ldd	r23, Z+1	; 0x01
    23d0:	82 81       	ldd	r24, Z+2	; 0x02
    23d2:	93 81       	ldd	r25, Z+3	; 0x03
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_sendCommand+0x40e>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9e af       	std	Y+62, r25	; 0x3e
    23ea:	8d af       	std	Y+61, r24	; 0x3d
    23ec:	46 c0       	rjmp	.+140    	; 0x247a <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    23ee:	fe 01       	movw	r30, r28
    23f0:	ff 96       	adiw	r30, 0x3f	; 63
    23f2:	60 81       	ld	r22, Z
    23f4:	71 81       	ldd	r23, Z+1	; 0x01
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	3f ef       	ldi	r19, 0xFF	; 255
    23fe:	4f e7       	ldi	r20, 0x7F	; 127
    2400:	57 e4       	ldi	r21, 0x47	; 71
    2402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2406:	18 16       	cp	r1, r24
    2408:	64 f5       	brge	.+88     	; 0x2462 <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    240a:	fe 01       	movw	r30, r28
    240c:	ed 5b       	subi	r30, 0xBD	; 189
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	20 e0       	ldi	r18, 0x00	; 0
    241a:	30 e0       	ldi	r19, 0x00	; 0
    241c:	40 e2       	ldi	r20, 0x20	; 32
    241e:	51 e4       	ldi	r21, 0x41	; 65
    2420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	bc 01       	movw	r22, r24
    242a:	cd 01       	movw	r24, r26
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	9e af       	std	Y+62, r25	; 0x3e
    2436:	8d af       	std	Y+61, r24	; 0x3d
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <LCD_sendCommand+0x478>
    243a:	88 ec       	ldi	r24, 0xC8	; 200
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c af       	std	Y+60, r25	; 0x3c
    2440:	8b af       	std	Y+59, r24	; 0x3b
    2442:	8b ad       	ldd	r24, Y+59	; 0x3b
    2444:	9c ad       	ldd	r25, Y+60	; 0x3c
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <LCD_sendCommand+0x466>
    244a:	9c af       	std	Y+60, r25	; 0x3c
    244c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    244e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2450:	9e ad       	ldd	r25, Y+62	; 0x3e
    2452:	01 97       	sbiw	r24, 0x01	; 1
    2454:	9e af       	std	Y+62, r25	; 0x3e
    2456:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2458:	8d ad       	ldd	r24, Y+61	; 0x3d
    245a:	9e ad       	ldd	r25, Y+62	; 0x3e
    245c:	00 97       	sbiw	r24, 0x00	; 0
    245e:	69 f7       	brne	.-38     	; 0x243a <LCD_sendCommand+0x45a>
    2460:	16 c0       	rjmp	.+44     	; 0x248e <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2462:	fe 01       	movw	r30, r28
    2464:	ff 96       	adiw	r30, 0x3f	; 63
    2466:	60 81       	ld	r22, Z
    2468:	71 81       	ldd	r23, Z+1	; 0x01
    246a:	82 81       	ldd	r24, Z+2	; 0x02
    246c:	93 81       	ldd	r25, Z+3	; 0x03
    246e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2472:	dc 01       	movw	r26, r24
    2474:	cb 01       	movw	r24, r22
    2476:	9e af       	std	Y+62, r25	; 0x3e
    2478:	8d af       	std	Y+61, r24	; 0x3d
    247a:	8d ad       	ldd	r24, Y+61	; 0x3d
    247c:	9e ad       	ldd	r25, Y+62	; 0x3e
    247e:	9a af       	std	Y+58, r25	; 0x3a
    2480:	89 af       	std	Y+57, r24	; 0x39
    2482:	89 ad       	ldd	r24, Y+57	; 0x39
    2484:	9a ad       	ldd	r25, Y+58	; 0x3a
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_sendCommand+0x4a6>
    248a:	9a af       	std	Y+58, r25	; 0x3a
    248c:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	61 e0       	ldi	r22, 0x01	; 1
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2498:	80 e0       	ldi	r24, 0x00	; 0
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	a0 e8       	ldi	r26, 0x80	; 128
    249e:	bf e3       	ldi	r27, 0x3F	; 63
    24a0:	8d ab       	std	Y+53, r24	; 0x35
    24a2:	9e ab       	std	Y+54, r25	; 0x36
    24a4:	af ab       	std	Y+55, r26	; 0x37
    24a6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a8:	6d a9       	ldd	r22, Y+53	; 0x35
    24aa:	7e a9       	ldd	r23, Y+54	; 0x36
    24ac:	8f a9       	ldd	r24, Y+55	; 0x37
    24ae:	98 ad       	ldd	r25, Y+56	; 0x38
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	4a ef       	ldi	r20, 0xFA	; 250
    24b6:	54 e4       	ldi	r21, 0x44	; 68
    24b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
    24c0:	89 ab       	std	Y+49, r24	; 0x31
    24c2:	9a ab       	std	Y+50, r25	; 0x32
    24c4:	ab ab       	std	Y+51, r26	; 0x33
    24c6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24c8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ca:	7a a9       	ldd	r23, Y+50	; 0x32
    24cc:	8b a9       	ldd	r24, Y+51	; 0x33
    24ce:	9c a9       	ldd	r25, Y+52	; 0x34
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e8       	ldi	r20, 0x80	; 128
    24d6:	5f e3       	ldi	r21, 0x3F	; 63
    24d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24dc:	88 23       	and	r24, r24
    24de:	2c f4       	brge	.+10     	; 0x24ea <LCD_sendCommand+0x50a>
		__ticks = 1;
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	90 e0       	ldi	r25, 0x00	; 0
    24e4:	98 ab       	std	Y+48, r25	; 0x30
    24e6:	8f a7       	std	Y+47, r24	; 0x2f
    24e8:	3f c0       	rjmp	.+126    	; 0x2568 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    24ea:	69 a9       	ldd	r22, Y+49	; 0x31
    24ec:	7a a9       	ldd	r23, Y+50	; 0x32
    24ee:	8b a9       	ldd	r24, Y+51	; 0x33
    24f0:	9c a9       	ldd	r25, Y+52	; 0x34
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	4c f5       	brge	.+82     	; 0x2554 <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	6d a9       	ldd	r22, Y+53	; 0x35
    2504:	7e a9       	ldd	r23, Y+54	; 0x36
    2506:	8f a9       	ldd	r24, Y+55	; 0x37
    2508:	98 ad       	ldd	r25, Y+56	; 0x38
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e2       	ldi	r20, 0x20	; 32
    2510:	51 e4       	ldi	r21, 0x41	; 65
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	bc 01       	movw	r22, r24
    251c:	cd 01       	movw	r24, r26
    251e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	98 ab       	std	Y+48, r25	; 0x30
    2528:	8f a7       	std	Y+47, r24	; 0x2f
    252a:	0f c0       	rjmp	.+30     	; 0x254a <LCD_sendCommand+0x56a>
    252c:	88 ec       	ldi	r24, 0xC8	; 200
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	9e a7       	std	Y+46, r25	; 0x2e
    2532:	8d a7       	std	Y+45, r24	; 0x2d
    2534:	8d a5       	ldd	r24, Y+45	; 0x2d
    2536:	9e a5       	ldd	r25, Y+46	; 0x2e
    2538:	01 97       	sbiw	r24, 0x01	; 1
    253a:	f1 f7       	brne	.-4      	; 0x2538 <LCD_sendCommand+0x558>
    253c:	9e a7       	std	Y+46, r25	; 0x2e
    253e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2540:	8f a5       	ldd	r24, Y+47	; 0x2f
    2542:	98 a9       	ldd	r25, Y+48	; 0x30
    2544:	01 97       	sbiw	r24, 0x01	; 1
    2546:	98 ab       	std	Y+48, r25	; 0x30
    2548:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    254a:	8f a5       	ldd	r24, Y+47	; 0x2f
    254c:	98 a9       	ldd	r25, Y+48	; 0x30
    254e:	00 97       	sbiw	r24, 0x00	; 0
    2550:	69 f7       	brne	.-38     	; 0x252c <LCD_sendCommand+0x54c>
    2552:	14 c0       	rjmp	.+40     	; 0x257c <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2554:	69 a9       	ldd	r22, Y+49	; 0x31
    2556:	7a a9       	ldd	r23, Y+50	; 0x32
    2558:	8b a9       	ldd	r24, Y+51	; 0x33
    255a:	9c a9       	ldd	r25, Y+52	; 0x34
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	98 ab       	std	Y+48, r25	; 0x30
    2566:	8f a7       	std	Y+47, r24	; 0x2f
    2568:	8f a5       	ldd	r24, Y+47	; 0x2f
    256a:	98 a9       	ldd	r25, Y+48	; 0x30
    256c:	9c a7       	std	Y+44, r25	; 0x2c
    256e:	8b a7       	std	Y+43, r24	; 0x2b
    2570:	8b a5       	ldd	r24, Y+43	; 0x2b
    2572:	9c a5       	ldd	r25, Y+44	; 0x2c
    2574:	01 97       	sbiw	r24, 0x01	; 1
    2576:	f1 f7       	brne	.-4      	; 0x2574 <LCD_sendCommand+0x594>
    2578:	9c a7       	std	Y+44, r25	; 0x2c
    257a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	41 e0       	ldi	r20, 0x01	; 1
    2582:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2586:	80 e0       	ldi	r24, 0x00	; 0
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	a0 e8       	ldi	r26, 0x80	; 128
    258c:	bf e3       	ldi	r27, 0x3F	; 63
    258e:	8f a3       	std	Y+39, r24	; 0x27
    2590:	98 a7       	std	Y+40, r25	; 0x28
    2592:	a9 a7       	std	Y+41, r26	; 0x29
    2594:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2596:	6f a1       	ldd	r22, Y+39	; 0x27
    2598:	78 a5       	ldd	r23, Y+40	; 0x28
    259a:	89 a5       	ldd	r24, Y+41	; 0x29
    259c:	9a a5       	ldd	r25, Y+42	; 0x2a
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	30 e0       	ldi	r19, 0x00	; 0
    25a2:	4a ef       	ldi	r20, 0xFA	; 250
    25a4:	54 e4       	ldi	r21, 0x44	; 68
    25a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25aa:	dc 01       	movw	r26, r24
    25ac:	cb 01       	movw	r24, r22
    25ae:	8b a3       	std	Y+35, r24	; 0x23
    25b0:	9c a3       	std	Y+36, r25	; 0x24
    25b2:	ad a3       	std	Y+37, r26	; 0x25
    25b4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25b6:	6b a1       	ldd	r22, Y+35	; 0x23
    25b8:	7c a1       	ldd	r23, Y+36	; 0x24
    25ba:	8d a1       	ldd	r24, Y+37	; 0x25
    25bc:	9e a1       	ldd	r25, Y+38	; 0x26
    25be:	20 e0       	ldi	r18, 0x00	; 0
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	40 e8       	ldi	r20, 0x80	; 128
    25c4:	5f e3       	ldi	r21, 0x3F	; 63
    25c6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ca:	88 23       	and	r24, r24
    25cc:	2c f4       	brge	.+10     	; 0x25d8 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    25ce:	81 e0       	ldi	r24, 0x01	; 1
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9a a3       	std	Y+34, r25	; 0x22
    25d4:	89 a3       	std	Y+33, r24	; 0x21
    25d6:	3f c0       	rjmp	.+126    	; 0x2656 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    25d8:	6b a1       	ldd	r22, Y+35	; 0x23
    25da:	7c a1       	ldd	r23, Y+36	; 0x24
    25dc:	8d a1       	ldd	r24, Y+37	; 0x25
    25de:	9e a1       	ldd	r25, Y+38	; 0x26
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	3f ef       	ldi	r19, 0xFF	; 255
    25e4:	4f e7       	ldi	r20, 0x7F	; 127
    25e6:	57 e4       	ldi	r21, 0x47	; 71
    25e8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ec:	18 16       	cp	r1, r24
    25ee:	4c f5       	brge	.+82     	; 0x2642 <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f0:	6f a1       	ldd	r22, Y+39	; 0x27
    25f2:	78 a5       	ldd	r23, Y+40	; 0x28
    25f4:	89 a5       	ldd	r24, Y+41	; 0x29
    25f6:	9a a5       	ldd	r25, Y+42	; 0x2a
    25f8:	20 e0       	ldi	r18, 0x00	; 0
    25fa:	30 e0       	ldi	r19, 0x00	; 0
    25fc:	40 e2       	ldi	r20, 0x20	; 32
    25fe:	51 e4       	ldi	r21, 0x41	; 65
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	bc 01       	movw	r22, r24
    260a:	cd 01       	movw	r24, r26
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9a a3       	std	Y+34, r25	; 0x22
    2616:	89 a3       	std	Y+33, r24	; 0x21
    2618:	0f c0       	rjmp	.+30     	; 0x2638 <LCD_sendCommand+0x658>
    261a:	88 ec       	ldi	r24, 0xC8	; 200
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	98 a3       	std	Y+32, r25	; 0x20
    2620:	8f 8f       	std	Y+31, r24	; 0x1f
    2622:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2624:	98 a1       	ldd	r25, Y+32	; 0x20
    2626:	01 97       	sbiw	r24, 0x01	; 1
    2628:	f1 f7       	brne	.-4      	; 0x2626 <LCD_sendCommand+0x646>
    262a:	98 a3       	std	Y+32, r25	; 0x20
    262c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262e:	89 a1       	ldd	r24, Y+33	; 0x21
    2630:	9a a1       	ldd	r25, Y+34	; 0x22
    2632:	01 97       	sbiw	r24, 0x01	; 1
    2634:	9a a3       	std	Y+34, r25	; 0x22
    2636:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2638:	89 a1       	ldd	r24, Y+33	; 0x21
    263a:	9a a1       	ldd	r25, Y+34	; 0x22
    263c:	00 97       	sbiw	r24, 0x00	; 0
    263e:	69 f7       	brne	.-38     	; 0x261a <LCD_sendCommand+0x63a>
    2640:	14 c0       	rjmp	.+40     	; 0x266a <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2642:	6b a1       	ldd	r22, Y+35	; 0x23
    2644:	7c a1       	ldd	r23, Y+36	; 0x24
    2646:	8d a1       	ldd	r24, Y+37	; 0x25
    2648:	9e a1       	ldd	r25, Y+38	; 0x26
    264a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264e:	dc 01       	movw	r26, r24
    2650:	cb 01       	movw	r24, r22
    2652:	9a a3       	std	Y+34, r25	; 0x22
    2654:	89 a3       	std	Y+33, r24	; 0x21
    2656:	89 a1       	ldd	r24, Y+33	; 0x21
    2658:	9a a1       	ldd	r25, Y+34	; 0x22
    265a:	9e 8f       	std	Y+30, r25	; 0x1e
    265c:	8d 8f       	std	Y+29, r24	; 0x1d
    265e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2660:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2662:	01 97       	sbiw	r24, 0x01	; 1
    2664:	f1 f7       	brne	.-4      	; 0x2662 <LCD_sendCommand+0x682>
    2666:	9e 8f       	std	Y+30, r25	; 0x1e
    2668:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Sending the FIRST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(command,0));
    266a:	fe 01       	movw	r30, r28
    266c:	ed 59       	subi	r30, 0x9D	; 157
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	98 2f       	mov	r25, r24
    2674:	91 70       	andi	r25, 0x01	; 1
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	64 e0       	ldi	r22, 0x04	; 4
    267a:	49 2f       	mov	r20, r25
    267c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(command,1));
    2680:	fe 01       	movw	r30, r28
    2682:	ed 59       	subi	r30, 0x9D	; 157
    2684:	ff 4f       	sbci	r31, 0xFF	; 255
    2686:	80 81       	ld	r24, Z
    2688:	88 2f       	mov	r24, r24
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	82 70       	andi	r24, 0x02	; 2
    268e:	90 70       	andi	r25, 0x00	; 0
    2690:	95 95       	asr	r25
    2692:	87 95       	ror	r24
    2694:	98 2f       	mov	r25, r24
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	65 e0       	ldi	r22, 0x05	; 5
    269a:	49 2f       	mov	r20, r25
    269c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(command,2));
    26a0:	fe 01       	movw	r30, r28
    26a2:	ed 59       	subi	r30, 0x9D	; 157
    26a4:	ff 4f       	sbci	r31, 0xFF	; 255
    26a6:	80 81       	ld	r24, Z
    26a8:	88 2f       	mov	r24, r24
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	84 70       	andi	r24, 0x04	; 4
    26ae:	90 70       	andi	r25, 0x00	; 0
    26b0:	95 95       	asr	r25
    26b2:	87 95       	ror	r24
    26b4:	95 95       	asr	r25
    26b6:	87 95       	ror	r24
    26b8:	98 2f       	mov	r25, r24
    26ba:	80 e0       	ldi	r24, 0x00	; 0
    26bc:	66 e0       	ldi	r22, 0x06	; 6
    26be:	49 2f       	mov	r20, r25
    26c0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(command,3));
    26c4:	fe 01       	movw	r30, r28
    26c6:	ed 59       	subi	r30, 0x9D	; 157
    26c8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ca:	80 81       	ld	r24, Z
    26cc:	88 2f       	mov	r24, r24
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	88 70       	andi	r24, 0x08	; 8
    26d2:	90 70       	andi	r25, 0x00	; 0
    26d4:	95 95       	asr	r25
    26d6:	87 95       	ror	r24
    26d8:	95 95       	asr	r25
    26da:	87 95       	ror	r24
    26dc:	95 95       	asr	r25
    26de:	87 95       	ror	r24
    26e0:	98 2f       	mov	r25, r24
    26e2:	80 e0       	ldi	r24, 0x00	; 0
    26e4:	67 e0       	ldi	r22, 0x07	; 7
    26e6:	49 2f       	mov	r20, r25
    26e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    26ec:	80 e0       	ldi	r24, 0x00	; 0
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	a0 e8       	ldi	r26, 0x80	; 128
    26f2:	bf e3       	ldi	r27, 0x3F	; 63
    26f4:	89 8f       	std	Y+25, r24	; 0x19
    26f6:	9a 8f       	std	Y+26, r25	; 0x1a
    26f8:	ab 8f       	std	Y+27, r26	; 0x1b
    26fa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fc:	69 8d       	ldd	r22, Y+25	; 0x19
    26fe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2700:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2702:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2704:	20 e0       	ldi	r18, 0x00	; 0
    2706:	30 e0       	ldi	r19, 0x00	; 0
    2708:	4a ef       	ldi	r20, 0xFA	; 250
    270a:	54 e4       	ldi	r21, 0x44	; 68
    270c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2710:	dc 01       	movw	r26, r24
    2712:	cb 01       	movw	r24, r22
    2714:	8d 8b       	std	Y+21, r24	; 0x15
    2716:	9e 8b       	std	Y+22, r25	; 0x16
    2718:	af 8b       	std	Y+23, r26	; 0x17
    271a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    271c:	6d 89       	ldd	r22, Y+21	; 0x15
    271e:	7e 89       	ldd	r23, Y+22	; 0x16
    2720:	8f 89       	ldd	r24, Y+23	; 0x17
    2722:	98 8d       	ldd	r25, Y+24	; 0x18
    2724:	20 e0       	ldi	r18, 0x00	; 0
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e8       	ldi	r20, 0x80	; 128
    272a:	5f e3       	ldi	r21, 0x3F	; 63
    272c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2730:	88 23       	and	r24, r24
    2732:	2c f4       	brge	.+10     	; 0x273e <LCD_sendCommand+0x75e>
		__ticks = 1;
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 8b       	std	Y+20, r25	; 0x14
    273a:	8b 8b       	std	Y+19, r24	; 0x13
    273c:	3f c0       	rjmp	.+126    	; 0x27bc <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    273e:	6d 89       	ldd	r22, Y+21	; 0x15
    2740:	7e 89       	ldd	r23, Y+22	; 0x16
    2742:	8f 89       	ldd	r24, Y+23	; 0x17
    2744:	98 8d       	ldd	r25, Y+24	; 0x18
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	3f ef       	ldi	r19, 0xFF	; 255
    274a:	4f e7       	ldi	r20, 0x7F	; 127
    274c:	57 e4       	ldi	r21, 0x47	; 71
    274e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2752:	18 16       	cp	r1, r24
    2754:	4c f5       	brge	.+82     	; 0x27a8 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2756:	69 8d       	ldd	r22, Y+25	; 0x19
    2758:	7a 8d       	ldd	r23, Y+26	; 0x1a
    275a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e2       	ldi	r20, 0x20	; 32
    2764:	51 e4       	ldi	r21, 0x41	; 65
    2766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276a:	dc 01       	movw	r26, r24
    276c:	cb 01       	movw	r24, r22
    276e:	bc 01       	movw	r22, r24
    2770:	cd 01       	movw	r24, r26
    2772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2776:	dc 01       	movw	r26, r24
    2778:	cb 01       	movw	r24, r22
    277a:	9c 8b       	std	Y+20, r25	; 0x14
    277c:	8b 8b       	std	Y+19, r24	; 0x13
    277e:	0f c0       	rjmp	.+30     	; 0x279e <LCD_sendCommand+0x7be>
    2780:	88 ec       	ldi	r24, 0xC8	; 200
    2782:	90 e0       	ldi	r25, 0x00	; 0
    2784:	9a 8b       	std	Y+18, r25	; 0x12
    2786:	89 8b       	std	Y+17, r24	; 0x11
    2788:	89 89       	ldd	r24, Y+17	; 0x11
    278a:	9a 89       	ldd	r25, Y+18	; 0x12
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	f1 f7       	brne	.-4      	; 0x278c <LCD_sendCommand+0x7ac>
    2790:	9a 8b       	std	Y+18, r25	; 0x12
    2792:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2794:	8b 89       	ldd	r24, Y+19	; 0x13
    2796:	9c 89       	ldd	r25, Y+20	; 0x14
    2798:	01 97       	sbiw	r24, 0x01	; 1
    279a:	9c 8b       	std	Y+20, r25	; 0x14
    279c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279e:	8b 89       	ldd	r24, Y+19	; 0x13
    27a0:	9c 89       	ldd	r25, Y+20	; 0x14
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	69 f7       	brne	.-38     	; 0x2780 <LCD_sendCommand+0x7a0>
    27a6:	14 c0       	rjmp	.+40     	; 0x27d0 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a8:	6d 89       	ldd	r22, Y+21	; 0x15
    27aa:	7e 89       	ldd	r23, Y+22	; 0x16
    27ac:	8f 89       	ldd	r24, Y+23	; 0x17
    27ae:	98 8d       	ldd	r25, Y+24	; 0x18
    27b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b4:	dc 01       	movw	r26, r24
    27b6:	cb 01       	movw	r24, r22
    27b8:	9c 8b       	std	Y+20, r25	; 0x14
    27ba:	8b 8b       	std	Y+19, r24	; 0x13
    27bc:	8b 89       	ldd	r24, Y+19	; 0x13
    27be:	9c 89       	ldd	r25, Y+20	; 0x14
    27c0:	98 8b       	std	Y+16, r25	; 0x10
    27c2:	8f 87       	std	Y+15, r24	; 0x0f
    27c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    27c6:	98 89       	ldd	r25, Y+16	; 0x10
    27c8:	01 97       	sbiw	r24, 0x01	; 1
    27ca:	f1 f7       	brne	.-4      	; 0x27c8 <LCD_sendCommand+0x7e8>
    27cc:	98 8b       	std	Y+16, r25	; 0x10
    27ce:	8f 87       	std	Y+15, r24	; 0x0f
	}
#endif

	/* Shared Part must be added at the END */
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	61 e0       	ldi	r22, 0x01	; 1
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e8       	ldi	r26, 0x80	; 128
    27e0:	bf e3       	ldi	r27, 0x3F	; 63
    27e2:	8b 87       	std	Y+11, r24	; 0x0b
    27e4:	9c 87       	std	Y+12, r25	; 0x0c
    27e6:	ad 87       	std	Y+13, r26	; 0x0d
    27e8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    27ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	8f 83       	std	Y+7, r24	; 0x07
    2804:	98 87       	std	Y+8, r25	; 0x08
    2806:	a9 87       	std	Y+9, r26	; 0x09
    2808:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    280a:	6f 81       	ldd	r22, Y+7	; 0x07
    280c:	78 85       	ldd	r23, Y+8	; 0x08
    280e:	89 85       	ldd	r24, Y+9	; 0x09
    2810:	9a 85       	ldd	r25, Y+10	; 0x0a
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <LCD_sendCommand+0x84c>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	9e 83       	std	Y+6, r25	; 0x06
    2828:	8d 83       	std	Y+5, r24	; 0x05
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    282c:	6f 81       	ldd	r22, Y+7	; 0x07
    282e:	78 85       	ldd	r23, Y+8	; 0x08
    2830:	89 85       	ldd	r24, Y+9	; 0x09
    2832:	9a 85       	ldd	r25, Y+10	; 0x0a
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6b 85       	ldd	r22, Y+11	; 0x0b
    2846:	7c 85       	ldd	r23, Y+12	; 0x0c
    2848:	8d 85       	ldd	r24, Y+13	; 0x0d
    284a:	9e 85       	ldd	r25, Y+14	; 0x0e
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	9e 83       	std	Y+6, r25	; 0x06
    286a:	8d 83       	std	Y+5, r24	; 0x05
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_sendCommand+0x8ac>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9c 83       	std	Y+4, r25	; 0x04
    2874:	8b 83       	std	Y+3, r24	; 0x03
    2876:	8b 81       	ldd	r24, Y+3	; 0x03
    2878:	9c 81       	ldd	r25, Y+4	; 0x04
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_sendCommand+0x89a>
    287e:	9c 83       	std	Y+4, r25	; 0x04
    2880:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8d 81       	ldd	r24, Y+5	; 0x05
    2884:	9e 81       	ldd	r25, Y+6	; 0x06
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	9e 83       	std	Y+6, r25	; 0x06
    288a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	9e 81       	ldd	r25, Y+6	; 0x06
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <LCD_sendCommand+0x88e>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	6f 81       	ldd	r22, Y+7	; 0x07
    2898:	78 85       	ldd	r23, Y+8	; 0x08
    289a:	89 85       	ldd	r24, Y+9	; 0x09
    289c:	9a 85       	ldd	r25, Y+10	; 0x0a
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	9e 83       	std	Y+6, r25	; 0x06
    28a8:	8d 83       	std	Y+5, r24	; 0x05
    28aa:	8d 81       	ldd	r24, Y+5	; 0x05
    28ac:	9e 81       	ldd	r25, Y+6	; 0x06
    28ae:	9a 83       	std	Y+2, r25	; 0x02
    28b0:	89 83       	std	Y+1, r24	; 0x01
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_sendCommand+0x8d6>
    28ba:	9a 83       	std	Y+2, r25	; 0x02
    28bc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    28be:	cd 59       	subi	r28, 0x9D	; 157
    28c0:	df 4f       	sbci	r29, 0xFF	; 255
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	de bf       	out	0x3e, r29	; 62
    28c8:	0f be       	out	0x3f, r0	; 63
    28ca:	cd bf       	out	0x3d, r28	; 61
    28cc:	cf 91       	pop	r28
    28ce:	df 91       	pop	r29
    28d0:	1f 91       	pop	r17
    28d2:	0f 91       	pop	r16
    28d4:	08 95       	ret

000028d6 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    28d6:	0f 93       	push	r16
    28d8:	1f 93       	push	r17
    28da:	df 93       	push	r29
    28dc:	cf 93       	push	r28
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	c3 56       	subi	r28, 0x63	; 99
    28e4:	d0 40       	sbci	r29, 0x00	; 0
    28e6:	0f b6       	in	r0, 0x3f	; 63
    28e8:	f8 94       	cli
    28ea:	de bf       	out	0x3e, r29	; 62
    28ec:	0f be       	out	0x3f, r0	; 63
    28ee:	cd bf       	out	0x3d, r28	; 61
    28f0:	fe 01       	movw	r30, r28
    28f2:	ed 59       	subi	r30, 0x9D	; 157
    28f4:	ff 4f       	sbci	r31, 0xFF	; 255
    28f6:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT, LCD_RS_PIN, LOGIC_HIGH); /* Activating the Data Register */
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	60 e0       	ldi	r22, 0x00	; 0
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2902:	fe 01       	movw	r30, r28
    2904:	e1 5a       	subi	r30, 0xA1	; 161
    2906:	ff 4f       	sbci	r31, 0xFF	; 255
    2908:	80 e0       	ldi	r24, 0x00	; 0
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	a0 e8       	ldi	r26, 0x80	; 128
    290e:	bf e3       	ldi	r27, 0x3F	; 63
    2910:	80 83       	st	Z, r24
    2912:	91 83       	std	Z+1, r25	; 0x01
    2914:	a2 83       	std	Z+2, r26	; 0x02
    2916:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2918:	8e 01       	movw	r16, r28
    291a:	05 5a       	subi	r16, 0xA5	; 165
    291c:	1f 4f       	sbci	r17, 0xFF	; 255
    291e:	fe 01       	movw	r30, r28
    2920:	e1 5a       	subi	r30, 0xA1	; 161
    2922:	ff 4f       	sbci	r31, 0xFF	; 255
    2924:	60 81       	ld	r22, Z
    2926:	71 81       	ldd	r23, Z+1	; 0x01
    2928:	82 81       	ldd	r24, Z+2	; 0x02
    292a:	93 81       	ldd	r25, Z+3	; 0x03
    292c:	20 e0       	ldi	r18, 0x00	; 0
    292e:	30 e0       	ldi	r19, 0x00	; 0
    2930:	4a ef       	ldi	r20, 0xFA	; 250
    2932:	54 e4       	ldi	r21, 0x44	; 68
    2934:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2938:	dc 01       	movw	r26, r24
    293a:	cb 01       	movw	r24, r22
    293c:	f8 01       	movw	r30, r16
    293e:	80 83       	st	Z, r24
    2940:	91 83       	std	Z+1, r25	; 0x01
    2942:	a2 83       	std	Z+2, r26	; 0x02
    2944:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2946:	fe 01       	movw	r30, r28
    2948:	e5 5a       	subi	r30, 0xA5	; 165
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	60 81       	ld	r22, Z
    294e:	71 81       	ldd	r23, Z+1	; 0x01
    2950:	82 81       	ldd	r24, Z+2	; 0x02
    2952:	93 81       	ldd	r25, Z+3	; 0x03
    2954:	20 e0       	ldi	r18, 0x00	; 0
    2956:	30 e0       	ldi	r19, 0x00	; 0
    2958:	40 e8       	ldi	r20, 0x80	; 128
    295a:	5f e3       	ldi	r21, 0x3F	; 63
    295c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2960:	88 23       	and	r24, r24
    2962:	44 f4       	brge	.+16     	; 0x2974 <LCD_displayCharacter+0x9e>
		__ticks = 1;
    2964:	fe 01       	movw	r30, r28
    2966:	e7 5a       	subi	r30, 0xA7	; 167
    2968:	ff 4f       	sbci	r31, 0xFF	; 255
    296a:	81 e0       	ldi	r24, 0x01	; 1
    296c:	90 e0       	ldi	r25, 0x00	; 0
    296e:	91 83       	std	Z+1, r25	; 0x01
    2970:	80 83       	st	Z, r24
    2972:	64 c0       	rjmp	.+200    	; 0x2a3c <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    2974:	fe 01       	movw	r30, r28
    2976:	e5 5a       	subi	r30, 0xA5	; 165
    2978:	ff 4f       	sbci	r31, 0xFF	; 255
    297a:	60 81       	ld	r22, Z
    297c:	71 81       	ldd	r23, Z+1	; 0x01
    297e:	82 81       	ldd	r24, Z+2	; 0x02
    2980:	93 81       	ldd	r25, Z+3	; 0x03
    2982:	20 e0       	ldi	r18, 0x00	; 0
    2984:	3f ef       	ldi	r19, 0xFF	; 255
    2986:	4f e7       	ldi	r20, 0x7F	; 127
    2988:	57 e4       	ldi	r21, 0x47	; 71
    298a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    298e:	18 16       	cp	r1, r24
    2990:	0c f0       	brlt	.+2      	; 0x2994 <LCD_displayCharacter+0xbe>
    2992:	43 c0       	rjmp	.+134    	; 0x2a1a <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2994:	fe 01       	movw	r30, r28
    2996:	e1 5a       	subi	r30, 0xA1	; 161
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	60 81       	ld	r22, Z
    299c:	71 81       	ldd	r23, Z+1	; 0x01
    299e:	82 81       	ldd	r24, Z+2	; 0x02
    29a0:	93 81       	ldd	r25, Z+3	; 0x03
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e2       	ldi	r20, 0x20	; 32
    29a8:	51 e4       	ldi	r21, 0x41	; 65
    29aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ae:	dc 01       	movw	r26, r24
    29b0:	cb 01       	movw	r24, r22
    29b2:	8e 01       	movw	r16, r28
    29b4:	07 5a       	subi	r16, 0xA7	; 167
    29b6:	1f 4f       	sbci	r17, 0xFF	; 255
    29b8:	bc 01       	movw	r22, r24
    29ba:	cd 01       	movw	r24, r26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	f8 01       	movw	r30, r16
    29c6:	91 83       	std	Z+1, r25	; 0x01
    29c8:	80 83       	st	Z, r24
    29ca:	1f c0       	rjmp	.+62     	; 0x2a0a <LCD_displayCharacter+0x134>
    29cc:	fe 01       	movw	r30, r28
    29ce:	e9 5a       	subi	r30, 0xA9	; 169
    29d0:	ff 4f       	sbci	r31, 0xFF	; 255
    29d2:	88 ec       	ldi	r24, 0xC8	; 200
    29d4:	90 e0       	ldi	r25, 0x00	; 0
    29d6:	91 83       	std	Z+1, r25	; 0x01
    29d8:	80 83       	st	Z, r24
    29da:	fe 01       	movw	r30, r28
    29dc:	e9 5a       	subi	r30, 0xA9	; 169
    29de:	ff 4f       	sbci	r31, 0xFF	; 255
    29e0:	80 81       	ld	r24, Z
    29e2:	91 81       	ldd	r25, Z+1	; 0x01
    29e4:	01 97       	sbiw	r24, 0x01	; 1
    29e6:	f1 f7       	brne	.-4      	; 0x29e4 <LCD_displayCharacter+0x10e>
    29e8:	fe 01       	movw	r30, r28
    29ea:	e9 5a       	subi	r30, 0xA9	; 169
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	91 83       	std	Z+1, r25	; 0x01
    29f0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29f2:	de 01       	movw	r26, r28
    29f4:	a7 5a       	subi	r26, 0xA7	; 167
    29f6:	bf 4f       	sbci	r27, 0xFF	; 255
    29f8:	fe 01       	movw	r30, r28
    29fa:	e7 5a       	subi	r30, 0xA7	; 167
    29fc:	ff 4f       	sbci	r31, 0xFF	; 255
    29fe:	80 81       	ld	r24, Z
    2a00:	91 81       	ldd	r25, Z+1	; 0x01
    2a02:	01 97       	sbiw	r24, 0x01	; 1
    2a04:	11 96       	adiw	r26, 0x01	; 1
    2a06:	9c 93       	st	X, r25
    2a08:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a0a:	fe 01       	movw	r30, r28
    2a0c:	e7 5a       	subi	r30, 0xA7	; 167
    2a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a10:	80 81       	ld	r24, Z
    2a12:	91 81       	ldd	r25, Z+1	; 0x01
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	d1 f6       	brne	.-76     	; 0x29cc <LCD_displayCharacter+0xf6>
    2a18:	27 c0       	rjmp	.+78     	; 0x2a68 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a1a:	8e 01       	movw	r16, r28
    2a1c:	07 5a       	subi	r16, 0xA7	; 167
    2a1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a20:	fe 01       	movw	r30, r28
    2a22:	e5 5a       	subi	r30, 0xA5	; 165
    2a24:	ff 4f       	sbci	r31, 0xFF	; 255
    2a26:	60 81       	ld	r22, Z
    2a28:	71 81       	ldd	r23, Z+1	; 0x01
    2a2a:	82 81       	ldd	r24, Z+2	; 0x02
    2a2c:	93 81       	ldd	r25, Z+3	; 0x03
    2a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	f8 01       	movw	r30, r16
    2a38:	91 83       	std	Z+1, r25	; 0x01
    2a3a:	80 83       	st	Z, r24
    2a3c:	de 01       	movw	r26, r28
    2a3e:	ab 5a       	subi	r26, 0xAB	; 171
    2a40:	bf 4f       	sbci	r27, 0xFF	; 255
    2a42:	fe 01       	movw	r30, r28
    2a44:	e7 5a       	subi	r30, 0xA7	; 167
    2a46:	ff 4f       	sbci	r31, 0xFF	; 255
    2a48:	80 81       	ld	r24, Z
    2a4a:	91 81       	ldd	r25, Z+1	; 0x01
    2a4c:	8d 93       	st	X+, r24
    2a4e:	9c 93       	st	X, r25
    2a50:	fe 01       	movw	r30, r28
    2a52:	eb 5a       	subi	r30, 0xAB	; 171
    2a54:	ff 4f       	sbci	r31, 0xFF	; 255
    2a56:	80 81       	ld	r24, Z
    2a58:	91 81       	ldd	r25, Z+1	; 0x01
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	f1 f7       	brne	.-4      	; 0x2a5a <LCD_displayCharacter+0x184>
    2a5e:	fe 01       	movw	r30, r28
    2a60:	eb 5a       	subi	r30, 0xAB	; 171
    2a62:	ff 4f       	sbci	r31, 0xFF	; 255
    2a64:	91 83       	std	Z+1, r25	; 0x01
    2a66:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Activating the LCD */
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	61 e0       	ldi	r22, 0x01	; 1
    2a6c:	41 e0       	ldi	r20, 0x01	; 1
    2a6e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2a72:	fe 01       	movw	r30, r28
    2a74:	ef 5a       	subi	r30, 0xAF	; 175
    2a76:	ff 4f       	sbci	r31, 0xFF	; 255
    2a78:	80 e0       	ldi	r24, 0x00	; 0
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	a0 e8       	ldi	r26, 0x80	; 128
    2a7e:	bf e3       	ldi	r27, 0x3F	; 63
    2a80:	80 83       	st	Z, r24
    2a82:	91 83       	std	Z+1, r25	; 0x01
    2a84:	a2 83       	std	Z+2, r26	; 0x02
    2a86:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a88:	8e 01       	movw	r16, r28
    2a8a:	03 5b       	subi	r16, 0xB3	; 179
    2a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a8e:	fe 01       	movw	r30, r28
    2a90:	ef 5a       	subi	r30, 0xAF	; 175
    2a92:	ff 4f       	sbci	r31, 0xFF	; 255
    2a94:	60 81       	ld	r22, Z
    2a96:	71 81       	ldd	r23, Z+1	; 0x01
    2a98:	82 81       	ldd	r24, Z+2	; 0x02
    2a9a:	93 81       	ldd	r25, Z+3	; 0x03
    2a9c:	20 e0       	ldi	r18, 0x00	; 0
    2a9e:	30 e0       	ldi	r19, 0x00	; 0
    2aa0:	4a ef       	ldi	r20, 0xFA	; 250
    2aa2:	54 e4       	ldi	r21, 0x44	; 68
    2aa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2aa8:	dc 01       	movw	r26, r24
    2aaa:	cb 01       	movw	r24, r22
    2aac:	f8 01       	movw	r30, r16
    2aae:	80 83       	st	Z, r24
    2ab0:	91 83       	std	Z+1, r25	; 0x01
    2ab2:	a2 83       	std	Z+2, r26	; 0x02
    2ab4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	e3 5b       	subi	r30, 0xB3	; 179
    2aba:	ff 4f       	sbci	r31, 0xFF	; 255
    2abc:	60 81       	ld	r22, Z
    2abe:	71 81       	ldd	r23, Z+1	; 0x01
    2ac0:	82 81       	ldd	r24, Z+2	; 0x02
    2ac2:	93 81       	ldd	r25, Z+3	; 0x03
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	40 e8       	ldi	r20, 0x80	; 128
    2aca:	5f e3       	ldi	r21, 0x3F	; 63
    2acc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ad0:	88 23       	and	r24, r24
    2ad2:	44 f4       	brge	.+16     	; 0x2ae4 <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2ad4:	fe 01       	movw	r30, r28
    2ad6:	e5 5b       	subi	r30, 0xB5	; 181
    2ad8:	ff 4f       	sbci	r31, 0xFF	; 255
    2ada:	81 e0       	ldi	r24, 0x01	; 1
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	91 83       	std	Z+1, r25	; 0x01
    2ae0:	80 83       	st	Z, r24
    2ae2:	64 c0       	rjmp	.+200    	; 0x2bac <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2ae4:	fe 01       	movw	r30, r28
    2ae6:	e3 5b       	subi	r30, 0xB3	; 179
    2ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aea:	60 81       	ld	r22, Z
    2aec:	71 81       	ldd	r23, Z+1	; 0x01
    2aee:	82 81       	ldd	r24, Z+2	; 0x02
    2af0:	93 81       	ldd	r25, Z+3	; 0x03
    2af2:	20 e0       	ldi	r18, 0x00	; 0
    2af4:	3f ef       	ldi	r19, 0xFF	; 255
    2af6:	4f e7       	ldi	r20, 0x7F	; 127
    2af8:	57 e4       	ldi	r21, 0x47	; 71
    2afa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2afe:	18 16       	cp	r1, r24
    2b00:	0c f0       	brlt	.+2      	; 0x2b04 <LCD_displayCharacter+0x22e>
    2b02:	43 c0       	rjmp	.+134    	; 0x2b8a <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	fe 01       	movw	r30, r28
    2b06:	ef 5a       	subi	r30, 0xAF	; 175
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	71 81       	ldd	r23, Z+1	; 0x01
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e2       	ldi	r20, 0x20	; 32
    2b18:	51 e4       	ldi	r21, 0x41	; 65
    2b1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b1e:	dc 01       	movw	r26, r24
    2b20:	cb 01       	movw	r24, r22
    2b22:	8e 01       	movw	r16, r28
    2b24:	05 5b       	subi	r16, 0xB5	; 181
    2b26:	1f 4f       	sbci	r17, 0xFF	; 255
    2b28:	bc 01       	movw	r22, r24
    2b2a:	cd 01       	movw	r24, r26
    2b2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b30:	dc 01       	movw	r26, r24
    2b32:	cb 01       	movw	r24, r22
    2b34:	f8 01       	movw	r30, r16
    2b36:	91 83       	std	Z+1, r25	; 0x01
    2b38:	80 83       	st	Z, r24
    2b3a:	1f c0       	rjmp	.+62     	; 0x2b7a <LCD_displayCharacter+0x2a4>
    2b3c:	fe 01       	movw	r30, r28
    2b3e:	e7 5b       	subi	r30, 0xB7	; 183
    2b40:	ff 4f       	sbci	r31, 0xFF	; 255
    2b42:	88 ec       	ldi	r24, 0xC8	; 200
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	91 83       	std	Z+1, r25	; 0x01
    2b48:	80 83       	st	Z, r24
    2b4a:	fe 01       	movw	r30, r28
    2b4c:	e7 5b       	subi	r30, 0xB7	; 183
    2b4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b50:	80 81       	ld	r24, Z
    2b52:	91 81       	ldd	r25, Z+1	; 0x01
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <LCD_displayCharacter+0x27e>
    2b58:	fe 01       	movw	r30, r28
    2b5a:	e7 5b       	subi	r30, 0xB7	; 183
    2b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b5e:	91 83       	std	Z+1, r25	; 0x01
    2b60:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b62:	de 01       	movw	r26, r28
    2b64:	a5 5b       	subi	r26, 0xB5	; 181
    2b66:	bf 4f       	sbci	r27, 0xFF	; 255
    2b68:	fe 01       	movw	r30, r28
    2b6a:	e5 5b       	subi	r30, 0xB5	; 181
    2b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6e:	80 81       	ld	r24, Z
    2b70:	91 81       	ldd	r25, Z+1	; 0x01
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	11 96       	adiw	r26, 0x01	; 1
    2b76:	9c 93       	st	X, r25
    2b78:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7a:	fe 01       	movw	r30, r28
    2b7c:	e5 5b       	subi	r30, 0xB5	; 181
    2b7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b80:	80 81       	ld	r24, Z
    2b82:	91 81       	ldd	r25, Z+1	; 0x01
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	d1 f6       	brne	.-76     	; 0x2b3c <LCD_displayCharacter+0x266>
    2b88:	27 c0       	rjmp	.+78     	; 0x2bd8 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	8e 01       	movw	r16, r28
    2b8c:	05 5b       	subi	r16, 0xB5	; 181
    2b8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b90:	fe 01       	movw	r30, r28
    2b92:	e3 5b       	subi	r30, 0xB3	; 179
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	60 81       	ld	r22, Z
    2b98:	71 81       	ldd	r23, Z+1	; 0x01
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	f8 01       	movw	r30, r16
    2ba8:	91 83       	std	Z+1, r25	; 0x01
    2baa:	80 83       	st	Z, r24
    2bac:	de 01       	movw	r26, r28
    2bae:	a9 5b       	subi	r26, 0xB9	; 185
    2bb0:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb2:	fe 01       	movw	r30, r28
    2bb4:	e5 5b       	subi	r30, 0xB5	; 181
    2bb6:	ff 4f       	sbci	r31, 0xFF	; 255
    2bb8:	80 81       	ld	r24, Z
    2bba:	91 81       	ldd	r25, Z+1	; 0x01
    2bbc:	8d 93       	st	X+, r24
    2bbe:	9c 93       	st	X, r25
    2bc0:	fe 01       	movw	r30, r28
    2bc2:	e9 5b       	subi	r30, 0xB9	; 185
    2bc4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bc6:	80 81       	ld	r24, Z
    2bc8:	91 81       	ldd	r25, Z+1	; 0x01
    2bca:	01 97       	sbiw	r24, 0x01	; 1
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_displayCharacter+0x2f4>
    2bce:	fe 01       	movw	r30, r28
    2bd0:	e9 5b       	subi	r30, 0xB9	; 185
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	91 83       	std	Z+1, r25	; 0x01
    2bd6:	80 83       	st	Z, r24
		_delay_ms(1);
	}
#else
	{
		/* Sending the LAST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(data,4));
    2bd8:	fe 01       	movw	r30, r28
    2bda:	ed 59       	subi	r30, 0x9D	; 157
    2bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bde:	80 81       	ld	r24, Z
    2be0:	88 2f       	mov	r24, r24
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	80 71       	andi	r24, 0x10	; 16
    2be6:	90 70       	andi	r25, 0x00	; 0
    2be8:	95 95       	asr	r25
    2bea:	87 95       	ror	r24
    2bec:	95 95       	asr	r25
    2bee:	87 95       	ror	r24
    2bf0:	95 95       	asr	r25
    2bf2:	87 95       	ror	r24
    2bf4:	95 95       	asr	r25
    2bf6:	87 95       	ror	r24
    2bf8:	98 2f       	mov	r25, r24
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	64 e0       	ldi	r22, 0x04	; 4
    2bfe:	49 2f       	mov	r20, r25
    2c00:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(data,5));
    2c04:	fe 01       	movw	r30, r28
    2c06:	ed 59       	subi	r30, 0x9D	; 157
    2c08:	ff 4f       	sbci	r31, 0xFF	; 255
    2c0a:	80 81       	ld	r24, Z
    2c0c:	88 2f       	mov	r24, r24
    2c0e:	90 e0       	ldi	r25, 0x00	; 0
    2c10:	80 72       	andi	r24, 0x20	; 32
    2c12:	90 70       	andi	r25, 0x00	; 0
    2c14:	95 95       	asr	r25
    2c16:	87 95       	ror	r24
    2c18:	95 95       	asr	r25
    2c1a:	87 95       	ror	r24
    2c1c:	95 95       	asr	r25
    2c1e:	87 95       	ror	r24
    2c20:	95 95       	asr	r25
    2c22:	87 95       	ror	r24
    2c24:	95 95       	asr	r25
    2c26:	87 95       	ror	r24
    2c28:	98 2f       	mov	r25, r24
    2c2a:	80 e0       	ldi	r24, 0x00	; 0
    2c2c:	65 e0       	ldi	r22, 0x05	; 5
    2c2e:	49 2f       	mov	r20, r25
    2c30:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(data,6));
    2c34:	fe 01       	movw	r30, r28
    2c36:	ed 59       	subi	r30, 0x9D	; 157
    2c38:	ff 4f       	sbci	r31, 0xFF	; 255
    2c3a:	80 81       	ld	r24, Z
    2c3c:	88 2f       	mov	r24, r24
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	80 74       	andi	r24, 0x40	; 64
    2c42:	90 70       	andi	r25, 0x00	; 0
    2c44:	08 2e       	mov	r0, r24
    2c46:	89 2f       	mov	r24, r25
    2c48:	00 0c       	add	r0, r0
    2c4a:	88 1f       	adc	r24, r24
    2c4c:	99 0b       	sbc	r25, r25
    2c4e:	00 0c       	add	r0, r0
    2c50:	88 1f       	adc	r24, r24
    2c52:	99 1f       	adc	r25, r25
    2c54:	98 2f       	mov	r25, r24
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    2c58:	66 e0       	ldi	r22, 0x06	; 6
    2c5a:	49 2f       	mov	r20, r25
    2c5c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,7));
    2c60:	fe 01       	movw	r30, r28
    2c62:	ed 59       	subi	r30, 0x9D	; 157
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	80 81       	ld	r24, Z
    2c68:	98 2f       	mov	r25, r24
    2c6a:	99 1f       	adc	r25, r25
    2c6c:	99 27       	eor	r25, r25
    2c6e:	99 1f       	adc	r25, r25
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	67 e0       	ldi	r22, 0x07	; 7
    2c74:	49 2f       	mov	r20, r25
    2c76:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2c7a:	fe 01       	movw	r30, r28
    2c7c:	ed 5b       	subi	r30, 0xBD	; 189
    2c7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	a0 e8       	ldi	r26, 0x80	; 128
    2c86:	bf e3       	ldi	r27, 0x3F	; 63
    2c88:	80 83       	st	Z, r24
    2c8a:	91 83       	std	Z+1, r25	; 0x01
    2c8c:	a2 83       	std	Z+2, r26	; 0x02
    2c8e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c90:	8e 01       	movw	r16, r28
    2c92:	01 5c       	subi	r16, 0xC1	; 193
    2c94:	1f 4f       	sbci	r17, 0xFF	; 255
    2c96:	fe 01       	movw	r30, r28
    2c98:	ed 5b       	subi	r30, 0xBD	; 189
    2c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2c9c:	60 81       	ld	r22, Z
    2c9e:	71 81       	ldd	r23, Z+1	; 0x01
    2ca0:	82 81       	ldd	r24, Z+2	; 0x02
    2ca2:	93 81       	ldd	r25, Z+3	; 0x03
    2ca4:	20 e0       	ldi	r18, 0x00	; 0
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	4a ef       	ldi	r20, 0xFA	; 250
    2caa:	54 e4       	ldi	r21, 0x44	; 68
    2cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	f8 01       	movw	r30, r16
    2cb6:	80 83       	st	Z, r24
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	a2 83       	std	Z+2, r26	; 0x02
    2cbc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	ff 96       	adiw	r30, 0x3f	; 63
    2cc2:	60 81       	ld	r22, Z
    2cc4:	71 81       	ldd	r23, Z+1	; 0x01
    2cc6:	82 81       	ldd	r24, Z+2	; 0x02
    2cc8:	93 81       	ldd	r25, Z+3	; 0x03
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	30 e0       	ldi	r19, 0x00	; 0
    2cce:	40 e8       	ldi	r20, 0x80	; 128
    2cd0:	5f e3       	ldi	r21, 0x3F	; 63
    2cd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cd6:	88 23       	and	r24, r24
    2cd8:	2c f4       	brge	.+10     	; 0x2ce4 <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	9e af       	std	Y+62, r25	; 0x3e
    2ce0:	8d af       	std	Y+61, r24	; 0x3d
    2ce2:	46 c0       	rjmp	.+140    	; 0x2d70 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2ce4:	fe 01       	movw	r30, r28
    2ce6:	ff 96       	adiw	r30, 0x3f	; 63
    2ce8:	60 81       	ld	r22, Z
    2cea:	71 81       	ldd	r23, Z+1	; 0x01
    2cec:	82 81       	ldd	r24, Z+2	; 0x02
    2cee:	93 81       	ldd	r25, Z+3	; 0x03
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	3f ef       	ldi	r19, 0xFF	; 255
    2cf4:	4f e7       	ldi	r20, 0x7F	; 127
    2cf6:	57 e4       	ldi	r21, 0x47	; 71
    2cf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cfc:	18 16       	cp	r1, r24
    2cfe:	64 f5       	brge	.+88     	; 0x2d58 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d00:	fe 01       	movw	r30, r28
    2d02:	ed 5b       	subi	r30, 0xBD	; 189
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	60 81       	ld	r22, Z
    2d08:	71 81       	ldd	r23, Z+1	; 0x01
    2d0a:	82 81       	ldd	r24, Z+2	; 0x02
    2d0c:	93 81       	ldd	r25, Z+3	; 0x03
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	30 e0       	ldi	r19, 0x00	; 0
    2d12:	40 e2       	ldi	r20, 0x20	; 32
    2d14:	51 e4       	ldi	r21, 0x41	; 65
    2d16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d1a:	dc 01       	movw	r26, r24
    2d1c:	cb 01       	movw	r24, r22
    2d1e:	bc 01       	movw	r22, r24
    2d20:	cd 01       	movw	r24, r26
    2d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d26:	dc 01       	movw	r26, r24
    2d28:	cb 01       	movw	r24, r22
    2d2a:	9e af       	std	Y+62, r25	; 0x3e
    2d2c:	8d af       	std	Y+61, r24	; 0x3d
    2d2e:	0f c0       	rjmp	.+30     	; 0x2d4e <LCD_displayCharacter+0x478>
    2d30:	88 ec       	ldi	r24, 0xC8	; 200
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	9c af       	std	Y+60, r25	; 0x3c
    2d36:	8b af       	std	Y+59, r24	; 0x3b
    2d38:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d3a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d3c:	01 97       	sbiw	r24, 0x01	; 1
    2d3e:	f1 f7       	brne	.-4      	; 0x2d3c <LCD_displayCharacter+0x466>
    2d40:	9c af       	std	Y+60, r25	; 0x3c
    2d42:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d44:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d46:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d48:	01 97       	sbiw	r24, 0x01	; 1
    2d4a:	9e af       	std	Y+62, r25	; 0x3e
    2d4c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d4e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d50:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d52:	00 97       	sbiw	r24, 0x00	; 0
    2d54:	69 f7       	brne	.-38     	; 0x2d30 <LCD_displayCharacter+0x45a>
    2d56:	16 c0       	rjmp	.+44     	; 0x2d84 <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d58:	fe 01       	movw	r30, r28
    2d5a:	ff 96       	adiw	r30, 0x3f	; 63
    2d5c:	60 81       	ld	r22, Z
    2d5e:	71 81       	ldd	r23, Z+1	; 0x01
    2d60:	82 81       	ldd	r24, Z+2	; 0x02
    2d62:	93 81       	ldd	r25, Z+3	; 0x03
    2d64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d68:	dc 01       	movw	r26, r24
    2d6a:	cb 01       	movw	r24, r22
    2d6c:	9e af       	std	Y+62, r25	; 0x3e
    2d6e:	8d af       	std	Y+61, r24	; 0x3d
    2d70:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d72:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d74:	9a af       	std	Y+58, r25	; 0x3a
    2d76:	89 af       	std	Y+57, r24	; 0x39
    2d78:	89 ad       	ldd	r24, Y+57	; 0x39
    2d7a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d7c:	01 97       	sbiw	r24, 0x01	; 1
    2d7e:	f1 f7       	brne	.-4      	; 0x2d7c <LCD_displayCharacter+0x4a6>
    2d80:	9a af       	std	Y+58, r25	; 0x3a
    2d82:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* De-activating the LCD */
    2d84:	80 e0       	ldi	r24, 0x00	; 0
    2d86:	61 e0       	ldi	r22, 0x01	; 1
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2d8e:	80 e0       	ldi	r24, 0x00	; 0
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	a0 e8       	ldi	r26, 0x80	; 128
    2d94:	bf e3       	ldi	r27, 0x3F	; 63
    2d96:	8d ab       	std	Y+53, r24	; 0x35
    2d98:	9e ab       	std	Y+54, r25	; 0x36
    2d9a:	af ab       	std	Y+55, r26	; 0x37
    2d9c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d9e:	6d a9       	ldd	r22, Y+53	; 0x35
    2da0:	7e a9       	ldd	r23, Y+54	; 0x36
    2da2:	8f a9       	ldd	r24, Y+55	; 0x37
    2da4:	98 ad       	ldd	r25, Y+56	; 0x38
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	30 e0       	ldi	r19, 0x00	; 0
    2daa:	4a ef       	ldi	r20, 0xFA	; 250
    2dac:	54 e4       	ldi	r21, 0x44	; 68
    2dae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2db2:	dc 01       	movw	r26, r24
    2db4:	cb 01       	movw	r24, r22
    2db6:	89 ab       	std	Y+49, r24	; 0x31
    2db8:	9a ab       	std	Y+50, r25	; 0x32
    2dba:	ab ab       	std	Y+51, r26	; 0x33
    2dbc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2dbe:	69 a9       	ldd	r22, Y+49	; 0x31
    2dc0:	7a a9       	ldd	r23, Y+50	; 0x32
    2dc2:	8b a9       	ldd	r24, Y+51	; 0x33
    2dc4:	9c a9       	ldd	r25, Y+52	; 0x34
    2dc6:	20 e0       	ldi	r18, 0x00	; 0
    2dc8:	30 e0       	ldi	r19, 0x00	; 0
    2dca:	40 e8       	ldi	r20, 0x80	; 128
    2dcc:	5f e3       	ldi	r21, 0x3F	; 63
    2dce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2dd2:	88 23       	and	r24, r24
    2dd4:	2c f4       	brge	.+10     	; 0x2de0 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	98 ab       	std	Y+48, r25	; 0x30
    2ddc:	8f a7       	std	Y+47, r24	; 0x2f
    2dde:	3f c0       	rjmp	.+126    	; 0x2e5e <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2de0:	69 a9       	ldd	r22, Y+49	; 0x31
    2de2:	7a a9       	ldd	r23, Y+50	; 0x32
    2de4:	8b a9       	ldd	r24, Y+51	; 0x33
    2de6:	9c a9       	ldd	r25, Y+52	; 0x34
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	3f ef       	ldi	r19, 0xFF	; 255
    2dec:	4f e7       	ldi	r20, 0x7F	; 127
    2dee:	57 e4       	ldi	r21, 0x47	; 71
    2df0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2df4:	18 16       	cp	r1, r24
    2df6:	4c f5       	brge	.+82     	; 0x2e4a <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2df8:	6d a9       	ldd	r22, Y+53	; 0x35
    2dfa:	7e a9       	ldd	r23, Y+54	; 0x36
    2dfc:	8f a9       	ldd	r24, Y+55	; 0x37
    2dfe:	98 ad       	ldd	r25, Y+56	; 0x38
    2e00:	20 e0       	ldi	r18, 0x00	; 0
    2e02:	30 e0       	ldi	r19, 0x00	; 0
    2e04:	40 e2       	ldi	r20, 0x20	; 32
    2e06:	51 e4       	ldi	r21, 0x41	; 65
    2e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e0c:	dc 01       	movw	r26, r24
    2e0e:	cb 01       	movw	r24, r22
    2e10:	bc 01       	movw	r22, r24
    2e12:	cd 01       	movw	r24, r26
    2e14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e18:	dc 01       	movw	r26, r24
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	98 ab       	std	Y+48, r25	; 0x30
    2e1e:	8f a7       	std	Y+47, r24	; 0x2f
    2e20:	0f c0       	rjmp	.+30     	; 0x2e40 <LCD_displayCharacter+0x56a>
    2e22:	88 ec       	ldi	r24, 0xC8	; 200
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9e a7       	std	Y+46, r25	; 0x2e
    2e28:	8d a7       	std	Y+45, r24	; 0x2d
    2e2a:	8d a5       	ldd	r24, Y+45	; 0x2d
    2e2c:	9e a5       	ldd	r25, Y+46	; 0x2e
    2e2e:	01 97       	sbiw	r24, 0x01	; 1
    2e30:	f1 f7       	brne	.-4      	; 0x2e2e <LCD_displayCharacter+0x558>
    2e32:	9e a7       	std	Y+46, r25	; 0x2e
    2e34:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e36:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e38:	98 a9       	ldd	r25, Y+48	; 0x30
    2e3a:	01 97       	sbiw	r24, 0x01	; 1
    2e3c:	98 ab       	std	Y+48, r25	; 0x30
    2e3e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e40:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e42:	98 a9       	ldd	r25, Y+48	; 0x30
    2e44:	00 97       	sbiw	r24, 0x00	; 0
    2e46:	69 f7       	brne	.-38     	; 0x2e22 <LCD_displayCharacter+0x54c>
    2e48:	14 c0       	rjmp	.+40     	; 0x2e72 <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e4a:	69 a9       	ldd	r22, Y+49	; 0x31
    2e4c:	7a a9       	ldd	r23, Y+50	; 0x32
    2e4e:	8b a9       	ldd	r24, Y+51	; 0x33
    2e50:	9c a9       	ldd	r25, Y+52	; 0x34
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	98 ab       	std	Y+48, r25	; 0x30
    2e5c:	8f a7       	std	Y+47, r24	; 0x2f
    2e5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e60:	98 a9       	ldd	r25, Y+48	; 0x30
    2e62:	9c a7       	std	Y+44, r25	; 0x2c
    2e64:	8b a7       	std	Y+43, r24	; 0x2b
    2e66:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e68:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <LCD_displayCharacter+0x594>
    2e6e:	9c a7       	std	Y+44, r25	; 0x2c
    2e70:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(1);
		GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_HIGH); /* Enable LCD */
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	61 e0       	ldi	r22, 0x01	; 1
    2e76:	41 e0       	ldi	r20, 0x01	; 1
    2e78:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a0 e8       	ldi	r26, 0x80	; 128
    2e82:	bf e3       	ldi	r27, 0x3F	; 63
    2e84:	8f a3       	std	Y+39, r24	; 0x27
    2e86:	98 a7       	std	Y+40, r25	; 0x28
    2e88:	a9 a7       	std	Y+41, r26	; 0x29
    2e8a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	6f a1       	ldd	r22, Y+39	; 0x27
    2e8e:	78 a5       	ldd	r23, Y+40	; 0x28
    2e90:	89 a5       	ldd	r24, Y+41	; 0x29
    2e92:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a ef       	ldi	r20, 0xFA	; 250
    2e9a:	54 e4       	ldi	r21, 0x44	; 68
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	8b a3       	std	Y+35, r24	; 0x23
    2ea6:	9c a3       	std	Y+36, r25	; 0x24
    2ea8:	ad a3       	std	Y+37, r26	; 0x25
    2eaa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2eac:	6b a1       	ldd	r22, Y+35	; 0x23
    2eae:	7c a1       	ldd	r23, Y+36	; 0x24
    2eb0:	8d a1       	ldd	r24, Y+37	; 0x25
    2eb2:	9e a1       	ldd	r25, Y+38	; 0x26
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e8       	ldi	r20, 0x80	; 128
    2eba:	5f e3       	ldi	r21, 0x3F	; 63
    2ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec0:	88 23       	and	r24, r24
    2ec2:	2c f4       	brge	.+10     	; 0x2ece <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	9a a3       	std	Y+34, r25	; 0x22
    2eca:	89 a3       	std	Y+33, r24	; 0x21
    2ecc:	3f c0       	rjmp	.+126    	; 0x2f4c <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2ece:	6b a1       	ldd	r22, Y+35	; 0x23
    2ed0:	7c a1       	ldd	r23, Y+36	; 0x24
    2ed2:	8d a1       	ldd	r24, Y+37	; 0x25
    2ed4:	9e a1       	ldd	r25, Y+38	; 0x26
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	4f e7       	ldi	r20, 0x7F	; 127
    2edc:	57 e4       	ldi	r21, 0x47	; 71
    2ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee2:	18 16       	cp	r1, r24
    2ee4:	4c f5       	brge	.+82     	; 0x2f38 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ee8:	78 a5       	ldd	r23, Y+40	; 0x28
    2eea:	89 a5       	ldd	r24, Y+41	; 0x29
    2eec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9a a3       	std	Y+34, r25	; 0x22
    2f0c:	89 a3       	std	Y+33, r24	; 0x21
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <LCD_displayCharacter+0x658>
    2f10:	88 ec       	ldi	r24, 0xC8	; 200
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	98 a3       	std	Y+32, r25	; 0x20
    2f16:	8f 8f       	std	Y+31, r24	; 0x1f
    2f18:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2f1a:	98 a1       	ldd	r25, Y+32	; 0x20
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <LCD_displayCharacter+0x646>
    2f20:	98 a3       	std	Y+32, r25	; 0x20
    2f22:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f24:	89 a1       	ldd	r24, Y+33	; 0x21
    2f26:	9a a1       	ldd	r25, Y+34	; 0x22
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	9a a3       	std	Y+34, r25	; 0x22
    2f2c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2e:	89 a1       	ldd	r24, Y+33	; 0x21
    2f30:	9a a1       	ldd	r25, Y+34	; 0x22
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	69 f7       	brne	.-38     	; 0x2f10 <LCD_displayCharacter+0x63a>
    2f36:	14 c0       	rjmp	.+40     	; 0x2f60 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	6b a1       	ldd	r22, Y+35	; 0x23
    2f3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2f3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2f3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9a a3       	std	Y+34, r25	; 0x22
    2f4a:	89 a3       	std	Y+33, r24	; 0x21
    2f4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2f4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2f50:	9e 8f       	std	Y+30, r25	; 0x1e
    2f52:	8d 8f       	std	Y+29, r24	; 0x1d
    2f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <LCD_displayCharacter+0x682>
    2f5c:	9e 8f       	std	Y+30, r25	; 0x1e
    2f5e:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(1);

		/* Sending the FIRST four BITS */
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D4_PIN , GET_BIT(data,0));
    2f60:	fe 01       	movw	r30, r28
    2f62:	ed 59       	subi	r30, 0x9D	; 157
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	98 2f       	mov	r25, r24
    2f6a:	91 70       	andi	r25, 0x01	; 1
    2f6c:	80 e0       	ldi	r24, 0x00	; 0
    2f6e:	64 e0       	ldi	r22, 0x04	; 4
    2f70:	49 2f       	mov	r20, r25
    2f72:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D5_PIN , GET_BIT(data,1));
    2f76:	fe 01       	movw	r30, r28
    2f78:	ed 59       	subi	r30, 0x9D	; 157
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	80 81       	ld	r24, Z
    2f7e:	88 2f       	mov	r24, r24
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	82 70       	andi	r24, 0x02	; 2
    2f84:	90 70       	andi	r25, 0x00	; 0
    2f86:	95 95       	asr	r25
    2f88:	87 95       	ror	r24
    2f8a:	98 2f       	mov	r25, r24
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	65 e0       	ldi	r22, 0x05	; 5
    2f90:	49 2f       	mov	r20, r25
    2f92:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D6_PIN , GET_BIT(data,2));
    2f96:	fe 01       	movw	r30, r28
    2f98:	ed 59       	subi	r30, 0x9D	; 157
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	80 81       	ld	r24, Z
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	84 70       	andi	r24, 0x04	; 4
    2fa4:	90 70       	andi	r25, 0x00	; 0
    2fa6:	95 95       	asr	r25
    2fa8:	87 95       	ror	r24
    2faa:	95 95       	asr	r25
    2fac:	87 95       	ror	r24
    2fae:	98 2f       	mov	r25, r24
    2fb0:	80 e0       	ldi	r24, 0x00	; 0
    2fb2:	66 e0       	ldi	r22, 0x06	; 6
    2fb4:	49 2f       	mov	r20, r25
    2fb6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
		GPIO_writePin(LCD_OUTPUT_PORT, LCD_D7_PIN , GET_BIT(data,3));
    2fba:	fe 01       	movw	r30, r28
    2fbc:	ed 59       	subi	r30, 0x9D	; 157
    2fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    2fc0:	80 81       	ld	r24, Z
    2fc2:	88 2f       	mov	r24, r24
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	88 70       	andi	r24, 0x08	; 8
    2fc8:	90 70       	andi	r25, 0x00	; 0
    2fca:	95 95       	asr	r25
    2fcc:	87 95       	ror	r24
    2fce:	95 95       	asr	r25
    2fd0:	87 95       	ror	r24
    2fd2:	95 95       	asr	r25
    2fd4:	87 95       	ror	r24
    2fd6:	98 2f       	mov	r25, r24
    2fd8:	80 e0       	ldi	r24, 0x00	; 0
    2fda:	67 e0       	ldi	r22, 0x07	; 7
    2fdc:	49 2f       	mov	r20, r25
    2fde:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    2fe2:	80 e0       	ldi	r24, 0x00	; 0
    2fe4:	90 e0       	ldi	r25, 0x00	; 0
    2fe6:	a0 e8       	ldi	r26, 0x80	; 128
    2fe8:	bf e3       	ldi	r27, 0x3F	; 63
    2fea:	89 8f       	std	Y+25, r24	; 0x19
    2fec:	9a 8f       	std	Y+26, r25	; 0x1a
    2fee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ff0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ff2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ff4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ff6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ff8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ffa:	20 e0       	ldi	r18, 0x00	; 0
    2ffc:	30 e0       	ldi	r19, 0x00	; 0
    2ffe:	4a ef       	ldi	r20, 0xFA	; 250
    3000:	54 e4       	ldi	r21, 0x44	; 68
    3002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3006:	dc 01       	movw	r26, r24
    3008:	cb 01       	movw	r24, r22
    300a:	8d 8b       	std	Y+21, r24	; 0x15
    300c:	9e 8b       	std	Y+22, r25	; 0x16
    300e:	af 8b       	std	Y+23, r26	; 0x17
    3010:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3012:	6d 89       	ldd	r22, Y+21	; 0x15
    3014:	7e 89       	ldd	r23, Y+22	; 0x16
    3016:	8f 89       	ldd	r24, Y+23	; 0x17
    3018:	98 8d       	ldd	r25, Y+24	; 0x18
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	40 e8       	ldi	r20, 0x80	; 128
    3020:	5f e3       	ldi	r21, 0x3F	; 63
    3022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3026:	88 23       	and	r24, r24
    3028:	2c f4       	brge	.+10     	; 0x3034 <LCD_displayCharacter+0x75e>
		__ticks = 1;
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	9c 8b       	std	Y+20, r25	; 0x14
    3030:	8b 8b       	std	Y+19, r24	; 0x13
    3032:	3f c0       	rjmp	.+126    	; 0x30b2 <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    3034:	6d 89       	ldd	r22, Y+21	; 0x15
    3036:	7e 89       	ldd	r23, Y+22	; 0x16
    3038:	8f 89       	ldd	r24, Y+23	; 0x17
    303a:	98 8d       	ldd	r25, Y+24	; 0x18
    303c:	20 e0       	ldi	r18, 0x00	; 0
    303e:	3f ef       	ldi	r19, 0xFF	; 255
    3040:	4f e7       	ldi	r20, 0x7F	; 127
    3042:	57 e4       	ldi	r21, 0x47	; 71
    3044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3048:	18 16       	cp	r1, r24
    304a:	4c f5       	brge	.+82     	; 0x309e <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    304c:	69 8d       	ldd	r22, Y+25	; 0x19
    304e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3050:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3052:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3054:	20 e0       	ldi	r18, 0x00	; 0
    3056:	30 e0       	ldi	r19, 0x00	; 0
    3058:	40 e2       	ldi	r20, 0x20	; 32
    305a:	51 e4       	ldi	r21, 0x41	; 65
    305c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3060:	dc 01       	movw	r26, r24
    3062:	cb 01       	movw	r24, r22
    3064:	bc 01       	movw	r22, r24
    3066:	cd 01       	movw	r24, r26
    3068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	9c 8b       	std	Y+20, r25	; 0x14
    3072:	8b 8b       	std	Y+19, r24	; 0x13
    3074:	0f c0       	rjmp	.+30     	; 0x3094 <LCD_displayCharacter+0x7be>
    3076:	88 ec       	ldi	r24, 0xC8	; 200
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	9a 8b       	std	Y+18, r25	; 0x12
    307c:	89 8b       	std	Y+17, r24	; 0x11
    307e:	89 89       	ldd	r24, Y+17	; 0x11
    3080:	9a 89       	ldd	r25, Y+18	; 0x12
    3082:	01 97       	sbiw	r24, 0x01	; 1
    3084:	f1 f7       	brne	.-4      	; 0x3082 <LCD_displayCharacter+0x7ac>
    3086:	9a 8b       	std	Y+18, r25	; 0x12
    3088:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    308a:	8b 89       	ldd	r24, Y+19	; 0x13
    308c:	9c 89       	ldd	r25, Y+20	; 0x14
    308e:	01 97       	sbiw	r24, 0x01	; 1
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	00 97       	sbiw	r24, 0x00	; 0
    309a:	69 f7       	brne	.-38     	; 0x3076 <LCD_displayCharacter+0x7a0>
    309c:	14 c0       	rjmp	.+40     	; 0x30c6 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    309e:	6d 89       	ldd	r22, Y+21	; 0x15
    30a0:	7e 89       	ldd	r23, Y+22	; 0x16
    30a2:	8f 89       	ldd	r24, Y+23	; 0x17
    30a4:	98 8d       	ldd	r25, Y+24	; 0x18
    30a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30aa:	dc 01       	movw	r26, r24
    30ac:	cb 01       	movw	r24, r22
    30ae:	9c 8b       	std	Y+20, r25	; 0x14
    30b0:	8b 8b       	std	Y+19, r24	; 0x13
    30b2:	8b 89       	ldd	r24, Y+19	; 0x13
    30b4:	9c 89       	ldd	r25, Y+20	; 0x14
    30b6:	98 8b       	std	Y+16, r25	; 0x10
    30b8:	8f 87       	std	Y+15, r24	; 0x0f
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	f1 f7       	brne	.-4      	; 0x30be <LCD_displayCharacter+0x7e8>
    30c2:	98 8b       	std	Y+16, r25	; 0x10
    30c4:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
	}
#endif

	GPIO_writePin(LCD_EN_PORT, LCD_EN_PIN, LOGIC_LOW); /* Activating the LCD */
    30c6:	80 e0       	ldi	r24, 0x00	; 0
    30c8:	61 e0       	ldi	r22, 0x01	; 1
    30ca:	40 e0       	ldi	r20, 0x00	; 0
    30cc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    30d0:	80 e0       	ldi	r24, 0x00	; 0
    30d2:	90 e0       	ldi	r25, 0x00	; 0
    30d4:	a0 e8       	ldi	r26, 0x80	; 128
    30d6:	bf e3       	ldi	r27, 0x3F	; 63
    30d8:	8b 87       	std	Y+11, r24	; 0x0b
    30da:	9c 87       	std	Y+12, r25	; 0x0c
    30dc:	ad 87       	std	Y+13, r26	; 0x0d
    30de:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    30e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    30e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    30e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    30e8:	20 e0       	ldi	r18, 0x00	; 0
    30ea:	30 e0       	ldi	r19, 0x00	; 0
    30ec:	4a ef       	ldi	r20, 0xFA	; 250
    30ee:	54 e4       	ldi	r21, 0x44	; 68
    30f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30f4:	dc 01       	movw	r26, r24
    30f6:	cb 01       	movw	r24, r22
    30f8:	8f 83       	std	Y+7, r24	; 0x07
    30fa:	98 87       	std	Y+8, r25	; 0x08
    30fc:	a9 87       	std	Y+9, r26	; 0x09
    30fe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3100:	6f 81       	ldd	r22, Y+7	; 0x07
    3102:	78 85       	ldd	r23, Y+8	; 0x08
    3104:	89 85       	ldd	r24, Y+9	; 0x09
    3106:	9a 85       	ldd	r25, Y+10	; 0x0a
    3108:	20 e0       	ldi	r18, 0x00	; 0
    310a:	30 e0       	ldi	r19, 0x00	; 0
    310c:	40 e8       	ldi	r20, 0x80	; 128
    310e:	5f e3       	ldi	r21, 0x3F	; 63
    3110:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3114:	88 23       	and	r24, r24
    3116:	2c f4       	brge	.+10     	; 0x3122 <LCD_displayCharacter+0x84c>
		__ticks = 1;
    3118:	81 e0       	ldi	r24, 0x01	; 1
    311a:	90 e0       	ldi	r25, 0x00	; 0
    311c:	9e 83       	std	Y+6, r25	; 0x06
    311e:	8d 83       	std	Y+5, r24	; 0x05
    3120:	3f c0       	rjmp	.+126    	; 0x31a0 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    3122:	6f 81       	ldd	r22, Y+7	; 0x07
    3124:	78 85       	ldd	r23, Y+8	; 0x08
    3126:	89 85       	ldd	r24, Y+9	; 0x09
    3128:	9a 85       	ldd	r25, Y+10	; 0x0a
    312a:	20 e0       	ldi	r18, 0x00	; 0
    312c:	3f ef       	ldi	r19, 0xFF	; 255
    312e:	4f e7       	ldi	r20, 0x7F	; 127
    3130:	57 e4       	ldi	r21, 0x47	; 71
    3132:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3136:	18 16       	cp	r1, r24
    3138:	4c f5       	brge	.+82     	; 0x318c <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    313a:	6b 85       	ldd	r22, Y+11	; 0x0b
    313c:	7c 85       	ldd	r23, Y+12	; 0x0c
    313e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3140:	9e 85       	ldd	r25, Y+14	; 0x0e
    3142:	20 e0       	ldi	r18, 0x00	; 0
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	40 e2       	ldi	r20, 0x20	; 32
    3148:	51 e4       	ldi	r21, 0x41	; 65
    314a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	bc 01       	movw	r22, r24
    3154:	cd 01       	movw	r24, r26
    3156:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    315a:	dc 01       	movw	r26, r24
    315c:	cb 01       	movw	r24, r22
    315e:	9e 83       	std	Y+6, r25	; 0x06
    3160:	8d 83       	std	Y+5, r24	; 0x05
    3162:	0f c0       	rjmp	.+30     	; 0x3182 <LCD_displayCharacter+0x8ac>
    3164:	88 ec       	ldi	r24, 0xC8	; 200
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	9c 83       	std	Y+4, r25	; 0x04
    316a:	8b 83       	std	Y+3, r24	; 0x03
    316c:	8b 81       	ldd	r24, Y+3	; 0x03
    316e:	9c 81       	ldd	r25, Y+4	; 0x04
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	f1 f7       	brne	.-4      	; 0x3170 <LCD_displayCharacter+0x89a>
    3174:	9c 83       	std	Y+4, r25	; 0x04
    3176:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3178:	8d 81       	ldd	r24, Y+5	; 0x05
    317a:	9e 81       	ldd	r25, Y+6	; 0x06
    317c:	01 97       	sbiw	r24, 0x01	; 1
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3182:	8d 81       	ldd	r24, Y+5	; 0x05
    3184:	9e 81       	ldd	r25, Y+6	; 0x06
    3186:	00 97       	sbiw	r24, 0x00	; 0
    3188:	69 f7       	brne	.-38     	; 0x3164 <LCD_displayCharacter+0x88e>
    318a:	14 c0       	rjmp	.+40     	; 0x31b4 <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    318c:	6f 81       	ldd	r22, Y+7	; 0x07
    318e:	78 85       	ldd	r23, Y+8	; 0x08
    3190:	89 85       	ldd	r24, Y+9	; 0x09
    3192:	9a 85       	ldd	r25, Y+10	; 0x0a
    3194:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3198:	dc 01       	movw	r26, r24
    319a:	cb 01       	movw	r24, r22
    319c:	9e 83       	std	Y+6, r25	; 0x06
    319e:	8d 83       	std	Y+5, r24	; 0x05
    31a0:	8d 81       	ldd	r24, Y+5	; 0x05
    31a2:	9e 81       	ldd	r25, Y+6	; 0x06
    31a4:	9a 83       	std	Y+2, r25	; 0x02
    31a6:	89 83       	std	Y+1, r24	; 0x01
    31a8:	89 81       	ldd	r24, Y+1	; 0x01
    31aa:	9a 81       	ldd	r25, Y+2	; 0x02
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	f1 f7       	brne	.-4      	; 0x31ac <LCD_displayCharacter+0x8d6>
    31b0:	9a 83       	std	Y+2, r25	; 0x02
    31b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    31b4:	cd 59       	subi	r28, 0x9D	; 157
    31b6:	df 4f       	sbci	r29, 0xFF	; 255
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	de bf       	out	0x3e, r29	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	cd bf       	out	0x3d, r28	; 61
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	1f 91       	pop	r17
    31c8:	0f 91       	pop	r16
    31ca:	08 95       	ret

000031cc <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    31cc:	df 93       	push	r29
    31ce:	cf 93       	push	r28
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <LCD_displayString+0x6>
    31d2:	0f 92       	push	r0
    31d4:	cd b7       	in	r28, 0x3d	; 61
    31d6:	de b7       	in	r29, 0x3e	; 62
    31d8:	9b 83       	std	Y+3, r25	; 0x03
    31da:	8a 83       	std	Y+2, r24	; 0x02
	uint8 a_stringCounter = 0; /* Counting the array of chars */
    31dc:	19 82       	std	Y+1, r1	; 0x01
    31de:	0e c0       	rjmp	.+28     	; 0x31fc <LCD_displayString+0x30>

	while(Str[a_stringCounter] != '\0')
	{
		LCD_displayCharacter(Str[a_stringCounter]);
    31e0:	89 81       	ldd	r24, Y+1	; 0x01
    31e2:	28 2f       	mov	r18, r24
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	9b 81       	ldd	r25, Y+3	; 0x03
    31ea:	fc 01       	movw	r30, r24
    31ec:	e2 0f       	add	r30, r18
    31ee:	f3 1f       	adc	r31, r19
    31f0:	80 81       	ld	r24, Z
    31f2:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_displayCharacter>
		a_stringCounter++;
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	8f 5f       	subi	r24, 0xFF	; 255
    31fa:	89 83       	std	Y+1, r24	; 0x01
 */
void LCD_displayString(const char *Str)
{
	uint8 a_stringCounter = 0; /* Counting the array of chars */

	while(Str[a_stringCounter] != '\0')
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	8a 81       	ldd	r24, Y+2	; 0x02
    3204:	9b 81       	ldd	r25, Y+3	; 0x03
    3206:	fc 01       	movw	r30, r24
    3208:	e2 0f       	add	r30, r18
    320a:	f3 1f       	adc	r31, r19
    320c:	80 81       	ld	r24, Z
    320e:	88 23       	and	r24, r24
    3210:	39 f7       	brne	.-50     	; 0x31e0 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[a_stringCounter]);
		a_stringCounter++;
	}
}
    3212:	0f 90       	pop	r0
    3214:	0f 90       	pop	r0
    3216:	0f 90       	pop	r0
    3218:	cf 91       	pop	r28
    321a:	df 91       	pop	r29
    321c:	08 95       	ret

0000321e <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    321e:	df 93       	push	r29
    3220:	cf 93       	push	r28
    3222:	00 d0       	rcall	.+0      	; 0x3224 <LCD_moveCursor+0x6>
    3224:	00 d0       	rcall	.+0      	; 0x3226 <LCD_moveCursor+0x8>
    3226:	0f 92       	push	r0
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
    322c:	8a 83       	std	Y+2, r24	; 0x02
    322e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 a_lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    3230:	8a 81       	ldd	r24, Y+2	; 0x02
    3232:	28 2f       	mov	r18, r24
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	3d 83       	std	Y+5, r19	; 0x05
    3238:	2c 83       	std	Y+4, r18	; 0x04
    323a:	8c 81       	ldd	r24, Y+4	; 0x04
    323c:	9d 81       	ldd	r25, Y+5	; 0x05
    323e:	81 30       	cpi	r24, 0x01	; 1
    3240:	91 05       	cpc	r25, r1
    3242:	c1 f0       	breq	.+48     	; 0x3274 <LCD_moveCursor+0x56>
    3244:	2c 81       	ldd	r18, Y+4	; 0x04
    3246:	3d 81       	ldd	r19, Y+5	; 0x05
    3248:	22 30       	cpi	r18, 0x02	; 2
    324a:	31 05       	cpc	r19, r1
    324c:	2c f4       	brge	.+10     	; 0x3258 <LCD_moveCursor+0x3a>
    324e:	8c 81       	ldd	r24, Y+4	; 0x04
    3250:	9d 81       	ldd	r25, Y+5	; 0x05
    3252:	00 97       	sbiw	r24, 0x00	; 0
    3254:	61 f0       	breq	.+24     	; 0x326e <LCD_moveCursor+0x50>
    3256:	19 c0       	rjmp	.+50     	; 0x328a <LCD_moveCursor+0x6c>
    3258:	2c 81       	ldd	r18, Y+4	; 0x04
    325a:	3d 81       	ldd	r19, Y+5	; 0x05
    325c:	22 30       	cpi	r18, 0x02	; 2
    325e:	31 05       	cpc	r19, r1
    3260:	69 f0       	breq	.+26     	; 0x327c <LCD_moveCursor+0x5e>
    3262:	8c 81       	ldd	r24, Y+4	; 0x04
    3264:	9d 81       	ldd	r25, Y+5	; 0x05
    3266:	83 30       	cpi	r24, 0x03	; 3
    3268:	91 05       	cpc	r25, r1
    326a:	61 f0       	breq	.+24     	; 0x3284 <LCD_moveCursor+0x66>
    326c:	0e c0       	rjmp	.+28     	; 0x328a <LCD_moveCursor+0x6c>
	{
	case 0:
		a_lcd_memory_address=col;
    326e:	8b 81       	ldd	r24, Y+3	; 0x03
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	0b c0       	rjmp	.+22     	; 0x328a <LCD_moveCursor+0x6c>
		break;
	case 1:
		a_lcd_memory_address=col+0x40;
    3274:	8b 81       	ldd	r24, Y+3	; 0x03
    3276:	80 5c       	subi	r24, 0xC0	; 192
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	07 c0       	rjmp	.+14     	; 0x328a <LCD_moveCursor+0x6c>
		break;
	case 2:
		a_lcd_memory_address=col+0x10;
    327c:	8b 81       	ldd	r24, Y+3	; 0x03
    327e:	80 5f       	subi	r24, 0xF0	; 240
    3280:	89 83       	std	Y+1, r24	; 0x01
    3282:	03 c0       	rjmp	.+6      	; 0x328a <LCD_moveCursor+0x6c>
		break;
	case 3:
		a_lcd_memory_address=col+0x50;
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	80 5b       	subi	r24, 0xB0	; 176
    3288:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(a_lcd_memory_address | START_AT_FIRST_LINE);
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	80 68       	ori	r24, 0x80	; 128
    328e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
}
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	0f 90       	pop	r0
    329a:	0f 90       	pop	r0
    329c:	cf 91       	pop	r28
    329e:	df 91       	pop	r29
    32a0:	08 95       	ret

000032a2 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    32a2:	df 93       	push	r29
    32a4:	cf 93       	push	r28
    32a6:	00 d0       	rcall	.+0      	; 0x32a8 <LCD_displayStringRowColumn+0x6>
    32a8:	00 d0       	rcall	.+0      	; 0x32aa <LCD_displayStringRowColumn+0x8>
    32aa:	cd b7       	in	r28, 0x3d	; 61
    32ac:	de b7       	in	r29, 0x3e	; 62
    32ae:	89 83       	std	Y+1, r24	; 0x01
    32b0:	6a 83       	std	Y+2, r22	; 0x02
    32b2:	5c 83       	std	Y+4, r21	; 0x04
    32b4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	6a 81       	ldd	r22, Y+2	; 0x02
    32ba:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    32be:	8b 81       	ldd	r24, Y+3	; 0x03
    32c0:	9c 81       	ldd	r25, Y+4	; 0x04
    32c2:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
}
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <LCD_displayCharRowColumn>:
/*
 * Description :
 * Display the required Char in a specified row and column index on the screen
 */
void LCD_displayCharRowColumn(uint8 row,uint8 col,uint8 data)
{
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	00 d0       	rcall	.+0      	; 0x32da <LCD_displayCharRowColumn+0x6>
    32da:	0f 92       	push	r0
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	89 83       	std	Y+1, r24	; 0x01
    32e2:	6a 83       	std	Y+2, r22	; 0x02
    32e4:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	6a 81       	ldd	r22, Y+2	; 0x02
    32ea:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_displayCharacter(data); /* display the string */
    32ee:	8b 81       	ldd	r24, Y+3	; 0x03
    32f0:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_displayCharacter>
}
    32f4:	0f 90       	pop	r0
    32f6:	0f 90       	pop	r0
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	cd b7       	in	r28, 0x3d	; 61
    3306:	de b7       	in	r29, 0x3e	; 62
    3308:	62 97       	sbiw	r28, 0x12	; 18
    330a:	0f b6       	in	r0, 0x3f	; 63
    330c:	f8 94       	cli
    330e:	de bf       	out	0x3e, r29	; 62
    3310:	0f be       	out	0x3f, r0	; 63
    3312:	cd bf       	out	0x3d, r28	; 61
    3314:	9a 8b       	std	Y+18, r25	; 0x12
    3316:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; 				/* String to hold the ascii result */
	itoa(data,buff,10); 		/* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3318:	89 89       	ldd	r24, Y+17	; 0x11
    331a:	9a 89       	ldd	r25, Y+18	; 0x12
    331c:	9e 01       	movw	r18, r28
    331e:	2f 5f       	subi	r18, 0xFF	; 255
    3320:	3f 4f       	sbci	r19, 0xFF	; 255
    3322:	b9 01       	movw	r22, r18
    3324:	4a e0       	ldi	r20, 0x0A	; 10
    3326:	50 e0       	ldi	r21, 0x00	; 0
    3328:	0e 94 42 2b 	call	0x5684	; 0x5684 <itoa>
	LCD_displayString(buff); 	/* Display the string */
    332c:	ce 01       	movw	r24, r28
    332e:	01 96       	adiw	r24, 0x01	; 1
    3330:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
}
    3334:	62 96       	adiw	r28, 0x12	; 18
    3336:	0f b6       	in	r0, 0x3f	; 63
    3338:	f8 94       	cli
    333a:	de bf       	out	0x3e, r29	; 62
    333c:	0f be       	out	0x3f, r0	; 63
    333e:	cd bf       	out	0x3d, r28	; 61
    3340:	cf 91       	pop	r28
    3342:	df 91       	pop	r29
    3344:	08 95       	ret

00003346 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3346:	df 93       	push	r29
    3348:	cf 93       	push	r28
    334a:	cd b7       	in	r28, 0x3d	; 61
    334c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLR_DISPLAY);
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <LCD_sendCommand>
}
    3354:	cf 91       	pop	r28
    3356:	df 91       	pop	r29
    3358:	08 95       	ret

0000335a <Stepper_Motor_init>:
/*
 * Description:
 * Initializing Stepper Motor
 */
void Stepper_Motor_init()
{
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
	/* Initialize stepper motor pins as outputs */
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, PIN_OUTPUT);
    3362:	82 e0       	ldi	r24, 0x02	; 2
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	41 e0       	ldi	r20, 0x01	; 1
    3368:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, PIN_OUTPUT);
    336c:	82 e0       	ldi	r24, 0x02	; 2
    336e:	61 e0       	ldi	r22, 0x01	; 1
    3370:	41 e0       	ldi	r20, 0x01	; 1
    3372:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, PIN_OUTPUT);
    3376:	82 e0       	ldi	r24, 0x02	; 2
    3378:	62 e0       	ldi	r22, 0x02	; 2
    337a:	41 e0       	ldi	r20, 0x01	; 1
    337c:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, PIN_OUTPUT);
    3380:	82 e0       	ldi	r24, 0x02	; 2
    3382:	63 e0       	ldi	r22, 0x03	; 3
    3384:	41 e0       	ldi	r20, 0x01	; 1
    3386:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Enable Pins direction */
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, PIN_OUTPUT);
    338a:	82 e0       	ldi	r24, 0x02	; 2
    338c:	66 e0       	ldi	r22, 0x06	; 6
    338e:	41 e0       	ldi	r20, 0x01	; 1
    3390:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, PIN_OUTPUT);
    3394:	82 e0       	ldi	r24, 0x02	; 2
    3396:	67 e0       	ldi	r22, 0x07	; 7
    3398:	41 e0       	ldi	r20, 0x01	; 1
    339a:	0e 94 a3 05 	call	0xb46	; 0xb46 <GPIO_setupPinDirection>

	/* Disable stepper motor */
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, LOGIC_LOW);
    339e:	82 e0       	ldi	r24, 0x02	; 2
    33a0:	66 e0       	ldi	r22, 0x06	; 6
    33a2:	40 e0       	ldi	r20, 0x00	; 0
    33a4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, LOGIC_LOW);
    33a8:	82 e0       	ldi	r24, 0x02	; 2
    33aa:	67 e0       	ldi	r22, 0x07	; 7
    33ac:	40 e0       	ldi	r20, 0x00	; 0
    33ae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	08 95       	ret

000033b8 <stepper_rotate>:
/*
 * Description:
 * Step the motor in a given direction
 */
void stepper_rotate(Stepper_Motor_State direction, sint8 angle,sint8 current_angle)
{
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	c1 50       	subi	r28, 0x01	; 1
    33c6:	d1 40       	sbci	r29, 0x01	; 1
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	fe 01       	movw	r30, r28
    33d4:	e1 50       	subi	r30, 0x01	; 1
    33d6:	ff 4f       	sbci	r31, 0xFF	; 255
    33d8:	80 83       	st	Z, r24
    33da:	fe 01       	movw	r30, r28
    33dc:	e0 50       	subi	r30, 0x00	; 0
    33de:	ff 4f       	sbci	r31, 0xFF	; 255
    33e0:	60 83       	st	Z, r22
    33e2:	fe 01       	movw	r30, r28
    33e4:	ef 5f       	subi	r30, 0xFF	; 255
    33e6:	fe 4f       	sbci	r31, 0xFE	; 254
    33e8:	40 83       	st	Z, r20

	/**-----------------------Local Variables----------------------**/
	uint8 counter = 0; /* Counter for the FOR loop */
    33ea:	fe 01       	movw	r30, r28
    33ec:	e2 50       	subi	r30, 0x02	; 2
    33ee:	ff 4f       	sbci	r31, 0xFF	; 255
    33f0:	10 82       	st	Z, r1
	sint8 actual_step = 0; /* Based on the current angle */
    33f2:	fe 01       	movw	r30, r28
    33f4:	e3 50       	subi	r30, 0x03	; 3
    33f6:	ff 4f       	sbci	r31, 0xFF	; 255
    33f8:	10 82       	st	Z, r1

	/**-----------------------Main Section-------------------------**/

	/* Activate the motor */
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, LOGIC_HIGH);
    33fa:	82 e0       	ldi	r24, 0x02	; 2
    33fc:	66 e0       	ldi	r22, 0x06	; 6
    33fe:	41 e0       	ldi	r20, 0x01	; 1
    3400:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, LOGIC_HIGH);
    3404:	82 e0       	ldi	r24, 0x02	; 2
    3406:	67 e0       	ldi	r22, 0x07	; 7
    3408:	41 e0       	ldi	r20, 0x01	; 1
    340a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>

	/** Calculation the number of steps needed based on the current angle **/
	if(Right_Direction == direction)
    340e:	fe 01       	movw	r30, r28
    3410:	e1 50       	subi	r30, 0x01	; 1
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 81       	ld	r24, Z
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	19 f5       	brne	.+70     	; 0x3460 <stepper_rotate+0xa8>
	{
		/* Calculate the steps needed */
		actual_step = angle - current_angle;
    341a:	fe 01       	movw	r30, r28
    341c:	e0 50       	subi	r30, 0x00	; 0
    341e:	ff 4f       	sbci	r31, 0xFF	; 255
    3420:	90 81       	ld	r25, Z
    3422:	fe 01       	movw	r30, r28
    3424:	ef 5f       	subi	r30, 0xFF	; 255
    3426:	fe 4f       	sbci	r31, 0xFE	; 254
    3428:	80 81       	ld	r24, Z
    342a:	29 2f       	mov	r18, r25
    342c:	28 1b       	sub	r18, r24
    342e:	82 2f       	mov	r24, r18
    3430:	fe 01       	movw	r30, r28
    3432:	e3 50       	subi	r30, 0x03	; 3
    3434:	ff 4f       	sbci	r31, 0xFF	; 255
    3436:	80 83       	st	Z, r24

		if(actual_step < 0) /* If the result was negative then rotate left else rotate right */
    3438:	fe 01       	movw	r30, r28
    343a:	e3 50       	subi	r30, 0x03	; 3
    343c:	ff 4f       	sbci	r31, 0xFF	; 255
    343e:	80 81       	ld	r24, Z
    3440:	88 23       	and	r24, r24
    3442:	a4 f5       	brge	.+104    	; 0x34ac <stepper_rotate+0xf4>
		{
			actual_step = actual_step*(-1);
    3444:	de 01       	movw	r26, r28
    3446:	a3 50       	subi	r26, 0x03	; 3
    3448:	bf 4f       	sbci	r27, 0xFF	; 255
    344a:	fe 01       	movw	r30, r28
    344c:	e3 50       	subi	r30, 0x03	; 3
    344e:	ff 4f       	sbci	r31, 0xFF	; 255
    3450:	80 81       	ld	r24, Z
    3452:	81 95       	neg	r24
    3454:	8c 93       	st	X, r24
			direction = Left_Direction;
    3456:	fe 01       	movw	r30, r28
    3458:	e1 50       	subi	r30, 0x01	; 1
    345a:	ff 4f       	sbci	r31, 0xFF	; 255
    345c:	10 82       	st	Z, r1
    345e:	26 c0       	rjmp	.+76     	; 0x34ac <stepper_rotate+0xf4>
		}
	}
	else
	{
		/* Calculate the steps needed */
		actual_step = (angle*(-1)) - current_angle;
    3460:	fe 01       	movw	r30, r28
    3462:	e0 50       	subi	r30, 0x00	; 0
    3464:	ff 4f       	sbci	r31, 0xFF	; 255
    3466:	80 81       	ld	r24, Z
    3468:	81 95       	neg	r24
    346a:	98 2f       	mov	r25, r24
    346c:	fe 01       	movw	r30, r28
    346e:	ef 5f       	subi	r30, 0xFF	; 255
    3470:	fe 4f       	sbci	r31, 0xFE	; 254
    3472:	80 81       	ld	r24, Z
    3474:	e9 2f       	mov	r30, r25
    3476:	e8 1b       	sub	r30, r24
    3478:	8e 2f       	mov	r24, r30
    347a:	fe 01       	movw	r30, r28
    347c:	e3 50       	subi	r30, 0x03	; 3
    347e:	ff 4f       	sbci	r31, 0xFF	; 255
    3480:	80 83       	st	Z, r24

		if(actual_step < 0) /* If the result was negative then rotate left else rotate right */
    3482:	fe 01       	movw	r30, r28
    3484:	e3 50       	subi	r30, 0x03	; 3
    3486:	ff 4f       	sbci	r31, 0xFF	; 255
    3488:	80 81       	ld	r24, Z
    348a:	88 23       	and	r24, r24
    348c:	54 f4       	brge	.+20     	; 0x34a2 <stepper_rotate+0xea>
		{
			actual_step = actual_step*(-1);
    348e:	de 01       	movw	r26, r28
    3490:	a3 50       	subi	r26, 0x03	; 3
    3492:	bf 4f       	sbci	r27, 0xFF	; 255
    3494:	fe 01       	movw	r30, r28
    3496:	e3 50       	subi	r30, 0x03	; 3
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	80 81       	ld	r24, Z
    349c:	81 95       	neg	r24
    349e:	8c 93       	st	X, r24
    34a0:	05 c0       	rjmp	.+10     	; 0x34ac <stepper_rotate+0xf4>
			/* Do nothing it's already set to LEFT */
		}
		else
		{
			direction = Right_Direction;
    34a2:	fe 01       	movw	r30, r28
    34a4:	e1 50       	subi	r30, 0x01	; 1
    34a6:	ff 4f       	sbci	r31, 0xFF	; 255
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	80 83       	st	Z, r24
		}
	}
	/**-------------------------------------------------------------------**/

	if(Right_Direction == direction)
    34ac:	fe 01       	movw	r30, r28
    34ae:	e1 50       	subi	r30, 0x01	; 1
    34b0:	ff 4f       	sbci	r31, 0xFF	; 255
    34b2:	80 81       	ld	r24, Z
    34b4:	81 30       	cpi	r24, 0x01	; 1
    34b6:	09 f0       	breq	.+2      	; 0x34ba <stepper_rotate+0x102>
    34b8:	1f c7       	rjmp	.+3646   	; 0x42f8 <stepper_rotate+0xf40>
	{
		for(counter = 0; counter < actual_step; counter++)
    34ba:	fe 01       	movw	r30, r28
    34bc:	e2 50       	subi	r30, 0x02	; 2
    34be:	ff 4f       	sbci	r31, 0xFF	; 255
    34c0:	10 82       	st	Z, r1
    34c2:	08 c7       	rjmp	.+3600   	; 0x42d4 <stepper_rotate+0xf1c>
		{
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	60 e0       	ldi	r22, 0x00	; 0
    34c8:	41 e0       	ldi	r20, 0x01	; 1
    34ca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    34ce:	82 e0       	ldi	r24, 0x02	; 2
    34d0:	61 e0       	ldi	r22, 0x01	; 1
    34d2:	40 e0       	ldi	r20, 0x00	; 0
    34d4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    34d8:	82 e0       	ldi	r24, 0x02	; 2
    34da:	62 e0       	ldi	r22, 0x02	; 2
    34dc:	40 e0       	ldi	r20, 0x00	; 0
    34de:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    34e2:	82 e0       	ldi	r24, 0x02	; 2
    34e4:	63 e0       	ldi	r22, 0x03	; 3
    34e6:	40 e0       	ldi	r20, 0x00	; 0
    34e8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    34ec:	fe 01       	movw	r30, r28
    34ee:	e7 50       	subi	r30, 0x07	; 7
    34f0:	ff 4f       	sbci	r31, 0xFF	; 255
    34f2:	80 e0       	ldi	r24, 0x00	; 0
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	a8 ec       	ldi	r26, 0xC8	; 200
    34f8:	b1 e4       	ldi	r27, 0x41	; 65
    34fa:	80 83       	st	Z, r24
    34fc:	91 83       	std	Z+1, r25	; 0x01
    34fe:	a2 83       	std	Z+2, r26	; 0x02
    3500:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3502:	8e 01       	movw	r16, r28
    3504:	0b 50       	subi	r16, 0x0B	; 11
    3506:	1f 4f       	sbci	r17, 0xFF	; 255
    3508:	fe 01       	movw	r30, r28
    350a:	e7 50       	subi	r30, 0x07	; 7
    350c:	ff 4f       	sbci	r31, 0xFF	; 255
    350e:	60 81       	ld	r22, Z
    3510:	71 81       	ldd	r23, Z+1	; 0x01
    3512:	82 81       	ldd	r24, Z+2	; 0x02
    3514:	93 81       	ldd	r25, Z+3	; 0x03
    3516:	20 e0       	ldi	r18, 0x00	; 0
    3518:	30 e0       	ldi	r19, 0x00	; 0
    351a:	4a ef       	ldi	r20, 0xFA	; 250
    351c:	54 e4       	ldi	r21, 0x44	; 68
    351e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3522:	dc 01       	movw	r26, r24
    3524:	cb 01       	movw	r24, r22
    3526:	f8 01       	movw	r30, r16
    3528:	80 83       	st	Z, r24
    352a:	91 83       	std	Z+1, r25	; 0x01
    352c:	a2 83       	std	Z+2, r26	; 0x02
    352e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3530:	fe 01       	movw	r30, r28
    3532:	eb 50       	subi	r30, 0x0B	; 11
    3534:	ff 4f       	sbci	r31, 0xFF	; 255
    3536:	60 81       	ld	r22, Z
    3538:	71 81       	ldd	r23, Z+1	; 0x01
    353a:	82 81       	ldd	r24, Z+2	; 0x02
    353c:	93 81       	ldd	r25, Z+3	; 0x03
    353e:	20 e0       	ldi	r18, 0x00	; 0
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	40 e8       	ldi	r20, 0x80	; 128
    3544:	5f e3       	ldi	r21, 0x3F	; 63
    3546:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    354a:	88 23       	and	r24, r24
    354c:	44 f4       	brge	.+16     	; 0x355e <stepper_rotate+0x1a6>
		__ticks = 1;
    354e:	fe 01       	movw	r30, r28
    3550:	ed 50       	subi	r30, 0x0D	; 13
    3552:	ff 4f       	sbci	r31, 0xFF	; 255
    3554:	81 e0       	ldi	r24, 0x01	; 1
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	91 83       	std	Z+1, r25	; 0x01
    355a:	80 83       	st	Z, r24
    355c:	64 c0       	rjmp	.+200    	; 0x3626 <stepper_rotate+0x26e>
	else if (__tmp > 65535)
    355e:	fe 01       	movw	r30, r28
    3560:	eb 50       	subi	r30, 0x0B	; 11
    3562:	ff 4f       	sbci	r31, 0xFF	; 255
    3564:	60 81       	ld	r22, Z
    3566:	71 81       	ldd	r23, Z+1	; 0x01
    3568:	82 81       	ldd	r24, Z+2	; 0x02
    356a:	93 81       	ldd	r25, Z+3	; 0x03
    356c:	20 e0       	ldi	r18, 0x00	; 0
    356e:	3f ef       	ldi	r19, 0xFF	; 255
    3570:	4f e7       	ldi	r20, 0x7F	; 127
    3572:	57 e4       	ldi	r21, 0x47	; 71
    3574:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3578:	18 16       	cp	r1, r24
    357a:	0c f0       	brlt	.+2      	; 0x357e <stepper_rotate+0x1c6>
    357c:	43 c0       	rjmp	.+134    	; 0x3604 <stepper_rotate+0x24c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    357e:	fe 01       	movw	r30, r28
    3580:	e7 50       	subi	r30, 0x07	; 7
    3582:	ff 4f       	sbci	r31, 0xFF	; 255
    3584:	60 81       	ld	r22, Z
    3586:	71 81       	ldd	r23, Z+1	; 0x01
    3588:	82 81       	ldd	r24, Z+2	; 0x02
    358a:	93 81       	ldd	r25, Z+3	; 0x03
    358c:	20 e0       	ldi	r18, 0x00	; 0
    358e:	30 e0       	ldi	r19, 0x00	; 0
    3590:	40 e2       	ldi	r20, 0x20	; 32
    3592:	51 e4       	ldi	r21, 0x41	; 65
    3594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3598:	dc 01       	movw	r26, r24
    359a:	cb 01       	movw	r24, r22
    359c:	8e 01       	movw	r16, r28
    359e:	0d 50       	subi	r16, 0x0D	; 13
    35a0:	1f 4f       	sbci	r17, 0xFF	; 255
    35a2:	bc 01       	movw	r22, r24
    35a4:	cd 01       	movw	r24, r26
    35a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35aa:	dc 01       	movw	r26, r24
    35ac:	cb 01       	movw	r24, r22
    35ae:	f8 01       	movw	r30, r16
    35b0:	91 83       	std	Z+1, r25	; 0x01
    35b2:	80 83       	st	Z, r24
    35b4:	1f c0       	rjmp	.+62     	; 0x35f4 <stepper_rotate+0x23c>
    35b6:	fe 01       	movw	r30, r28
    35b8:	ef 50       	subi	r30, 0x0F	; 15
    35ba:	ff 4f       	sbci	r31, 0xFF	; 255
    35bc:	88 ec       	ldi	r24, 0xC8	; 200
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	91 83       	std	Z+1, r25	; 0x01
    35c2:	80 83       	st	Z, r24
    35c4:	fe 01       	movw	r30, r28
    35c6:	ef 50       	subi	r30, 0x0F	; 15
    35c8:	ff 4f       	sbci	r31, 0xFF	; 255
    35ca:	80 81       	ld	r24, Z
    35cc:	91 81       	ldd	r25, Z+1	; 0x01
    35ce:	01 97       	sbiw	r24, 0x01	; 1
    35d0:	f1 f7       	brne	.-4      	; 0x35ce <stepper_rotate+0x216>
    35d2:	fe 01       	movw	r30, r28
    35d4:	ef 50       	subi	r30, 0x0F	; 15
    35d6:	ff 4f       	sbci	r31, 0xFF	; 255
    35d8:	91 83       	std	Z+1, r25	; 0x01
    35da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35dc:	de 01       	movw	r26, r28
    35de:	ad 50       	subi	r26, 0x0D	; 13
    35e0:	bf 4f       	sbci	r27, 0xFF	; 255
    35e2:	fe 01       	movw	r30, r28
    35e4:	ed 50       	subi	r30, 0x0D	; 13
    35e6:	ff 4f       	sbci	r31, 0xFF	; 255
    35e8:	80 81       	ld	r24, Z
    35ea:	91 81       	ldd	r25, Z+1	; 0x01
    35ec:	01 97       	sbiw	r24, 0x01	; 1
    35ee:	11 96       	adiw	r26, 0x01	; 1
    35f0:	9c 93       	st	X, r25
    35f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f4:	fe 01       	movw	r30, r28
    35f6:	ed 50       	subi	r30, 0x0D	; 13
    35f8:	ff 4f       	sbci	r31, 0xFF	; 255
    35fa:	80 81       	ld	r24, Z
    35fc:	91 81       	ldd	r25, Z+1	; 0x01
    35fe:	00 97       	sbiw	r24, 0x00	; 0
    3600:	d1 f6       	brne	.-76     	; 0x35b6 <stepper_rotate+0x1fe>
    3602:	27 c0       	rjmp	.+78     	; 0x3652 <stepper_rotate+0x29a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3604:	8e 01       	movw	r16, r28
    3606:	0d 50       	subi	r16, 0x0D	; 13
    3608:	1f 4f       	sbci	r17, 0xFF	; 255
    360a:	fe 01       	movw	r30, r28
    360c:	eb 50       	subi	r30, 0x0B	; 11
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    361c:	dc 01       	movw	r26, r24
    361e:	cb 01       	movw	r24, r22
    3620:	f8 01       	movw	r30, r16
    3622:	91 83       	std	Z+1, r25	; 0x01
    3624:	80 83       	st	Z, r24
    3626:	de 01       	movw	r26, r28
    3628:	a1 51       	subi	r26, 0x11	; 17
    362a:	bf 4f       	sbci	r27, 0xFF	; 255
    362c:	fe 01       	movw	r30, r28
    362e:	ed 50       	subi	r30, 0x0D	; 13
    3630:	ff 4f       	sbci	r31, 0xFF	; 255
    3632:	80 81       	ld	r24, Z
    3634:	91 81       	ldd	r25, Z+1	; 0x01
    3636:	8d 93       	st	X+, r24
    3638:	9c 93       	st	X, r25
    363a:	fe 01       	movw	r30, r28
    363c:	e1 51       	subi	r30, 0x11	; 17
    363e:	ff 4f       	sbci	r31, 0xFF	; 255
    3640:	80 81       	ld	r24, Z
    3642:	91 81       	ldd	r25, Z+1	; 0x01
    3644:	01 97       	sbiw	r24, 0x01	; 1
    3646:	f1 f7       	brne	.-4      	; 0x3644 <stepper_rotate+0x28c>
    3648:	fe 01       	movw	r30, r28
    364a:	e1 51       	subi	r30, 0x11	; 17
    364c:	ff 4f       	sbci	r31, 0xFF	; 255
    364e:	91 83       	std	Z+1, r25	; 0x01
    3650:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    3652:	82 e0       	ldi	r24, 0x02	; 2
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	41 e0       	ldi	r20, 0x01	; 1
    3658:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	61 e0       	ldi	r22, 0x01	; 1
    3660:	40 e0       	ldi	r20, 0x00	; 0
    3662:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
    3666:	82 e0       	ldi	r24, 0x02	; 2
    3668:	62 e0       	ldi	r22, 0x02	; 2
    366a:	41 e0       	ldi	r20, 0x01	; 1
    366c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    3670:	82 e0       	ldi	r24, 0x02	; 2
    3672:	63 e0       	ldi	r22, 0x03	; 3
    3674:	40 e0       	ldi	r20, 0x00	; 0
    3676:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    367a:	fe 01       	movw	r30, r28
    367c:	e5 51       	subi	r30, 0x15	; 21
    367e:	ff 4f       	sbci	r31, 0xFF	; 255
    3680:	80 e0       	ldi	r24, 0x00	; 0
    3682:	90 e0       	ldi	r25, 0x00	; 0
    3684:	a8 ec       	ldi	r26, 0xC8	; 200
    3686:	b1 e4       	ldi	r27, 0x41	; 65
    3688:	80 83       	st	Z, r24
    368a:	91 83       	std	Z+1, r25	; 0x01
    368c:	a2 83       	std	Z+2, r26	; 0x02
    368e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3690:	8e 01       	movw	r16, r28
    3692:	09 51       	subi	r16, 0x19	; 25
    3694:	1f 4f       	sbci	r17, 0xFF	; 255
    3696:	fe 01       	movw	r30, r28
    3698:	e5 51       	subi	r30, 0x15	; 21
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	60 81       	ld	r22, Z
    369e:	71 81       	ldd	r23, Z+1	; 0x01
    36a0:	82 81       	ldd	r24, Z+2	; 0x02
    36a2:	93 81       	ldd	r25, Z+3	; 0x03
    36a4:	20 e0       	ldi	r18, 0x00	; 0
    36a6:	30 e0       	ldi	r19, 0x00	; 0
    36a8:	4a ef       	ldi	r20, 0xFA	; 250
    36aa:	54 e4       	ldi	r21, 0x44	; 68
    36ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    36b0:	dc 01       	movw	r26, r24
    36b2:	cb 01       	movw	r24, r22
    36b4:	f8 01       	movw	r30, r16
    36b6:	80 83       	st	Z, r24
    36b8:	91 83       	std	Z+1, r25	; 0x01
    36ba:	a2 83       	std	Z+2, r26	; 0x02
    36bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    36be:	fe 01       	movw	r30, r28
    36c0:	e9 51       	subi	r30, 0x19	; 25
    36c2:	ff 4f       	sbci	r31, 0xFF	; 255
    36c4:	60 81       	ld	r22, Z
    36c6:	71 81       	ldd	r23, Z+1	; 0x01
    36c8:	82 81       	ldd	r24, Z+2	; 0x02
    36ca:	93 81       	ldd	r25, Z+3	; 0x03
    36cc:	20 e0       	ldi	r18, 0x00	; 0
    36ce:	30 e0       	ldi	r19, 0x00	; 0
    36d0:	40 e8       	ldi	r20, 0x80	; 128
    36d2:	5f e3       	ldi	r21, 0x3F	; 63
    36d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    36d8:	88 23       	and	r24, r24
    36da:	44 f4       	brge	.+16     	; 0x36ec <stepper_rotate+0x334>
		__ticks = 1;
    36dc:	fe 01       	movw	r30, r28
    36de:	eb 51       	subi	r30, 0x1B	; 27
    36e0:	ff 4f       	sbci	r31, 0xFF	; 255
    36e2:	81 e0       	ldi	r24, 0x01	; 1
    36e4:	90 e0       	ldi	r25, 0x00	; 0
    36e6:	91 83       	std	Z+1, r25	; 0x01
    36e8:	80 83       	st	Z, r24
    36ea:	64 c0       	rjmp	.+200    	; 0x37b4 <stepper_rotate+0x3fc>
	else if (__tmp > 65535)
    36ec:	fe 01       	movw	r30, r28
    36ee:	e9 51       	subi	r30, 0x19	; 25
    36f0:	ff 4f       	sbci	r31, 0xFF	; 255
    36f2:	60 81       	ld	r22, Z
    36f4:	71 81       	ldd	r23, Z+1	; 0x01
    36f6:	82 81       	ldd	r24, Z+2	; 0x02
    36f8:	93 81       	ldd	r25, Z+3	; 0x03
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	3f ef       	ldi	r19, 0xFF	; 255
    36fe:	4f e7       	ldi	r20, 0x7F	; 127
    3700:	57 e4       	ldi	r21, 0x47	; 71
    3702:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3706:	18 16       	cp	r1, r24
    3708:	0c f0       	brlt	.+2      	; 0x370c <stepper_rotate+0x354>
    370a:	43 c0       	rjmp	.+134    	; 0x3792 <stepper_rotate+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    370c:	fe 01       	movw	r30, r28
    370e:	e5 51       	subi	r30, 0x15	; 21
    3710:	ff 4f       	sbci	r31, 0xFF	; 255
    3712:	60 81       	ld	r22, Z
    3714:	71 81       	ldd	r23, Z+1	; 0x01
    3716:	82 81       	ldd	r24, Z+2	; 0x02
    3718:	93 81       	ldd	r25, Z+3	; 0x03
    371a:	20 e0       	ldi	r18, 0x00	; 0
    371c:	30 e0       	ldi	r19, 0x00	; 0
    371e:	40 e2       	ldi	r20, 0x20	; 32
    3720:	51 e4       	ldi	r21, 0x41	; 65
    3722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3726:	dc 01       	movw	r26, r24
    3728:	cb 01       	movw	r24, r22
    372a:	8e 01       	movw	r16, r28
    372c:	0b 51       	subi	r16, 0x1B	; 27
    372e:	1f 4f       	sbci	r17, 0xFF	; 255
    3730:	bc 01       	movw	r22, r24
    3732:	cd 01       	movw	r24, r26
    3734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3738:	dc 01       	movw	r26, r24
    373a:	cb 01       	movw	r24, r22
    373c:	f8 01       	movw	r30, r16
    373e:	91 83       	std	Z+1, r25	; 0x01
    3740:	80 83       	st	Z, r24
    3742:	1f c0       	rjmp	.+62     	; 0x3782 <stepper_rotate+0x3ca>
    3744:	fe 01       	movw	r30, r28
    3746:	ed 51       	subi	r30, 0x1D	; 29
    3748:	ff 4f       	sbci	r31, 0xFF	; 255
    374a:	88 ec       	ldi	r24, 0xC8	; 200
    374c:	90 e0       	ldi	r25, 0x00	; 0
    374e:	91 83       	std	Z+1, r25	; 0x01
    3750:	80 83       	st	Z, r24
    3752:	fe 01       	movw	r30, r28
    3754:	ed 51       	subi	r30, 0x1D	; 29
    3756:	ff 4f       	sbci	r31, 0xFF	; 255
    3758:	80 81       	ld	r24, Z
    375a:	91 81       	ldd	r25, Z+1	; 0x01
    375c:	01 97       	sbiw	r24, 0x01	; 1
    375e:	f1 f7       	brne	.-4      	; 0x375c <stepper_rotate+0x3a4>
    3760:	fe 01       	movw	r30, r28
    3762:	ed 51       	subi	r30, 0x1D	; 29
    3764:	ff 4f       	sbci	r31, 0xFF	; 255
    3766:	91 83       	std	Z+1, r25	; 0x01
    3768:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    376a:	de 01       	movw	r26, r28
    376c:	ab 51       	subi	r26, 0x1B	; 27
    376e:	bf 4f       	sbci	r27, 0xFF	; 255
    3770:	fe 01       	movw	r30, r28
    3772:	eb 51       	subi	r30, 0x1B	; 27
    3774:	ff 4f       	sbci	r31, 0xFF	; 255
    3776:	80 81       	ld	r24, Z
    3778:	91 81       	ldd	r25, Z+1	; 0x01
    377a:	01 97       	sbiw	r24, 0x01	; 1
    377c:	11 96       	adiw	r26, 0x01	; 1
    377e:	9c 93       	st	X, r25
    3780:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3782:	fe 01       	movw	r30, r28
    3784:	eb 51       	subi	r30, 0x1B	; 27
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	80 81       	ld	r24, Z
    378a:	91 81       	ldd	r25, Z+1	; 0x01
    378c:	00 97       	sbiw	r24, 0x00	; 0
    378e:	d1 f6       	brne	.-76     	; 0x3744 <stepper_rotate+0x38c>
    3790:	27 c0       	rjmp	.+78     	; 0x37e0 <stepper_rotate+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3792:	8e 01       	movw	r16, r28
    3794:	0b 51       	subi	r16, 0x1B	; 27
    3796:	1f 4f       	sbci	r17, 0xFF	; 255
    3798:	fe 01       	movw	r30, r28
    379a:	e9 51       	subi	r30, 0x19	; 25
    379c:	ff 4f       	sbci	r31, 0xFF	; 255
    379e:	60 81       	ld	r22, Z
    37a0:	71 81       	ldd	r23, Z+1	; 0x01
    37a2:	82 81       	ldd	r24, Z+2	; 0x02
    37a4:	93 81       	ldd	r25, Z+3	; 0x03
    37a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37aa:	dc 01       	movw	r26, r24
    37ac:	cb 01       	movw	r24, r22
    37ae:	f8 01       	movw	r30, r16
    37b0:	91 83       	std	Z+1, r25	; 0x01
    37b2:	80 83       	st	Z, r24
    37b4:	de 01       	movw	r26, r28
    37b6:	af 51       	subi	r26, 0x1F	; 31
    37b8:	bf 4f       	sbci	r27, 0xFF	; 255
    37ba:	fe 01       	movw	r30, r28
    37bc:	eb 51       	subi	r30, 0x1B	; 27
    37be:	ff 4f       	sbci	r31, 0xFF	; 255
    37c0:	80 81       	ld	r24, Z
    37c2:	91 81       	ldd	r25, Z+1	; 0x01
    37c4:	8d 93       	st	X+, r24
    37c6:	9c 93       	st	X, r25
    37c8:	fe 01       	movw	r30, r28
    37ca:	ef 51       	subi	r30, 0x1F	; 31
    37cc:	ff 4f       	sbci	r31, 0xFF	; 255
    37ce:	80 81       	ld	r24, Z
    37d0:	91 81       	ldd	r25, Z+1	; 0x01
    37d2:	01 97       	sbiw	r24, 0x01	; 1
    37d4:	f1 f7       	brne	.-4      	; 0x37d2 <stepper_rotate+0x41a>
    37d6:	fe 01       	movw	r30, r28
    37d8:	ef 51       	subi	r30, 0x1F	; 31
    37da:	ff 4f       	sbci	r31, 0xFF	; 255
    37dc:	91 83       	std	Z+1, r25	; 0x01
    37de:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    37e0:	82 e0       	ldi	r24, 0x02	; 2
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	40 e0       	ldi	r20, 0x00	; 0
    37e6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    37ea:	82 e0       	ldi	r24, 0x02	; 2
    37ec:	61 e0       	ldi	r22, 0x01	; 1
    37ee:	40 e0       	ldi	r20, 0x00	; 0
    37f0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
    37f4:	82 e0       	ldi	r24, 0x02	; 2
    37f6:	62 e0       	ldi	r22, 0x02	; 2
    37f8:	41 e0       	ldi	r20, 0x01	; 1
    37fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	63 e0       	ldi	r22, 0x03	; 3
    3802:	40 e0       	ldi	r20, 0x00	; 0
    3804:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3808:	fe 01       	movw	r30, r28
    380a:	e3 52       	subi	r30, 0x23	; 35
    380c:	ff 4f       	sbci	r31, 0xFF	; 255
    380e:	80 e0       	ldi	r24, 0x00	; 0
    3810:	90 e0       	ldi	r25, 0x00	; 0
    3812:	a8 ec       	ldi	r26, 0xC8	; 200
    3814:	b1 e4       	ldi	r27, 0x41	; 65
    3816:	80 83       	st	Z, r24
    3818:	91 83       	std	Z+1, r25	; 0x01
    381a:	a2 83       	std	Z+2, r26	; 0x02
    381c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    381e:	8e 01       	movw	r16, r28
    3820:	07 52       	subi	r16, 0x27	; 39
    3822:	1f 4f       	sbci	r17, 0xFF	; 255
    3824:	fe 01       	movw	r30, r28
    3826:	e3 52       	subi	r30, 0x23	; 35
    3828:	ff 4f       	sbci	r31, 0xFF	; 255
    382a:	60 81       	ld	r22, Z
    382c:	71 81       	ldd	r23, Z+1	; 0x01
    382e:	82 81       	ldd	r24, Z+2	; 0x02
    3830:	93 81       	ldd	r25, Z+3	; 0x03
    3832:	20 e0       	ldi	r18, 0x00	; 0
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	4a ef       	ldi	r20, 0xFA	; 250
    3838:	54 e4       	ldi	r21, 0x44	; 68
    383a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    383e:	dc 01       	movw	r26, r24
    3840:	cb 01       	movw	r24, r22
    3842:	f8 01       	movw	r30, r16
    3844:	80 83       	st	Z, r24
    3846:	91 83       	std	Z+1, r25	; 0x01
    3848:	a2 83       	std	Z+2, r26	; 0x02
    384a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    384c:	fe 01       	movw	r30, r28
    384e:	e7 52       	subi	r30, 0x27	; 39
    3850:	ff 4f       	sbci	r31, 0xFF	; 255
    3852:	60 81       	ld	r22, Z
    3854:	71 81       	ldd	r23, Z+1	; 0x01
    3856:	82 81       	ldd	r24, Z+2	; 0x02
    3858:	93 81       	ldd	r25, Z+3	; 0x03
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 e8       	ldi	r20, 0x80	; 128
    3860:	5f e3       	ldi	r21, 0x3F	; 63
    3862:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3866:	88 23       	and	r24, r24
    3868:	44 f4       	brge	.+16     	; 0x387a <stepper_rotate+0x4c2>
		__ticks = 1;
    386a:	fe 01       	movw	r30, r28
    386c:	e9 52       	subi	r30, 0x29	; 41
    386e:	ff 4f       	sbci	r31, 0xFF	; 255
    3870:	81 e0       	ldi	r24, 0x01	; 1
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	91 83       	std	Z+1, r25	; 0x01
    3876:	80 83       	st	Z, r24
    3878:	64 c0       	rjmp	.+200    	; 0x3942 <stepper_rotate+0x58a>
	else if (__tmp > 65535)
    387a:	fe 01       	movw	r30, r28
    387c:	e7 52       	subi	r30, 0x27	; 39
    387e:	ff 4f       	sbci	r31, 0xFF	; 255
    3880:	60 81       	ld	r22, Z
    3882:	71 81       	ldd	r23, Z+1	; 0x01
    3884:	82 81       	ldd	r24, Z+2	; 0x02
    3886:	93 81       	ldd	r25, Z+3	; 0x03
    3888:	20 e0       	ldi	r18, 0x00	; 0
    388a:	3f ef       	ldi	r19, 0xFF	; 255
    388c:	4f e7       	ldi	r20, 0x7F	; 127
    388e:	57 e4       	ldi	r21, 0x47	; 71
    3890:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3894:	18 16       	cp	r1, r24
    3896:	0c f0       	brlt	.+2      	; 0x389a <stepper_rotate+0x4e2>
    3898:	43 c0       	rjmp	.+134    	; 0x3920 <stepper_rotate+0x568>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    389a:	fe 01       	movw	r30, r28
    389c:	e3 52       	subi	r30, 0x23	; 35
    389e:	ff 4f       	sbci	r31, 0xFF	; 255
    38a0:	60 81       	ld	r22, Z
    38a2:	71 81       	ldd	r23, Z+1	; 0x01
    38a4:	82 81       	ldd	r24, Z+2	; 0x02
    38a6:	93 81       	ldd	r25, Z+3	; 0x03
    38a8:	20 e0       	ldi	r18, 0x00	; 0
    38aa:	30 e0       	ldi	r19, 0x00	; 0
    38ac:	40 e2       	ldi	r20, 0x20	; 32
    38ae:	51 e4       	ldi	r21, 0x41	; 65
    38b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b4:	dc 01       	movw	r26, r24
    38b6:	cb 01       	movw	r24, r22
    38b8:	8e 01       	movw	r16, r28
    38ba:	09 52       	subi	r16, 0x29	; 41
    38bc:	1f 4f       	sbci	r17, 0xFF	; 255
    38be:	bc 01       	movw	r22, r24
    38c0:	cd 01       	movw	r24, r26
    38c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c6:	dc 01       	movw	r26, r24
    38c8:	cb 01       	movw	r24, r22
    38ca:	f8 01       	movw	r30, r16
    38cc:	91 83       	std	Z+1, r25	; 0x01
    38ce:	80 83       	st	Z, r24
    38d0:	1f c0       	rjmp	.+62     	; 0x3910 <stepper_rotate+0x558>
    38d2:	fe 01       	movw	r30, r28
    38d4:	eb 52       	subi	r30, 0x2B	; 43
    38d6:	ff 4f       	sbci	r31, 0xFF	; 255
    38d8:	88 ec       	ldi	r24, 0xC8	; 200
    38da:	90 e0       	ldi	r25, 0x00	; 0
    38dc:	91 83       	std	Z+1, r25	; 0x01
    38de:	80 83       	st	Z, r24
    38e0:	fe 01       	movw	r30, r28
    38e2:	eb 52       	subi	r30, 0x2B	; 43
    38e4:	ff 4f       	sbci	r31, 0xFF	; 255
    38e6:	80 81       	ld	r24, Z
    38e8:	91 81       	ldd	r25, Z+1	; 0x01
    38ea:	01 97       	sbiw	r24, 0x01	; 1
    38ec:	f1 f7       	brne	.-4      	; 0x38ea <stepper_rotate+0x532>
    38ee:	fe 01       	movw	r30, r28
    38f0:	eb 52       	subi	r30, 0x2B	; 43
    38f2:	ff 4f       	sbci	r31, 0xFF	; 255
    38f4:	91 83       	std	Z+1, r25	; 0x01
    38f6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38f8:	de 01       	movw	r26, r28
    38fa:	a9 52       	subi	r26, 0x29	; 41
    38fc:	bf 4f       	sbci	r27, 0xFF	; 255
    38fe:	fe 01       	movw	r30, r28
    3900:	e9 52       	subi	r30, 0x29	; 41
    3902:	ff 4f       	sbci	r31, 0xFF	; 255
    3904:	80 81       	ld	r24, Z
    3906:	91 81       	ldd	r25, Z+1	; 0x01
    3908:	01 97       	sbiw	r24, 0x01	; 1
    390a:	11 96       	adiw	r26, 0x01	; 1
    390c:	9c 93       	st	X, r25
    390e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3910:	fe 01       	movw	r30, r28
    3912:	e9 52       	subi	r30, 0x29	; 41
    3914:	ff 4f       	sbci	r31, 0xFF	; 255
    3916:	80 81       	ld	r24, Z
    3918:	91 81       	ldd	r25, Z+1	; 0x01
    391a:	00 97       	sbiw	r24, 0x00	; 0
    391c:	d1 f6       	brne	.-76     	; 0x38d2 <stepper_rotate+0x51a>
    391e:	27 c0       	rjmp	.+78     	; 0x396e <stepper_rotate+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3920:	8e 01       	movw	r16, r28
    3922:	09 52       	subi	r16, 0x29	; 41
    3924:	1f 4f       	sbci	r17, 0xFF	; 255
    3926:	fe 01       	movw	r30, r28
    3928:	e7 52       	subi	r30, 0x27	; 39
    392a:	ff 4f       	sbci	r31, 0xFF	; 255
    392c:	60 81       	ld	r22, Z
    392e:	71 81       	ldd	r23, Z+1	; 0x01
    3930:	82 81       	ldd	r24, Z+2	; 0x02
    3932:	93 81       	ldd	r25, Z+3	; 0x03
    3934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3938:	dc 01       	movw	r26, r24
    393a:	cb 01       	movw	r24, r22
    393c:	f8 01       	movw	r30, r16
    393e:	91 83       	std	Z+1, r25	; 0x01
    3940:	80 83       	st	Z, r24
    3942:	de 01       	movw	r26, r28
    3944:	ad 52       	subi	r26, 0x2D	; 45
    3946:	bf 4f       	sbci	r27, 0xFF	; 255
    3948:	fe 01       	movw	r30, r28
    394a:	e9 52       	subi	r30, 0x29	; 41
    394c:	ff 4f       	sbci	r31, 0xFF	; 255
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	8d 93       	st	X+, r24
    3954:	9c 93       	st	X, r25
    3956:	fe 01       	movw	r30, r28
    3958:	ed 52       	subi	r30, 0x2D	; 45
    395a:	ff 4f       	sbci	r31, 0xFF	; 255
    395c:	80 81       	ld	r24, Z
    395e:	91 81       	ldd	r25, Z+1	; 0x01
    3960:	01 97       	sbiw	r24, 0x01	; 1
    3962:	f1 f7       	brne	.-4      	; 0x3960 <stepper_rotate+0x5a8>
    3964:	fe 01       	movw	r30, r28
    3966:	ed 52       	subi	r30, 0x2D	; 45
    3968:	ff 4f       	sbci	r31, 0xFF	; 255
    396a:	91 83       	std	Z+1, r25	; 0x01
    396c:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    396e:	82 e0       	ldi	r24, 0x02	; 2
    3970:	60 e0       	ldi	r22, 0x00	; 0
    3972:	40 e0       	ldi	r20, 0x00	; 0
    3974:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
    3978:	82 e0       	ldi	r24, 0x02	; 2
    397a:	61 e0       	ldi	r22, 0x01	; 1
    397c:	41 e0       	ldi	r20, 0x01	; 1
    397e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
    3982:	82 e0       	ldi	r24, 0x02	; 2
    3984:	62 e0       	ldi	r22, 0x02	; 2
    3986:	41 e0       	ldi	r20, 0x01	; 1
    3988:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    398c:	82 e0       	ldi	r24, 0x02	; 2
    398e:	63 e0       	ldi	r22, 0x03	; 3
    3990:	40 e0       	ldi	r20, 0x00	; 0
    3992:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3996:	fe 01       	movw	r30, r28
    3998:	e1 53       	subi	r30, 0x31	; 49
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	80 e0       	ldi	r24, 0x00	; 0
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	a8 ec       	ldi	r26, 0xC8	; 200
    39a2:	b1 e4       	ldi	r27, 0x41	; 65
    39a4:	80 83       	st	Z, r24
    39a6:	91 83       	std	Z+1, r25	; 0x01
    39a8:	a2 83       	std	Z+2, r26	; 0x02
    39aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39ac:	8e 01       	movw	r16, r28
    39ae:	05 53       	subi	r16, 0x35	; 53
    39b0:	1f 4f       	sbci	r17, 0xFF	; 255
    39b2:	fe 01       	movw	r30, r28
    39b4:	e1 53       	subi	r30, 0x31	; 49
    39b6:	ff 4f       	sbci	r31, 0xFF	; 255
    39b8:	60 81       	ld	r22, Z
    39ba:	71 81       	ldd	r23, Z+1	; 0x01
    39bc:	82 81       	ldd	r24, Z+2	; 0x02
    39be:	93 81       	ldd	r25, Z+3	; 0x03
    39c0:	20 e0       	ldi	r18, 0x00	; 0
    39c2:	30 e0       	ldi	r19, 0x00	; 0
    39c4:	4a ef       	ldi	r20, 0xFA	; 250
    39c6:	54 e4       	ldi	r21, 0x44	; 68
    39c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39cc:	dc 01       	movw	r26, r24
    39ce:	cb 01       	movw	r24, r22
    39d0:	f8 01       	movw	r30, r16
    39d2:	80 83       	st	Z, r24
    39d4:	91 83       	std	Z+1, r25	; 0x01
    39d6:	a2 83       	std	Z+2, r26	; 0x02
    39d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    39da:	fe 01       	movw	r30, r28
    39dc:	e5 53       	subi	r30, 0x35	; 53
    39de:	ff 4f       	sbci	r31, 0xFF	; 255
    39e0:	60 81       	ld	r22, Z
    39e2:	71 81       	ldd	r23, Z+1	; 0x01
    39e4:	82 81       	ldd	r24, Z+2	; 0x02
    39e6:	93 81       	ldd	r25, Z+3	; 0x03
    39e8:	20 e0       	ldi	r18, 0x00	; 0
    39ea:	30 e0       	ldi	r19, 0x00	; 0
    39ec:	40 e8       	ldi	r20, 0x80	; 128
    39ee:	5f e3       	ldi	r21, 0x3F	; 63
    39f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39f4:	88 23       	and	r24, r24
    39f6:	44 f4       	brge	.+16     	; 0x3a08 <stepper_rotate+0x650>
		__ticks = 1;
    39f8:	fe 01       	movw	r30, r28
    39fa:	e7 53       	subi	r30, 0x37	; 55
    39fc:	ff 4f       	sbci	r31, 0xFF	; 255
    39fe:	81 e0       	ldi	r24, 0x01	; 1
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	91 83       	std	Z+1, r25	; 0x01
    3a04:	80 83       	st	Z, r24
    3a06:	64 c0       	rjmp	.+200    	; 0x3ad0 <stepper_rotate+0x718>
	else if (__tmp > 65535)
    3a08:	fe 01       	movw	r30, r28
    3a0a:	e5 53       	subi	r30, 0x35	; 53
    3a0c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a0e:	60 81       	ld	r22, Z
    3a10:	71 81       	ldd	r23, Z+1	; 0x01
    3a12:	82 81       	ldd	r24, Z+2	; 0x02
    3a14:	93 81       	ldd	r25, Z+3	; 0x03
    3a16:	20 e0       	ldi	r18, 0x00	; 0
    3a18:	3f ef       	ldi	r19, 0xFF	; 255
    3a1a:	4f e7       	ldi	r20, 0x7F	; 127
    3a1c:	57 e4       	ldi	r21, 0x47	; 71
    3a1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a22:	18 16       	cp	r1, r24
    3a24:	0c f0       	brlt	.+2      	; 0x3a28 <stepper_rotate+0x670>
    3a26:	43 c0       	rjmp	.+134    	; 0x3aae <stepper_rotate+0x6f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a28:	fe 01       	movw	r30, r28
    3a2a:	e1 53       	subi	r30, 0x31	; 49
    3a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    3a2e:	60 81       	ld	r22, Z
    3a30:	71 81       	ldd	r23, Z+1	; 0x01
    3a32:	82 81       	ldd	r24, Z+2	; 0x02
    3a34:	93 81       	ldd	r25, Z+3	; 0x03
    3a36:	20 e0       	ldi	r18, 0x00	; 0
    3a38:	30 e0       	ldi	r19, 0x00	; 0
    3a3a:	40 e2       	ldi	r20, 0x20	; 32
    3a3c:	51 e4       	ldi	r21, 0x41	; 65
    3a3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a42:	dc 01       	movw	r26, r24
    3a44:	cb 01       	movw	r24, r22
    3a46:	8e 01       	movw	r16, r28
    3a48:	07 53       	subi	r16, 0x37	; 55
    3a4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a4c:	bc 01       	movw	r22, r24
    3a4e:	cd 01       	movw	r24, r26
    3a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a54:	dc 01       	movw	r26, r24
    3a56:	cb 01       	movw	r24, r22
    3a58:	f8 01       	movw	r30, r16
    3a5a:	91 83       	std	Z+1, r25	; 0x01
    3a5c:	80 83       	st	Z, r24
    3a5e:	1f c0       	rjmp	.+62     	; 0x3a9e <stepper_rotate+0x6e6>
    3a60:	fe 01       	movw	r30, r28
    3a62:	e9 53       	subi	r30, 0x39	; 57
    3a64:	ff 4f       	sbci	r31, 0xFF	; 255
    3a66:	88 ec       	ldi	r24, 0xC8	; 200
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	91 83       	std	Z+1, r25	; 0x01
    3a6c:	80 83       	st	Z, r24
    3a6e:	fe 01       	movw	r30, r28
    3a70:	e9 53       	subi	r30, 0x39	; 57
    3a72:	ff 4f       	sbci	r31, 0xFF	; 255
    3a74:	80 81       	ld	r24, Z
    3a76:	91 81       	ldd	r25, Z+1	; 0x01
    3a78:	01 97       	sbiw	r24, 0x01	; 1
    3a7a:	f1 f7       	brne	.-4      	; 0x3a78 <stepper_rotate+0x6c0>
    3a7c:	fe 01       	movw	r30, r28
    3a7e:	e9 53       	subi	r30, 0x39	; 57
    3a80:	ff 4f       	sbci	r31, 0xFF	; 255
    3a82:	91 83       	std	Z+1, r25	; 0x01
    3a84:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a86:	de 01       	movw	r26, r28
    3a88:	a7 53       	subi	r26, 0x37	; 55
    3a8a:	bf 4f       	sbci	r27, 0xFF	; 255
    3a8c:	fe 01       	movw	r30, r28
    3a8e:	e7 53       	subi	r30, 0x37	; 55
    3a90:	ff 4f       	sbci	r31, 0xFF	; 255
    3a92:	80 81       	ld	r24, Z
    3a94:	91 81       	ldd	r25, Z+1	; 0x01
    3a96:	01 97       	sbiw	r24, 0x01	; 1
    3a98:	11 96       	adiw	r26, 0x01	; 1
    3a9a:	9c 93       	st	X, r25
    3a9c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a9e:	fe 01       	movw	r30, r28
    3aa0:	e7 53       	subi	r30, 0x37	; 55
    3aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    3aa4:	80 81       	ld	r24, Z
    3aa6:	91 81       	ldd	r25, Z+1	; 0x01
    3aa8:	00 97       	sbiw	r24, 0x00	; 0
    3aaa:	d1 f6       	brne	.-76     	; 0x3a60 <stepper_rotate+0x6a8>
    3aac:	27 c0       	rjmp	.+78     	; 0x3afc <stepper_rotate+0x744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3aae:	8e 01       	movw	r16, r28
    3ab0:	07 53       	subi	r16, 0x37	; 55
    3ab2:	1f 4f       	sbci	r17, 0xFF	; 255
    3ab4:	fe 01       	movw	r30, r28
    3ab6:	e5 53       	subi	r30, 0x35	; 53
    3ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aba:	60 81       	ld	r22, Z
    3abc:	71 81       	ldd	r23, Z+1	; 0x01
    3abe:	82 81       	ldd	r24, Z+2	; 0x02
    3ac0:	93 81       	ldd	r25, Z+3	; 0x03
    3ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ac6:	dc 01       	movw	r26, r24
    3ac8:	cb 01       	movw	r24, r22
    3aca:	f8 01       	movw	r30, r16
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	80 83       	st	Z, r24
    3ad0:	de 01       	movw	r26, r28
    3ad2:	ab 53       	subi	r26, 0x3B	; 59
    3ad4:	bf 4f       	sbci	r27, 0xFF	; 255
    3ad6:	fe 01       	movw	r30, r28
    3ad8:	e7 53       	subi	r30, 0x37	; 55
    3ada:	ff 4f       	sbci	r31, 0xFF	; 255
    3adc:	80 81       	ld	r24, Z
    3ade:	91 81       	ldd	r25, Z+1	; 0x01
    3ae0:	8d 93       	st	X+, r24
    3ae2:	9c 93       	st	X, r25
    3ae4:	fe 01       	movw	r30, r28
    3ae6:	eb 53       	subi	r30, 0x3B	; 59
    3ae8:	ff 4f       	sbci	r31, 0xFF	; 255
    3aea:	80 81       	ld	r24, Z
    3aec:	91 81       	ldd	r25, Z+1	; 0x01
    3aee:	01 97       	sbiw	r24, 0x01	; 1
    3af0:	f1 f7       	brne	.-4      	; 0x3aee <stepper_rotate+0x736>
    3af2:	fe 01       	movw	r30, r28
    3af4:	eb 53       	subi	r30, 0x3B	; 59
    3af6:	ff 4f       	sbci	r31, 0xFF	; 255
    3af8:	91 83       	std	Z+1, r25	; 0x01
    3afa:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    3afc:	82 e0       	ldi	r24, 0x02	; 2
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	40 e0       	ldi	r20, 0x00	; 0
    3b02:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
    3b06:	82 e0       	ldi	r24, 0x02	; 2
    3b08:	61 e0       	ldi	r22, 0x01	; 1
    3b0a:	41 e0       	ldi	r20, 0x01	; 1
    3b0c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	62 e0       	ldi	r22, 0x02	; 2
    3b14:	40 e0       	ldi	r20, 0x00	; 0
    3b16:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    3b1a:	82 e0       	ldi	r24, 0x02	; 2
    3b1c:	63 e0       	ldi	r22, 0x03	; 3
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3b24:	fe 01       	movw	r30, r28
    3b26:	ef 53       	subi	r30, 0x3F	; 63
    3b28:	ff 4f       	sbci	r31, 0xFF	; 255
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	a8 ec       	ldi	r26, 0xC8	; 200
    3b30:	b1 e4       	ldi	r27, 0x41	; 65
    3b32:	80 83       	st	Z, r24
    3b34:	91 83       	std	Z+1, r25	; 0x01
    3b36:	a2 83       	std	Z+2, r26	; 0x02
    3b38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b3a:	8e 01       	movw	r16, r28
    3b3c:	03 54       	subi	r16, 0x43	; 67
    3b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b40:	fe 01       	movw	r30, r28
    3b42:	ef 53       	subi	r30, 0x3F	; 63
    3b44:	ff 4f       	sbci	r31, 0xFF	; 255
    3b46:	60 81       	ld	r22, Z
    3b48:	71 81       	ldd	r23, Z+1	; 0x01
    3b4a:	82 81       	ldd	r24, Z+2	; 0x02
    3b4c:	93 81       	ldd	r25, Z+3	; 0x03
    3b4e:	20 e0       	ldi	r18, 0x00	; 0
    3b50:	30 e0       	ldi	r19, 0x00	; 0
    3b52:	4a ef       	ldi	r20, 0xFA	; 250
    3b54:	54 e4       	ldi	r21, 0x44	; 68
    3b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5a:	dc 01       	movw	r26, r24
    3b5c:	cb 01       	movw	r24, r22
    3b5e:	f8 01       	movw	r30, r16
    3b60:	80 83       	st	Z, r24
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	a2 83       	std	Z+2, r26	; 0x02
    3b66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3b68:	fe 01       	movw	r30, r28
    3b6a:	e3 54       	subi	r30, 0x43	; 67
    3b6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6e:	60 81       	ld	r22, Z
    3b70:	71 81       	ldd	r23, Z+1	; 0x01
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	93 81       	ldd	r25, Z+3	; 0x03
    3b76:	20 e0       	ldi	r18, 0x00	; 0
    3b78:	30 e0       	ldi	r19, 0x00	; 0
    3b7a:	40 e8       	ldi	r20, 0x80	; 128
    3b7c:	5f e3       	ldi	r21, 0x3F	; 63
    3b7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b82:	88 23       	and	r24, r24
    3b84:	44 f4       	brge	.+16     	; 0x3b96 <stepper_rotate+0x7de>
		__ticks = 1;
    3b86:	fe 01       	movw	r30, r28
    3b88:	e5 54       	subi	r30, 0x45	; 69
    3b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	91 83       	std	Z+1, r25	; 0x01
    3b92:	80 83       	st	Z, r24
    3b94:	64 c0       	rjmp	.+200    	; 0x3c5e <stepper_rotate+0x8a6>
	else if (__tmp > 65535)
    3b96:	fe 01       	movw	r30, r28
    3b98:	e3 54       	subi	r30, 0x43	; 67
    3b9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b9c:	60 81       	ld	r22, Z
    3b9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ba0:	82 81       	ldd	r24, Z+2	; 0x02
    3ba2:	93 81       	ldd	r25, Z+3	; 0x03
    3ba4:	20 e0       	ldi	r18, 0x00	; 0
    3ba6:	3f ef       	ldi	r19, 0xFF	; 255
    3ba8:	4f e7       	ldi	r20, 0x7F	; 127
    3baa:	57 e4       	ldi	r21, 0x47	; 71
    3bac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3bb0:	18 16       	cp	r1, r24
    3bb2:	0c f0       	brlt	.+2      	; 0x3bb6 <stepper_rotate+0x7fe>
    3bb4:	43 c0       	rjmp	.+134    	; 0x3c3c <stepper_rotate+0x884>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bb6:	fe 01       	movw	r30, r28
    3bb8:	ef 53       	subi	r30, 0x3F	; 63
    3bba:	ff 4f       	sbci	r31, 0xFF	; 255
    3bbc:	60 81       	ld	r22, Z
    3bbe:	71 81       	ldd	r23, Z+1	; 0x01
    3bc0:	82 81       	ldd	r24, Z+2	; 0x02
    3bc2:	93 81       	ldd	r25, Z+3	; 0x03
    3bc4:	20 e0       	ldi	r18, 0x00	; 0
    3bc6:	30 e0       	ldi	r19, 0x00	; 0
    3bc8:	40 e2       	ldi	r20, 0x20	; 32
    3bca:	51 e4       	ldi	r21, 0x41	; 65
    3bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bd0:	dc 01       	movw	r26, r24
    3bd2:	cb 01       	movw	r24, r22
    3bd4:	8e 01       	movw	r16, r28
    3bd6:	05 54       	subi	r16, 0x45	; 69
    3bd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3bda:	bc 01       	movw	r22, r24
    3bdc:	cd 01       	movw	r24, r26
    3bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	f8 01       	movw	r30, r16
    3be8:	91 83       	std	Z+1, r25	; 0x01
    3bea:	80 83       	st	Z, r24
    3bec:	1f c0       	rjmp	.+62     	; 0x3c2c <stepper_rotate+0x874>
    3bee:	fe 01       	movw	r30, r28
    3bf0:	e7 54       	subi	r30, 0x47	; 71
    3bf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf4:	88 ec       	ldi	r24, 0xC8	; 200
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	91 83       	std	Z+1, r25	; 0x01
    3bfa:	80 83       	st	Z, r24
    3bfc:	fe 01       	movw	r30, r28
    3bfe:	e7 54       	subi	r30, 0x47	; 71
    3c00:	ff 4f       	sbci	r31, 0xFF	; 255
    3c02:	80 81       	ld	r24, Z
    3c04:	91 81       	ldd	r25, Z+1	; 0x01
    3c06:	01 97       	sbiw	r24, 0x01	; 1
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <stepper_rotate+0x84e>
    3c0a:	fe 01       	movw	r30, r28
    3c0c:	e7 54       	subi	r30, 0x47	; 71
    3c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c10:	91 83       	std	Z+1, r25	; 0x01
    3c12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c14:	de 01       	movw	r26, r28
    3c16:	a5 54       	subi	r26, 0x45	; 69
    3c18:	bf 4f       	sbci	r27, 0xFF	; 255
    3c1a:	fe 01       	movw	r30, r28
    3c1c:	e5 54       	subi	r30, 0x45	; 69
    3c1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3c20:	80 81       	ld	r24, Z
    3c22:	91 81       	ldd	r25, Z+1	; 0x01
    3c24:	01 97       	sbiw	r24, 0x01	; 1
    3c26:	11 96       	adiw	r26, 0x01	; 1
    3c28:	9c 93       	st	X, r25
    3c2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e5 54       	subi	r30, 0x45	; 69
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	80 81       	ld	r24, Z
    3c34:	91 81       	ldd	r25, Z+1	; 0x01
    3c36:	00 97       	sbiw	r24, 0x00	; 0
    3c38:	d1 f6       	brne	.-76     	; 0x3bee <stepper_rotate+0x836>
    3c3a:	27 c0       	rjmp	.+78     	; 0x3c8a <stepper_rotate+0x8d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c3c:	8e 01       	movw	r16, r28
    3c3e:	05 54       	subi	r16, 0x45	; 69
    3c40:	1f 4f       	sbci	r17, 0xFF	; 255
    3c42:	fe 01       	movw	r30, r28
    3c44:	e3 54       	subi	r30, 0x43	; 67
    3c46:	ff 4f       	sbci	r31, 0xFF	; 255
    3c48:	60 81       	ld	r22, Z
    3c4a:	71 81       	ldd	r23, Z+1	; 0x01
    3c4c:	82 81       	ldd	r24, Z+2	; 0x02
    3c4e:	93 81       	ldd	r25, Z+3	; 0x03
    3c50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c54:	dc 01       	movw	r26, r24
    3c56:	cb 01       	movw	r24, r22
    3c58:	f8 01       	movw	r30, r16
    3c5a:	91 83       	std	Z+1, r25	; 0x01
    3c5c:	80 83       	st	Z, r24
    3c5e:	de 01       	movw	r26, r28
    3c60:	a9 54       	subi	r26, 0x49	; 73
    3c62:	bf 4f       	sbci	r27, 0xFF	; 255
    3c64:	fe 01       	movw	r30, r28
    3c66:	e5 54       	subi	r30, 0x45	; 69
    3c68:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6a:	80 81       	ld	r24, Z
    3c6c:	91 81       	ldd	r25, Z+1	; 0x01
    3c6e:	8d 93       	st	X+, r24
    3c70:	9c 93       	st	X, r25
    3c72:	fe 01       	movw	r30, r28
    3c74:	e9 54       	subi	r30, 0x49	; 73
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	80 81       	ld	r24, Z
    3c7a:	91 81       	ldd	r25, Z+1	; 0x01
    3c7c:	01 97       	sbiw	r24, 0x01	; 1
    3c7e:	f1 f7       	brne	.-4      	; 0x3c7c <stepper_rotate+0x8c4>
    3c80:	fe 01       	movw	r30, r28
    3c82:	e9 54       	subi	r30, 0x49	; 73
    3c84:	ff 4f       	sbci	r31, 0xFF	; 255
    3c86:	91 83       	std	Z+1, r25	; 0x01
    3c88:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    3c8a:	82 e0       	ldi	r24, 0x02	; 2
    3c8c:	60 e0       	ldi	r22, 0x00	; 0
    3c8e:	40 e0       	ldi	r20, 0x00	; 0
    3c90:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
    3c94:	82 e0       	ldi	r24, 0x02	; 2
    3c96:	61 e0       	ldi	r22, 0x01	; 1
    3c98:	41 e0       	ldi	r20, 0x01	; 1
    3c9a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    3c9e:	82 e0       	ldi	r24, 0x02	; 2
    3ca0:	62 e0       	ldi	r22, 0x02	; 2
    3ca2:	40 e0       	ldi	r20, 0x00	; 0
    3ca4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
    3ca8:	82 e0       	ldi	r24, 0x02	; 2
    3caa:	63 e0       	ldi	r22, 0x03	; 3
    3cac:	41 e0       	ldi	r20, 0x01	; 1
    3cae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3cb2:	fe 01       	movw	r30, r28
    3cb4:	ed 54       	subi	r30, 0x4D	; 77
    3cb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	a8 ec       	ldi	r26, 0xC8	; 200
    3cbe:	b1 e4       	ldi	r27, 0x41	; 65
    3cc0:	80 83       	st	Z, r24
    3cc2:	91 83       	std	Z+1, r25	; 0x01
    3cc4:	a2 83       	std	Z+2, r26	; 0x02
    3cc6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3cc8:	8e 01       	movw	r16, r28
    3cca:	01 55       	subi	r16, 0x51	; 81
    3ccc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cce:	fe 01       	movw	r30, r28
    3cd0:	ed 54       	subi	r30, 0x4D	; 77
    3cd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cd4:	60 81       	ld	r22, Z
    3cd6:	71 81       	ldd	r23, Z+1	; 0x01
    3cd8:	82 81       	ldd	r24, Z+2	; 0x02
    3cda:	93 81       	ldd	r25, Z+3	; 0x03
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	30 e0       	ldi	r19, 0x00	; 0
    3ce0:	4a ef       	ldi	r20, 0xFA	; 250
    3ce2:	54 e4       	ldi	r21, 0x44	; 68
    3ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	f8 01       	movw	r30, r16
    3cee:	80 83       	st	Z, r24
    3cf0:	91 83       	std	Z+1, r25	; 0x01
    3cf2:	a2 83       	std	Z+2, r26	; 0x02
    3cf4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	e1 55       	subi	r30, 0x51	; 81
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	60 81       	ld	r22, Z
    3cfe:	71 81       	ldd	r23, Z+1	; 0x01
    3d00:	82 81       	ldd	r24, Z+2	; 0x02
    3d02:	93 81       	ldd	r25, Z+3	; 0x03
    3d04:	20 e0       	ldi	r18, 0x00	; 0
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	40 e8       	ldi	r20, 0x80	; 128
    3d0a:	5f e3       	ldi	r21, 0x3F	; 63
    3d0c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d10:	88 23       	and	r24, r24
    3d12:	44 f4       	brge	.+16     	; 0x3d24 <stepper_rotate+0x96c>
		__ticks = 1;
    3d14:	fe 01       	movw	r30, r28
    3d16:	e3 55       	subi	r30, 0x53	; 83
    3d18:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1a:	81 e0       	ldi	r24, 0x01	; 1
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	91 83       	std	Z+1, r25	; 0x01
    3d20:	80 83       	st	Z, r24
    3d22:	64 c0       	rjmp	.+200    	; 0x3dec <stepper_rotate+0xa34>
	else if (__tmp > 65535)
    3d24:	fe 01       	movw	r30, r28
    3d26:	e1 55       	subi	r30, 0x51	; 81
    3d28:	ff 4f       	sbci	r31, 0xFF	; 255
    3d2a:	60 81       	ld	r22, Z
    3d2c:	71 81       	ldd	r23, Z+1	; 0x01
    3d2e:	82 81       	ldd	r24, Z+2	; 0x02
    3d30:	93 81       	ldd	r25, Z+3	; 0x03
    3d32:	20 e0       	ldi	r18, 0x00	; 0
    3d34:	3f ef       	ldi	r19, 0xFF	; 255
    3d36:	4f e7       	ldi	r20, 0x7F	; 127
    3d38:	57 e4       	ldi	r21, 0x47	; 71
    3d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3d3e:	18 16       	cp	r1, r24
    3d40:	0c f0       	brlt	.+2      	; 0x3d44 <stepper_rotate+0x98c>
    3d42:	43 c0       	rjmp	.+134    	; 0x3dca <stepper_rotate+0xa12>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3d44:	fe 01       	movw	r30, r28
    3d46:	ed 54       	subi	r30, 0x4D	; 77
    3d48:	ff 4f       	sbci	r31, 0xFF	; 255
    3d4a:	60 81       	ld	r22, Z
    3d4c:	71 81       	ldd	r23, Z+1	; 0x01
    3d4e:	82 81       	ldd	r24, Z+2	; 0x02
    3d50:	93 81       	ldd	r25, Z+3	; 0x03
    3d52:	20 e0       	ldi	r18, 0x00	; 0
    3d54:	30 e0       	ldi	r19, 0x00	; 0
    3d56:	40 e2       	ldi	r20, 0x20	; 32
    3d58:	51 e4       	ldi	r21, 0x41	; 65
    3d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	8e 01       	movw	r16, r28
    3d64:	03 55       	subi	r16, 0x53	; 83
    3d66:	1f 4f       	sbci	r17, 0xFF	; 255
    3d68:	bc 01       	movw	r22, r24
    3d6a:	cd 01       	movw	r24, r26
    3d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d70:	dc 01       	movw	r26, r24
    3d72:	cb 01       	movw	r24, r22
    3d74:	f8 01       	movw	r30, r16
    3d76:	91 83       	std	Z+1, r25	; 0x01
    3d78:	80 83       	st	Z, r24
    3d7a:	1f c0       	rjmp	.+62     	; 0x3dba <stepper_rotate+0xa02>
    3d7c:	fe 01       	movw	r30, r28
    3d7e:	e5 55       	subi	r30, 0x55	; 85
    3d80:	ff 4f       	sbci	r31, 0xFF	; 255
    3d82:	88 ec       	ldi	r24, 0xC8	; 200
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
    3d8a:	fe 01       	movw	r30, r28
    3d8c:	e5 55       	subi	r30, 0x55	; 85
    3d8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d90:	80 81       	ld	r24, Z
    3d92:	91 81       	ldd	r25, Z+1	; 0x01
    3d94:	01 97       	sbiw	r24, 0x01	; 1
    3d96:	f1 f7       	brne	.-4      	; 0x3d94 <stepper_rotate+0x9dc>
    3d98:	fe 01       	movw	r30, r28
    3d9a:	e5 55       	subi	r30, 0x55	; 85
    3d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d9e:	91 83       	std	Z+1, r25	; 0x01
    3da0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3da2:	de 01       	movw	r26, r28
    3da4:	a3 55       	subi	r26, 0x53	; 83
    3da6:	bf 4f       	sbci	r27, 0xFF	; 255
    3da8:	fe 01       	movw	r30, r28
    3daa:	e3 55       	subi	r30, 0x53	; 83
    3dac:	ff 4f       	sbci	r31, 0xFF	; 255
    3dae:	80 81       	ld	r24, Z
    3db0:	91 81       	ldd	r25, Z+1	; 0x01
    3db2:	01 97       	sbiw	r24, 0x01	; 1
    3db4:	11 96       	adiw	r26, 0x01	; 1
    3db6:	9c 93       	st	X, r25
    3db8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3dba:	fe 01       	movw	r30, r28
    3dbc:	e3 55       	subi	r30, 0x53	; 83
    3dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc0:	80 81       	ld	r24, Z
    3dc2:	91 81       	ldd	r25, Z+1	; 0x01
    3dc4:	00 97       	sbiw	r24, 0x00	; 0
    3dc6:	d1 f6       	brne	.-76     	; 0x3d7c <stepper_rotate+0x9c4>
    3dc8:	27 c0       	rjmp	.+78     	; 0x3e18 <stepper_rotate+0xa60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3dca:	8e 01       	movw	r16, r28
    3dcc:	03 55       	subi	r16, 0x53	; 83
    3dce:	1f 4f       	sbci	r17, 0xFF	; 255
    3dd0:	fe 01       	movw	r30, r28
    3dd2:	e1 55       	subi	r30, 0x51	; 81
    3dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd6:	60 81       	ld	r22, Z
    3dd8:	71 81       	ldd	r23, Z+1	; 0x01
    3dda:	82 81       	ldd	r24, Z+2	; 0x02
    3ddc:	93 81       	ldd	r25, Z+3	; 0x03
    3dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de2:	dc 01       	movw	r26, r24
    3de4:	cb 01       	movw	r24, r22
    3de6:	f8 01       	movw	r30, r16
    3de8:	91 83       	std	Z+1, r25	; 0x01
    3dea:	80 83       	st	Z, r24
    3dec:	de 01       	movw	r26, r28
    3dee:	a7 55       	subi	r26, 0x57	; 87
    3df0:	bf 4f       	sbci	r27, 0xFF	; 255
    3df2:	fe 01       	movw	r30, r28
    3df4:	e3 55       	subi	r30, 0x53	; 83
    3df6:	ff 4f       	sbci	r31, 0xFF	; 255
    3df8:	80 81       	ld	r24, Z
    3dfa:	91 81       	ldd	r25, Z+1	; 0x01
    3dfc:	8d 93       	st	X+, r24
    3dfe:	9c 93       	st	X, r25
    3e00:	fe 01       	movw	r30, r28
    3e02:	e7 55       	subi	r30, 0x57	; 87
    3e04:	ff 4f       	sbci	r31, 0xFF	; 255
    3e06:	80 81       	ld	r24, Z
    3e08:	91 81       	ldd	r25, Z+1	; 0x01
    3e0a:	01 97       	sbiw	r24, 0x01	; 1
    3e0c:	f1 f7       	brne	.-4      	; 0x3e0a <stepper_rotate+0xa52>
    3e0e:	fe 01       	movw	r30, r28
    3e10:	e7 55       	subi	r30, 0x57	; 87
    3e12:	ff 4f       	sbci	r31, 0xFF	; 255
    3e14:	91 83       	std	Z+1, r25	; 0x01
    3e16:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	60 e0       	ldi	r22, 0x00	; 0
    3e1c:	40 e0       	ldi	r20, 0x00	; 0
    3e1e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	40 e0       	ldi	r20, 0x00	; 0
    3e28:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    3e2c:	82 e0       	ldi	r24, 0x02	; 2
    3e2e:	62 e0       	ldi	r22, 0x02	; 2
    3e30:	40 e0       	ldi	r20, 0x00	; 0
    3e32:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
    3e36:	82 e0       	ldi	r24, 0x02	; 2
    3e38:	63 e0       	ldi	r22, 0x03	; 3
    3e3a:	41 e0       	ldi	r20, 0x01	; 1
    3e3c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3e40:	fe 01       	movw	r30, r28
    3e42:	eb 55       	subi	r30, 0x5B	; 91
    3e44:	ff 4f       	sbci	r31, 0xFF	; 255
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	90 e0       	ldi	r25, 0x00	; 0
    3e4a:	a8 ec       	ldi	r26, 0xC8	; 200
    3e4c:	b1 e4       	ldi	r27, 0x41	; 65
    3e4e:	80 83       	st	Z, r24
    3e50:	91 83       	std	Z+1, r25	; 0x01
    3e52:	a2 83       	std	Z+2, r26	; 0x02
    3e54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e56:	8e 01       	movw	r16, r28
    3e58:	0f 55       	subi	r16, 0x5F	; 95
    3e5a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5c:	fe 01       	movw	r30, r28
    3e5e:	eb 55       	subi	r30, 0x5B	; 91
    3e60:	ff 4f       	sbci	r31, 0xFF	; 255
    3e62:	60 81       	ld	r22, Z
    3e64:	71 81       	ldd	r23, Z+1	; 0x01
    3e66:	82 81       	ldd	r24, Z+2	; 0x02
    3e68:	93 81       	ldd	r25, Z+3	; 0x03
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	4a ef       	ldi	r20, 0xFA	; 250
    3e70:	54 e4       	ldi	r21, 0x44	; 68
    3e72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e76:	dc 01       	movw	r26, r24
    3e78:	cb 01       	movw	r24, r22
    3e7a:	f8 01       	movw	r30, r16
    3e7c:	80 83       	st	Z, r24
    3e7e:	91 83       	std	Z+1, r25	; 0x01
    3e80:	a2 83       	std	Z+2, r26	; 0x02
    3e82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e84:	fe 01       	movw	r30, r28
    3e86:	ef 55       	subi	r30, 0x5F	; 95
    3e88:	ff 4f       	sbci	r31, 0xFF	; 255
    3e8a:	60 81       	ld	r22, Z
    3e8c:	71 81       	ldd	r23, Z+1	; 0x01
    3e8e:	82 81       	ldd	r24, Z+2	; 0x02
    3e90:	93 81       	ldd	r25, Z+3	; 0x03
    3e92:	20 e0       	ldi	r18, 0x00	; 0
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	40 e8       	ldi	r20, 0x80	; 128
    3e98:	5f e3       	ldi	r21, 0x3F	; 63
    3e9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e9e:	88 23       	and	r24, r24
    3ea0:	44 f4       	brge	.+16     	; 0x3eb2 <stepper_rotate+0xafa>
		__ticks = 1;
    3ea2:	fe 01       	movw	r30, r28
    3ea4:	e1 56       	subi	r30, 0x61	; 97
    3ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	90 e0       	ldi	r25, 0x00	; 0
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
    3eb0:	64 c0       	rjmp	.+200    	; 0x3f7a <stepper_rotate+0xbc2>
	else if (__tmp > 65535)
    3eb2:	fe 01       	movw	r30, r28
    3eb4:	ef 55       	subi	r30, 0x5F	; 95
    3eb6:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb8:	60 81       	ld	r22, Z
    3eba:	71 81       	ldd	r23, Z+1	; 0x01
    3ebc:	82 81       	ldd	r24, Z+2	; 0x02
    3ebe:	93 81       	ldd	r25, Z+3	; 0x03
    3ec0:	20 e0       	ldi	r18, 0x00	; 0
    3ec2:	3f ef       	ldi	r19, 0xFF	; 255
    3ec4:	4f e7       	ldi	r20, 0x7F	; 127
    3ec6:	57 e4       	ldi	r21, 0x47	; 71
    3ec8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ecc:	18 16       	cp	r1, r24
    3ece:	0c f0       	brlt	.+2      	; 0x3ed2 <stepper_rotate+0xb1a>
    3ed0:	43 c0       	rjmp	.+134    	; 0x3f58 <stepper_rotate+0xba0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ed2:	fe 01       	movw	r30, r28
    3ed4:	eb 55       	subi	r30, 0x5B	; 91
    3ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed8:	60 81       	ld	r22, Z
    3eda:	71 81       	ldd	r23, Z+1	; 0x01
    3edc:	82 81       	ldd	r24, Z+2	; 0x02
    3ede:	93 81       	ldd	r25, Z+3	; 0x03
    3ee0:	20 e0       	ldi	r18, 0x00	; 0
    3ee2:	30 e0       	ldi	r19, 0x00	; 0
    3ee4:	40 e2       	ldi	r20, 0x20	; 32
    3ee6:	51 e4       	ldi	r21, 0x41	; 65
    3ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eec:	dc 01       	movw	r26, r24
    3eee:	cb 01       	movw	r24, r22
    3ef0:	8e 01       	movw	r16, r28
    3ef2:	01 56       	subi	r16, 0x61	; 97
    3ef4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef6:	bc 01       	movw	r22, r24
    3ef8:	cd 01       	movw	r24, r26
    3efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3efe:	dc 01       	movw	r26, r24
    3f00:	cb 01       	movw	r24, r22
    3f02:	f8 01       	movw	r30, r16
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	80 83       	st	Z, r24
    3f08:	1f c0       	rjmp	.+62     	; 0x3f48 <stepper_rotate+0xb90>
    3f0a:	fe 01       	movw	r30, r28
    3f0c:	e3 56       	subi	r30, 0x63	; 99
    3f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f10:	88 ec       	ldi	r24, 0xC8	; 200
    3f12:	90 e0       	ldi	r25, 0x00	; 0
    3f14:	91 83       	std	Z+1, r25	; 0x01
    3f16:	80 83       	st	Z, r24
    3f18:	fe 01       	movw	r30, r28
    3f1a:	e3 56       	subi	r30, 0x63	; 99
    3f1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f1e:	80 81       	ld	r24, Z
    3f20:	91 81       	ldd	r25, Z+1	; 0x01
    3f22:	01 97       	sbiw	r24, 0x01	; 1
    3f24:	f1 f7       	brne	.-4      	; 0x3f22 <stepper_rotate+0xb6a>
    3f26:	fe 01       	movw	r30, r28
    3f28:	e3 56       	subi	r30, 0x63	; 99
    3f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f2c:	91 83       	std	Z+1, r25	; 0x01
    3f2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f30:	de 01       	movw	r26, r28
    3f32:	a1 56       	subi	r26, 0x61	; 97
    3f34:	bf 4f       	sbci	r27, 0xFF	; 255
    3f36:	fe 01       	movw	r30, r28
    3f38:	e1 56       	subi	r30, 0x61	; 97
    3f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3c:	80 81       	ld	r24, Z
    3f3e:	91 81       	ldd	r25, Z+1	; 0x01
    3f40:	01 97       	sbiw	r24, 0x01	; 1
    3f42:	11 96       	adiw	r26, 0x01	; 1
    3f44:	9c 93       	st	X, r25
    3f46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f48:	fe 01       	movw	r30, r28
    3f4a:	e1 56       	subi	r30, 0x61	; 97
    3f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f4e:	80 81       	ld	r24, Z
    3f50:	91 81       	ldd	r25, Z+1	; 0x01
    3f52:	00 97       	sbiw	r24, 0x00	; 0
    3f54:	d1 f6       	brne	.-76     	; 0x3f0a <stepper_rotate+0xb52>
    3f56:	27 c0       	rjmp	.+78     	; 0x3fa6 <stepper_rotate+0xbee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f58:	8e 01       	movw	r16, r28
    3f5a:	01 56       	subi	r16, 0x61	; 97
    3f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    3f5e:	fe 01       	movw	r30, r28
    3f60:	ef 55       	subi	r30, 0x5F	; 95
    3f62:	ff 4f       	sbci	r31, 0xFF	; 255
    3f64:	60 81       	ld	r22, Z
    3f66:	71 81       	ldd	r23, Z+1	; 0x01
    3f68:	82 81       	ldd	r24, Z+2	; 0x02
    3f6a:	93 81       	ldd	r25, Z+3	; 0x03
    3f6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f70:	dc 01       	movw	r26, r24
    3f72:	cb 01       	movw	r24, r22
    3f74:	f8 01       	movw	r30, r16
    3f76:	91 83       	std	Z+1, r25	; 0x01
    3f78:	80 83       	st	Z, r24
    3f7a:	de 01       	movw	r26, r28
    3f7c:	a5 56       	subi	r26, 0x65	; 101
    3f7e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f80:	fe 01       	movw	r30, r28
    3f82:	e1 56       	subi	r30, 0x61	; 97
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 81       	ld	r24, Z
    3f88:	91 81       	ldd	r25, Z+1	; 0x01
    3f8a:	8d 93       	st	X+, r24
    3f8c:	9c 93       	st	X, r25
    3f8e:	fe 01       	movw	r30, r28
    3f90:	e5 56       	subi	r30, 0x65	; 101
    3f92:	ff 4f       	sbci	r31, 0xFF	; 255
    3f94:	80 81       	ld	r24, Z
    3f96:	91 81       	ldd	r25, Z+1	; 0x01
    3f98:	01 97       	sbiw	r24, 0x01	; 1
    3f9a:	f1 f7       	brne	.-4      	; 0x3f98 <stepper_rotate+0xbe0>
    3f9c:	fe 01       	movw	r30, r28
    3f9e:	e5 56       	subi	r30, 0x65	; 101
    3fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fa2:	91 83       	std	Z+1, r25	; 0x01
    3fa4:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    3fa6:	82 e0       	ldi	r24, 0x02	; 2
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	41 e0       	ldi	r20, 0x01	; 1
    3fac:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    3fb0:	82 e0       	ldi	r24, 0x02	; 2
    3fb2:	61 e0       	ldi	r22, 0x01	; 1
    3fb4:	40 e0       	ldi	r20, 0x00	; 0
    3fb6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    3fba:	82 e0       	ldi	r24, 0x02	; 2
    3fbc:	62 e0       	ldi	r22, 0x02	; 2
    3fbe:	40 e0       	ldi	r20, 0x00	; 0
    3fc0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
    3fc4:	82 e0       	ldi	r24, 0x02	; 2
    3fc6:	63 e0       	ldi	r22, 0x03	; 3
    3fc8:	41 e0       	ldi	r20, 0x01	; 1
    3fca:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    3fce:	fe 01       	movw	r30, r28
    3fd0:	e9 56       	subi	r30, 0x69	; 105
    3fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd4:	80 e0       	ldi	r24, 0x00	; 0
    3fd6:	90 e0       	ldi	r25, 0x00	; 0
    3fd8:	a8 ec       	ldi	r26, 0xC8	; 200
    3fda:	b1 e4       	ldi	r27, 0x41	; 65
    3fdc:	80 83       	st	Z, r24
    3fde:	91 83       	std	Z+1, r25	; 0x01
    3fe0:	a2 83       	std	Z+2, r26	; 0x02
    3fe2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fe4:	8e 01       	movw	r16, r28
    3fe6:	0d 56       	subi	r16, 0x6D	; 109
    3fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    3fea:	fe 01       	movw	r30, r28
    3fec:	e9 56       	subi	r30, 0x69	; 105
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	60 81       	ld	r22, Z
    3ff2:	71 81       	ldd	r23, Z+1	; 0x01
    3ff4:	82 81       	ldd	r24, Z+2	; 0x02
    3ff6:	93 81       	ldd	r25, Z+3	; 0x03
    3ff8:	20 e0       	ldi	r18, 0x00	; 0
    3ffa:	30 e0       	ldi	r19, 0x00	; 0
    3ffc:	4a ef       	ldi	r20, 0xFA	; 250
    3ffe:	54 e4       	ldi	r21, 0x44	; 68
    4000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4004:	dc 01       	movw	r26, r24
    4006:	cb 01       	movw	r24, r22
    4008:	f8 01       	movw	r30, r16
    400a:	80 83       	st	Z, r24
    400c:	91 83       	std	Z+1, r25	; 0x01
    400e:	a2 83       	std	Z+2, r26	; 0x02
    4010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4012:	fe 01       	movw	r30, r28
    4014:	ed 56       	subi	r30, 0x6D	; 109
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	82 81       	ldd	r24, Z+2	; 0x02
    401e:	93 81       	ldd	r25, Z+3	; 0x03
    4020:	20 e0       	ldi	r18, 0x00	; 0
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	40 e8       	ldi	r20, 0x80	; 128
    4026:	5f e3       	ldi	r21, 0x3F	; 63
    4028:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    402c:	88 23       	and	r24, r24
    402e:	44 f4       	brge	.+16     	; 0x4040 <stepper_rotate+0xc88>
		__ticks = 1;
    4030:	fe 01       	movw	r30, r28
    4032:	ef 56       	subi	r30, 0x6F	; 111
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	81 e0       	ldi	r24, 0x01	; 1
    4038:	90 e0       	ldi	r25, 0x00	; 0
    403a:	91 83       	std	Z+1, r25	; 0x01
    403c:	80 83       	st	Z, r24
    403e:	64 c0       	rjmp	.+200    	; 0x4108 <stepper_rotate+0xd50>
	else if (__tmp > 65535)
    4040:	fe 01       	movw	r30, r28
    4042:	ed 56       	subi	r30, 0x6D	; 109
    4044:	ff 4f       	sbci	r31, 0xFF	; 255
    4046:	60 81       	ld	r22, Z
    4048:	71 81       	ldd	r23, Z+1	; 0x01
    404a:	82 81       	ldd	r24, Z+2	; 0x02
    404c:	93 81       	ldd	r25, Z+3	; 0x03
    404e:	20 e0       	ldi	r18, 0x00	; 0
    4050:	3f ef       	ldi	r19, 0xFF	; 255
    4052:	4f e7       	ldi	r20, 0x7F	; 127
    4054:	57 e4       	ldi	r21, 0x47	; 71
    4056:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    405a:	18 16       	cp	r1, r24
    405c:	0c f0       	brlt	.+2      	; 0x4060 <stepper_rotate+0xca8>
    405e:	43 c0       	rjmp	.+134    	; 0x40e6 <stepper_rotate+0xd2e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4060:	fe 01       	movw	r30, r28
    4062:	e9 56       	subi	r30, 0x69	; 105
    4064:	ff 4f       	sbci	r31, 0xFF	; 255
    4066:	60 81       	ld	r22, Z
    4068:	71 81       	ldd	r23, Z+1	; 0x01
    406a:	82 81       	ldd	r24, Z+2	; 0x02
    406c:	93 81       	ldd	r25, Z+3	; 0x03
    406e:	20 e0       	ldi	r18, 0x00	; 0
    4070:	30 e0       	ldi	r19, 0x00	; 0
    4072:	40 e2       	ldi	r20, 0x20	; 32
    4074:	51 e4       	ldi	r21, 0x41	; 65
    4076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    407a:	dc 01       	movw	r26, r24
    407c:	cb 01       	movw	r24, r22
    407e:	8e 01       	movw	r16, r28
    4080:	0f 56       	subi	r16, 0x6F	; 111
    4082:	1f 4f       	sbci	r17, 0xFF	; 255
    4084:	bc 01       	movw	r22, r24
    4086:	cd 01       	movw	r24, r26
    4088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    408c:	dc 01       	movw	r26, r24
    408e:	cb 01       	movw	r24, r22
    4090:	f8 01       	movw	r30, r16
    4092:	91 83       	std	Z+1, r25	; 0x01
    4094:	80 83       	st	Z, r24
    4096:	1f c0       	rjmp	.+62     	; 0x40d6 <stepper_rotate+0xd1e>
    4098:	fe 01       	movw	r30, r28
    409a:	e1 57       	subi	r30, 0x71	; 113
    409c:	ff 4f       	sbci	r31, 0xFF	; 255
    409e:	88 ec       	ldi	r24, 0xC8	; 200
    40a0:	90 e0       	ldi	r25, 0x00	; 0
    40a2:	91 83       	std	Z+1, r25	; 0x01
    40a4:	80 83       	st	Z, r24
    40a6:	fe 01       	movw	r30, r28
    40a8:	e1 57       	subi	r30, 0x71	; 113
    40aa:	ff 4f       	sbci	r31, 0xFF	; 255
    40ac:	80 81       	ld	r24, Z
    40ae:	91 81       	ldd	r25, Z+1	; 0x01
    40b0:	01 97       	sbiw	r24, 0x01	; 1
    40b2:	f1 f7       	brne	.-4      	; 0x40b0 <stepper_rotate+0xcf8>
    40b4:	fe 01       	movw	r30, r28
    40b6:	e1 57       	subi	r30, 0x71	; 113
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	91 83       	std	Z+1, r25	; 0x01
    40bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40be:	de 01       	movw	r26, r28
    40c0:	af 56       	subi	r26, 0x6F	; 111
    40c2:	bf 4f       	sbci	r27, 0xFF	; 255
    40c4:	fe 01       	movw	r30, r28
    40c6:	ef 56       	subi	r30, 0x6F	; 111
    40c8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ca:	80 81       	ld	r24, Z
    40cc:	91 81       	ldd	r25, Z+1	; 0x01
    40ce:	01 97       	sbiw	r24, 0x01	; 1
    40d0:	11 96       	adiw	r26, 0x01	; 1
    40d2:	9c 93       	st	X, r25
    40d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40d6:	fe 01       	movw	r30, r28
    40d8:	ef 56       	subi	r30, 0x6F	; 111
    40da:	ff 4f       	sbci	r31, 0xFF	; 255
    40dc:	80 81       	ld	r24, Z
    40de:	91 81       	ldd	r25, Z+1	; 0x01
    40e0:	00 97       	sbiw	r24, 0x00	; 0
    40e2:	d1 f6       	brne	.-76     	; 0x4098 <stepper_rotate+0xce0>
    40e4:	27 c0       	rjmp	.+78     	; 0x4134 <stepper_rotate+0xd7c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40e6:	8e 01       	movw	r16, r28
    40e8:	0f 56       	subi	r16, 0x6F	; 111
    40ea:	1f 4f       	sbci	r17, 0xFF	; 255
    40ec:	fe 01       	movw	r30, r28
    40ee:	ed 56       	subi	r30, 0x6D	; 109
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	60 81       	ld	r22, Z
    40f4:	71 81       	ldd	r23, Z+1	; 0x01
    40f6:	82 81       	ldd	r24, Z+2	; 0x02
    40f8:	93 81       	ldd	r25, Z+3	; 0x03
    40fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40fe:	dc 01       	movw	r26, r24
    4100:	cb 01       	movw	r24, r22
    4102:	f8 01       	movw	r30, r16
    4104:	91 83       	std	Z+1, r25	; 0x01
    4106:	80 83       	st	Z, r24
    4108:	de 01       	movw	r26, r28
    410a:	a3 57       	subi	r26, 0x73	; 115
    410c:	bf 4f       	sbci	r27, 0xFF	; 255
    410e:	fe 01       	movw	r30, r28
    4110:	ef 56       	subi	r30, 0x6F	; 111
    4112:	ff 4f       	sbci	r31, 0xFF	; 255
    4114:	80 81       	ld	r24, Z
    4116:	91 81       	ldd	r25, Z+1	; 0x01
    4118:	8d 93       	st	X+, r24
    411a:	9c 93       	st	X, r25
    411c:	fe 01       	movw	r30, r28
    411e:	e3 57       	subi	r30, 0x73	; 115
    4120:	ff 4f       	sbci	r31, 0xFF	; 255
    4122:	80 81       	ld	r24, Z
    4124:	91 81       	ldd	r25, Z+1	; 0x01
    4126:	01 97       	sbiw	r24, 0x01	; 1
    4128:	f1 f7       	brne	.-4      	; 0x4126 <stepper_rotate+0xd6e>
    412a:	fe 01       	movw	r30, r28
    412c:	e3 57       	subi	r30, 0x73	; 115
    412e:	ff 4f       	sbci	r31, 0xFF	; 255
    4130:	91 83       	std	Z+1, r25	; 0x01
    4132:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    4134:	82 e0       	ldi	r24, 0x02	; 2
    4136:	60 e0       	ldi	r22, 0x00	; 0
    4138:	41 e0       	ldi	r20, 0x01	; 1
    413a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    413e:	82 e0       	ldi	r24, 0x02	; 2
    4140:	61 e0       	ldi	r22, 0x01	; 1
    4142:	40 e0       	ldi	r20, 0x00	; 0
    4144:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    4148:	82 e0       	ldi	r24, 0x02	; 2
    414a:	62 e0       	ldi	r22, 0x02	; 2
    414c:	40 e0       	ldi	r20, 0x00	; 0
    414e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4152:	82 e0       	ldi	r24, 0x02	; 2
    4154:	63 e0       	ldi	r22, 0x03	; 3
    4156:	40 e0       	ldi	r20, 0x00	; 0
    4158:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    415c:	fe 01       	movw	r30, r28
    415e:	e7 57       	subi	r30, 0x77	; 119
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	80 e0       	ldi	r24, 0x00	; 0
    4164:	90 e0       	ldi	r25, 0x00	; 0
    4166:	a8 ec       	ldi	r26, 0xC8	; 200
    4168:	b1 e4       	ldi	r27, 0x41	; 65
    416a:	80 83       	st	Z, r24
    416c:	91 83       	std	Z+1, r25	; 0x01
    416e:	a2 83       	std	Z+2, r26	; 0x02
    4170:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4172:	8e 01       	movw	r16, r28
    4174:	0b 57       	subi	r16, 0x7B	; 123
    4176:	1f 4f       	sbci	r17, 0xFF	; 255
    4178:	fe 01       	movw	r30, r28
    417a:	e7 57       	subi	r30, 0x77	; 119
    417c:	ff 4f       	sbci	r31, 0xFF	; 255
    417e:	60 81       	ld	r22, Z
    4180:	71 81       	ldd	r23, Z+1	; 0x01
    4182:	82 81       	ldd	r24, Z+2	; 0x02
    4184:	93 81       	ldd	r25, Z+3	; 0x03
    4186:	20 e0       	ldi	r18, 0x00	; 0
    4188:	30 e0       	ldi	r19, 0x00	; 0
    418a:	4a ef       	ldi	r20, 0xFA	; 250
    418c:	54 e4       	ldi	r21, 0x44	; 68
    418e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4192:	dc 01       	movw	r26, r24
    4194:	cb 01       	movw	r24, r22
    4196:	f8 01       	movw	r30, r16
    4198:	80 83       	st	Z, r24
    419a:	91 83       	std	Z+1, r25	; 0x01
    419c:	a2 83       	std	Z+2, r26	; 0x02
    419e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    41a0:	fe 01       	movw	r30, r28
    41a2:	eb 57       	subi	r30, 0x7B	; 123
    41a4:	ff 4f       	sbci	r31, 0xFF	; 255
    41a6:	60 81       	ld	r22, Z
    41a8:	71 81       	ldd	r23, Z+1	; 0x01
    41aa:	82 81       	ldd	r24, Z+2	; 0x02
    41ac:	93 81       	ldd	r25, Z+3	; 0x03
    41ae:	20 e0       	ldi	r18, 0x00	; 0
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	40 e8       	ldi	r20, 0x80	; 128
    41b4:	5f e3       	ldi	r21, 0x3F	; 63
    41b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41ba:	88 23       	and	r24, r24
    41bc:	44 f4       	brge	.+16     	; 0x41ce <stepper_rotate+0xe16>
		__ticks = 1;
    41be:	fe 01       	movw	r30, r28
    41c0:	ed 57       	subi	r30, 0x7D	; 125
    41c2:	ff 4f       	sbci	r31, 0xFF	; 255
    41c4:	81 e0       	ldi	r24, 0x01	; 1
    41c6:	90 e0       	ldi	r25, 0x00	; 0
    41c8:	91 83       	std	Z+1, r25	; 0x01
    41ca:	80 83       	st	Z, r24
    41cc:	64 c0       	rjmp	.+200    	; 0x4296 <stepper_rotate+0xede>
	else if (__tmp > 65535)
    41ce:	fe 01       	movw	r30, r28
    41d0:	eb 57       	subi	r30, 0x7B	; 123
    41d2:	ff 4f       	sbci	r31, 0xFF	; 255
    41d4:	60 81       	ld	r22, Z
    41d6:	71 81       	ldd	r23, Z+1	; 0x01
    41d8:	82 81       	ldd	r24, Z+2	; 0x02
    41da:	93 81       	ldd	r25, Z+3	; 0x03
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	3f ef       	ldi	r19, 0xFF	; 255
    41e0:	4f e7       	ldi	r20, 0x7F	; 127
    41e2:	57 e4       	ldi	r21, 0x47	; 71
    41e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41e8:	18 16       	cp	r1, r24
    41ea:	0c f0       	brlt	.+2      	; 0x41ee <stepper_rotate+0xe36>
    41ec:	43 c0       	rjmp	.+134    	; 0x4274 <stepper_rotate+0xebc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41ee:	fe 01       	movw	r30, r28
    41f0:	e7 57       	subi	r30, 0x77	; 119
    41f2:	ff 4f       	sbci	r31, 0xFF	; 255
    41f4:	60 81       	ld	r22, Z
    41f6:	71 81       	ldd	r23, Z+1	; 0x01
    41f8:	82 81       	ldd	r24, Z+2	; 0x02
    41fa:	93 81       	ldd	r25, Z+3	; 0x03
    41fc:	20 e0       	ldi	r18, 0x00	; 0
    41fe:	30 e0       	ldi	r19, 0x00	; 0
    4200:	40 e2       	ldi	r20, 0x20	; 32
    4202:	51 e4       	ldi	r21, 0x41	; 65
    4204:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4208:	dc 01       	movw	r26, r24
    420a:	cb 01       	movw	r24, r22
    420c:	8e 01       	movw	r16, r28
    420e:	0d 57       	subi	r16, 0x7D	; 125
    4210:	1f 4f       	sbci	r17, 0xFF	; 255
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	f8 01       	movw	r30, r16
    4220:	91 83       	std	Z+1, r25	; 0x01
    4222:	80 83       	st	Z, r24
    4224:	1f c0       	rjmp	.+62     	; 0x4264 <stepper_rotate+0xeac>
    4226:	fe 01       	movw	r30, r28
    4228:	ef 57       	subi	r30, 0x7F	; 127
    422a:	ff 4f       	sbci	r31, 0xFF	; 255
    422c:	88 ec       	ldi	r24, 0xC8	; 200
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	91 83       	std	Z+1, r25	; 0x01
    4232:	80 83       	st	Z, r24
    4234:	fe 01       	movw	r30, r28
    4236:	ef 57       	subi	r30, 0x7F	; 127
    4238:	ff 4f       	sbci	r31, 0xFF	; 255
    423a:	80 81       	ld	r24, Z
    423c:	91 81       	ldd	r25, Z+1	; 0x01
    423e:	01 97       	sbiw	r24, 0x01	; 1
    4240:	f1 f7       	brne	.-4      	; 0x423e <stepper_rotate+0xe86>
    4242:	fe 01       	movw	r30, r28
    4244:	ef 57       	subi	r30, 0x7F	; 127
    4246:	ff 4f       	sbci	r31, 0xFF	; 255
    4248:	91 83       	std	Z+1, r25	; 0x01
    424a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    424c:	de 01       	movw	r26, r28
    424e:	ad 57       	subi	r26, 0x7D	; 125
    4250:	bf 4f       	sbci	r27, 0xFF	; 255
    4252:	fe 01       	movw	r30, r28
    4254:	ed 57       	subi	r30, 0x7D	; 125
    4256:	ff 4f       	sbci	r31, 0xFF	; 255
    4258:	80 81       	ld	r24, Z
    425a:	91 81       	ldd	r25, Z+1	; 0x01
    425c:	01 97       	sbiw	r24, 0x01	; 1
    425e:	11 96       	adiw	r26, 0x01	; 1
    4260:	9c 93       	st	X, r25
    4262:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4264:	fe 01       	movw	r30, r28
    4266:	ed 57       	subi	r30, 0x7D	; 125
    4268:	ff 4f       	sbci	r31, 0xFF	; 255
    426a:	80 81       	ld	r24, Z
    426c:	91 81       	ldd	r25, Z+1	; 0x01
    426e:	00 97       	sbiw	r24, 0x00	; 0
    4270:	d1 f6       	brne	.-76     	; 0x4226 <stepper_rotate+0xe6e>
    4272:	27 c0       	rjmp	.+78     	; 0x42c2 <stepper_rotate+0xf0a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4274:	8e 01       	movw	r16, r28
    4276:	0d 57       	subi	r16, 0x7D	; 125
    4278:	1f 4f       	sbci	r17, 0xFF	; 255
    427a:	fe 01       	movw	r30, r28
    427c:	eb 57       	subi	r30, 0x7B	; 123
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    428c:	dc 01       	movw	r26, r24
    428e:	cb 01       	movw	r24, r22
    4290:	f8 01       	movw	r30, r16
    4292:	91 83       	std	Z+1, r25	; 0x01
    4294:	80 83       	st	Z, r24
    4296:	de 01       	movw	r26, r28
    4298:	a1 58       	subi	r26, 0x81	; 129
    429a:	bf 4f       	sbci	r27, 0xFF	; 255
    429c:	fe 01       	movw	r30, r28
    429e:	ed 57       	subi	r30, 0x7D	; 125
    42a0:	ff 4f       	sbci	r31, 0xFF	; 255
    42a2:	80 81       	ld	r24, Z
    42a4:	91 81       	ldd	r25, Z+1	; 0x01
    42a6:	8d 93       	st	X+, r24
    42a8:	9c 93       	st	X, r25
    42aa:	fe 01       	movw	r30, r28
    42ac:	e1 58       	subi	r30, 0x81	; 129
    42ae:	ff 4f       	sbci	r31, 0xFF	; 255
    42b0:	80 81       	ld	r24, Z
    42b2:	91 81       	ldd	r25, Z+1	; 0x01
    42b4:	01 97       	sbiw	r24, 0x01	; 1
    42b6:	f1 f7       	brne	.-4      	; 0x42b4 <stepper_rotate+0xefc>
    42b8:	fe 01       	movw	r30, r28
    42ba:	e1 58       	subi	r30, 0x81	; 129
    42bc:	ff 4f       	sbci	r31, 0xFF	; 255
    42be:	91 83       	std	Z+1, r25	; 0x01
    42c0:	80 83       	st	Z, r24
	}
	/**-------------------------------------------------------------------**/

	if(Right_Direction == direction)
	{
		for(counter = 0; counter < actual_step; counter++)
    42c2:	de 01       	movw	r26, r28
    42c4:	a2 50       	subi	r26, 0x02	; 2
    42c6:	bf 4f       	sbci	r27, 0xFF	; 255
    42c8:	fe 01       	movw	r30, r28
    42ca:	e2 50       	subi	r30, 0x02	; 2
    42cc:	ff 4f       	sbci	r31, 0xFF	; 255
    42ce:	80 81       	ld	r24, Z
    42d0:	8f 5f       	subi	r24, 0xFF	; 255
    42d2:	8c 93       	st	X, r24
    42d4:	fe 01       	movw	r30, r28
    42d6:	e2 50       	subi	r30, 0x02	; 2
    42d8:	ff 4f       	sbci	r31, 0xFF	; 255
    42da:	80 81       	ld	r24, Z
    42dc:	28 2f       	mov	r18, r24
    42de:	30 e0       	ldi	r19, 0x00	; 0
    42e0:	fe 01       	movw	r30, r28
    42e2:	e3 50       	subi	r30, 0x03	; 3
    42e4:	ff 4f       	sbci	r31, 0xFF	; 255
    42e6:	80 81       	ld	r24, Z
    42e8:	99 27       	eor	r25, r25
    42ea:	87 fd       	sbrc	r24, 7
    42ec:	90 95       	com	r25
    42ee:	28 17       	cp	r18, r24
    42f0:	39 07       	cpc	r19, r25
    42f2:	0c f4       	brge	.+2      	; 0x42f6 <stepper_rotate+0xf3e>
    42f4:	e7 c8       	rjmp	.-3634   	; 0x34c4 <stepper_rotate+0x10c>
    42f6:	ec c5       	rjmp	.+3032   	; 0x4ed0 <stepper_rotate+0x1b18>
	else /* Left direction */
	{
		/*Description
		 * It moves with this sequence {1 , 1&4, 4, 4&2, 2, 2&3, 3, 3&1, 1}
		 */
		for(counter = 0; counter < actual_step; counter++)
    42f8:	fe 01       	movw	r30, r28
    42fa:	e2 50       	subi	r30, 0x02	; 2
    42fc:	ff 4f       	sbci	r31, 0xFF	; 255
    42fe:	10 82       	st	Z, r1
    4300:	d6 c5       	rjmp	.+2988   	; 0x4eae <stepper_rotate+0x1af6>
		{
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    4302:	82 e0       	ldi	r24, 0x02	; 2
    4304:	60 e0       	ldi	r22, 0x00	; 0
    4306:	41 e0       	ldi	r20, 0x01	; 1
    4308:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    430c:	82 e0       	ldi	r24, 0x02	; 2
    430e:	61 e0       	ldi	r22, 0x01	; 1
    4310:	40 e0       	ldi	r20, 0x00	; 0
    4312:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    4316:	82 e0       	ldi	r24, 0x02	; 2
    4318:	62 e0       	ldi	r22, 0x02	; 2
    431a:	40 e0       	ldi	r20, 0x00	; 0
    431c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4320:	82 e0       	ldi	r24, 0x02	; 2
    4322:	63 e0       	ldi	r22, 0x03	; 3
    4324:	40 e0       	ldi	r20, 0x00	; 0
    4326:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    432a:	fe 01       	movw	r30, r28
    432c:	e5 58       	subi	r30, 0x85	; 133
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	80 e0       	ldi	r24, 0x00	; 0
    4332:	90 e0       	ldi	r25, 0x00	; 0
    4334:	a8 ec       	ldi	r26, 0xC8	; 200
    4336:	b1 e4       	ldi	r27, 0x41	; 65
    4338:	80 83       	st	Z, r24
    433a:	91 83       	std	Z+1, r25	; 0x01
    433c:	a2 83       	std	Z+2, r26	; 0x02
    433e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4340:	8e 01       	movw	r16, r28
    4342:	09 58       	subi	r16, 0x89	; 137
    4344:	1f 4f       	sbci	r17, 0xFF	; 255
    4346:	fe 01       	movw	r30, r28
    4348:	e5 58       	subi	r30, 0x85	; 133
    434a:	ff 4f       	sbci	r31, 0xFF	; 255
    434c:	60 81       	ld	r22, Z
    434e:	71 81       	ldd	r23, Z+1	; 0x01
    4350:	82 81       	ldd	r24, Z+2	; 0x02
    4352:	93 81       	ldd	r25, Z+3	; 0x03
    4354:	20 e0       	ldi	r18, 0x00	; 0
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	4a ef       	ldi	r20, 0xFA	; 250
    435a:	54 e4       	ldi	r21, 0x44	; 68
    435c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4360:	dc 01       	movw	r26, r24
    4362:	cb 01       	movw	r24, r22
    4364:	f8 01       	movw	r30, r16
    4366:	80 83       	st	Z, r24
    4368:	91 83       	std	Z+1, r25	; 0x01
    436a:	a2 83       	std	Z+2, r26	; 0x02
    436c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    436e:	fe 01       	movw	r30, r28
    4370:	e9 58       	subi	r30, 0x89	; 137
    4372:	ff 4f       	sbci	r31, 0xFF	; 255
    4374:	60 81       	ld	r22, Z
    4376:	71 81       	ldd	r23, Z+1	; 0x01
    4378:	82 81       	ldd	r24, Z+2	; 0x02
    437a:	93 81       	ldd	r25, Z+3	; 0x03
    437c:	20 e0       	ldi	r18, 0x00	; 0
    437e:	30 e0       	ldi	r19, 0x00	; 0
    4380:	40 e8       	ldi	r20, 0x80	; 128
    4382:	5f e3       	ldi	r21, 0x3F	; 63
    4384:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4388:	88 23       	and	r24, r24
    438a:	44 f4       	brge	.+16     	; 0x439c <stepper_rotate+0xfe4>
		__ticks = 1;
    438c:	fe 01       	movw	r30, r28
    438e:	eb 58       	subi	r30, 0x8B	; 139
    4390:	ff 4f       	sbci	r31, 0xFF	; 255
    4392:	81 e0       	ldi	r24, 0x01	; 1
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	91 83       	std	Z+1, r25	; 0x01
    4398:	80 83       	st	Z, r24
    439a:	64 c0       	rjmp	.+200    	; 0x4464 <stepper_rotate+0x10ac>
	else if (__tmp > 65535)
    439c:	fe 01       	movw	r30, r28
    439e:	e9 58       	subi	r30, 0x89	; 137
    43a0:	ff 4f       	sbci	r31, 0xFF	; 255
    43a2:	60 81       	ld	r22, Z
    43a4:	71 81       	ldd	r23, Z+1	; 0x01
    43a6:	82 81       	ldd	r24, Z+2	; 0x02
    43a8:	93 81       	ldd	r25, Z+3	; 0x03
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	3f ef       	ldi	r19, 0xFF	; 255
    43ae:	4f e7       	ldi	r20, 0x7F	; 127
    43b0:	57 e4       	ldi	r21, 0x47	; 71
    43b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    43b6:	18 16       	cp	r1, r24
    43b8:	0c f0       	brlt	.+2      	; 0x43bc <stepper_rotate+0x1004>
    43ba:	43 c0       	rjmp	.+134    	; 0x4442 <stepper_rotate+0x108a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43bc:	fe 01       	movw	r30, r28
    43be:	e5 58       	subi	r30, 0x85	; 133
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	60 81       	ld	r22, Z
    43c4:	71 81       	ldd	r23, Z+1	; 0x01
    43c6:	82 81       	ldd	r24, Z+2	; 0x02
    43c8:	93 81       	ldd	r25, Z+3	; 0x03
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e2       	ldi	r20, 0x20	; 32
    43d0:	51 e4       	ldi	r21, 0x41	; 65
    43d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	8e 01       	movw	r16, r28
    43dc:	0b 58       	subi	r16, 0x8B	; 139
    43de:	1f 4f       	sbci	r17, 0xFF	; 255
    43e0:	bc 01       	movw	r22, r24
    43e2:	cd 01       	movw	r24, r26
    43e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43e8:	dc 01       	movw	r26, r24
    43ea:	cb 01       	movw	r24, r22
    43ec:	f8 01       	movw	r30, r16
    43ee:	91 83       	std	Z+1, r25	; 0x01
    43f0:	80 83       	st	Z, r24
    43f2:	1f c0       	rjmp	.+62     	; 0x4432 <stepper_rotate+0x107a>
    43f4:	fe 01       	movw	r30, r28
    43f6:	ed 58       	subi	r30, 0x8D	; 141
    43f8:	ff 4f       	sbci	r31, 0xFF	; 255
    43fa:	88 ec       	ldi	r24, 0xC8	; 200
    43fc:	90 e0       	ldi	r25, 0x00	; 0
    43fe:	91 83       	std	Z+1, r25	; 0x01
    4400:	80 83       	st	Z, r24
    4402:	fe 01       	movw	r30, r28
    4404:	ed 58       	subi	r30, 0x8D	; 141
    4406:	ff 4f       	sbci	r31, 0xFF	; 255
    4408:	80 81       	ld	r24, Z
    440a:	91 81       	ldd	r25, Z+1	; 0x01
    440c:	01 97       	sbiw	r24, 0x01	; 1
    440e:	f1 f7       	brne	.-4      	; 0x440c <stepper_rotate+0x1054>
    4410:	fe 01       	movw	r30, r28
    4412:	ed 58       	subi	r30, 0x8D	; 141
    4414:	ff 4f       	sbci	r31, 0xFF	; 255
    4416:	91 83       	std	Z+1, r25	; 0x01
    4418:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    441a:	de 01       	movw	r26, r28
    441c:	ab 58       	subi	r26, 0x8B	; 139
    441e:	bf 4f       	sbci	r27, 0xFF	; 255
    4420:	fe 01       	movw	r30, r28
    4422:	eb 58       	subi	r30, 0x8B	; 139
    4424:	ff 4f       	sbci	r31, 0xFF	; 255
    4426:	80 81       	ld	r24, Z
    4428:	91 81       	ldd	r25, Z+1	; 0x01
    442a:	01 97       	sbiw	r24, 0x01	; 1
    442c:	11 96       	adiw	r26, 0x01	; 1
    442e:	9c 93       	st	X, r25
    4430:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4432:	fe 01       	movw	r30, r28
    4434:	eb 58       	subi	r30, 0x8B	; 139
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	80 81       	ld	r24, Z
    443a:	91 81       	ldd	r25, Z+1	; 0x01
    443c:	00 97       	sbiw	r24, 0x00	; 0
    443e:	d1 f6       	brne	.-76     	; 0x43f4 <stepper_rotate+0x103c>
    4440:	27 c0       	rjmp	.+78     	; 0x4490 <stepper_rotate+0x10d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4442:	8e 01       	movw	r16, r28
    4444:	0b 58       	subi	r16, 0x8B	; 139
    4446:	1f 4f       	sbci	r17, 0xFF	; 255
    4448:	fe 01       	movw	r30, r28
    444a:	e9 58       	subi	r30, 0x89	; 137
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	60 81       	ld	r22, Z
    4450:	71 81       	ldd	r23, Z+1	; 0x01
    4452:	82 81       	ldd	r24, Z+2	; 0x02
    4454:	93 81       	ldd	r25, Z+3	; 0x03
    4456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	f8 01       	movw	r30, r16
    4460:	91 83       	std	Z+1, r25	; 0x01
    4462:	80 83       	st	Z, r24
    4464:	de 01       	movw	r26, r28
    4466:	af 58       	subi	r26, 0x8F	; 143
    4468:	bf 4f       	sbci	r27, 0xFF	; 255
    446a:	fe 01       	movw	r30, r28
    446c:	eb 58       	subi	r30, 0x8B	; 139
    446e:	ff 4f       	sbci	r31, 0xFF	; 255
    4470:	80 81       	ld	r24, Z
    4472:	91 81       	ldd	r25, Z+1	; 0x01
    4474:	8d 93       	st	X+, r24
    4476:	9c 93       	st	X, r25
    4478:	fe 01       	movw	r30, r28
    447a:	ef 58       	subi	r30, 0x8F	; 143
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	80 81       	ld	r24, Z
    4480:	91 81       	ldd	r25, Z+1	; 0x01
    4482:	01 97       	sbiw	r24, 0x01	; 1
    4484:	f1 f7       	brne	.-4      	; 0x4482 <stepper_rotate+0x10ca>
    4486:	fe 01       	movw	r30, r28
    4488:	ef 58       	subi	r30, 0x8F	; 143
    448a:	ff 4f       	sbci	r31, 0xFF	; 255
    448c:	91 83       	std	Z+1, r25	; 0x01
    448e:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    4490:	82 e0       	ldi	r24, 0x02	; 2
    4492:	60 e0       	ldi	r22, 0x00	; 0
    4494:	41 e0       	ldi	r20, 0x01	; 1
    4496:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    449a:	82 e0       	ldi	r24, 0x02	; 2
    449c:	61 e0       	ldi	r22, 0x01	; 1
    449e:	40 e0       	ldi	r20, 0x00	; 0
    44a0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    44a4:	82 e0       	ldi	r24, 0x02	; 2
    44a6:	62 e0       	ldi	r22, 0x02	; 2
    44a8:	40 e0       	ldi	r20, 0x00	; 0
    44aa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
    44ae:	82 e0       	ldi	r24, 0x02	; 2
    44b0:	63 e0       	ldi	r22, 0x03	; 3
    44b2:	41 e0       	ldi	r20, 0x01	; 1
    44b4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    44b8:	fe 01       	movw	r30, r28
    44ba:	e3 59       	subi	r30, 0x93	; 147
    44bc:	ff 4f       	sbci	r31, 0xFF	; 255
    44be:	80 e0       	ldi	r24, 0x00	; 0
    44c0:	90 e0       	ldi	r25, 0x00	; 0
    44c2:	a8 ec       	ldi	r26, 0xC8	; 200
    44c4:	b1 e4       	ldi	r27, 0x41	; 65
    44c6:	80 83       	st	Z, r24
    44c8:	91 83       	std	Z+1, r25	; 0x01
    44ca:	a2 83       	std	Z+2, r26	; 0x02
    44cc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44ce:	8e 01       	movw	r16, r28
    44d0:	07 59       	subi	r16, 0x97	; 151
    44d2:	1f 4f       	sbci	r17, 0xFF	; 255
    44d4:	fe 01       	movw	r30, r28
    44d6:	e3 59       	subi	r30, 0x93	; 147
    44d8:	ff 4f       	sbci	r31, 0xFF	; 255
    44da:	60 81       	ld	r22, Z
    44dc:	71 81       	ldd	r23, Z+1	; 0x01
    44de:	82 81       	ldd	r24, Z+2	; 0x02
    44e0:	93 81       	ldd	r25, Z+3	; 0x03
    44e2:	20 e0       	ldi	r18, 0x00	; 0
    44e4:	30 e0       	ldi	r19, 0x00	; 0
    44e6:	4a ef       	ldi	r20, 0xFA	; 250
    44e8:	54 e4       	ldi	r21, 0x44	; 68
    44ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44ee:	dc 01       	movw	r26, r24
    44f0:	cb 01       	movw	r24, r22
    44f2:	f8 01       	movw	r30, r16
    44f4:	80 83       	st	Z, r24
    44f6:	91 83       	std	Z+1, r25	; 0x01
    44f8:	a2 83       	std	Z+2, r26	; 0x02
    44fa:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    44fc:	fe 01       	movw	r30, r28
    44fe:	e7 59       	subi	r30, 0x97	; 151
    4500:	ff 4f       	sbci	r31, 0xFF	; 255
    4502:	60 81       	ld	r22, Z
    4504:	71 81       	ldd	r23, Z+1	; 0x01
    4506:	82 81       	ldd	r24, Z+2	; 0x02
    4508:	93 81       	ldd	r25, Z+3	; 0x03
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	30 e0       	ldi	r19, 0x00	; 0
    450e:	40 e8       	ldi	r20, 0x80	; 128
    4510:	5f e3       	ldi	r21, 0x3F	; 63
    4512:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4516:	88 23       	and	r24, r24
    4518:	44 f4       	brge	.+16     	; 0x452a <stepper_rotate+0x1172>
		__ticks = 1;
    451a:	fe 01       	movw	r30, r28
    451c:	e9 59       	subi	r30, 0x99	; 153
    451e:	ff 4f       	sbci	r31, 0xFF	; 255
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	90 e0       	ldi	r25, 0x00	; 0
    4524:	91 83       	std	Z+1, r25	; 0x01
    4526:	80 83       	st	Z, r24
    4528:	64 c0       	rjmp	.+200    	; 0x45f2 <stepper_rotate+0x123a>
	else if (__tmp > 65535)
    452a:	fe 01       	movw	r30, r28
    452c:	e7 59       	subi	r30, 0x97	; 151
    452e:	ff 4f       	sbci	r31, 0xFF	; 255
    4530:	60 81       	ld	r22, Z
    4532:	71 81       	ldd	r23, Z+1	; 0x01
    4534:	82 81       	ldd	r24, Z+2	; 0x02
    4536:	93 81       	ldd	r25, Z+3	; 0x03
    4538:	20 e0       	ldi	r18, 0x00	; 0
    453a:	3f ef       	ldi	r19, 0xFF	; 255
    453c:	4f e7       	ldi	r20, 0x7F	; 127
    453e:	57 e4       	ldi	r21, 0x47	; 71
    4540:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4544:	18 16       	cp	r1, r24
    4546:	0c f0       	brlt	.+2      	; 0x454a <stepper_rotate+0x1192>
    4548:	43 c0       	rjmp	.+134    	; 0x45d0 <stepper_rotate+0x1218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    454a:	fe 01       	movw	r30, r28
    454c:	e3 59       	subi	r30, 0x93	; 147
    454e:	ff 4f       	sbci	r31, 0xFF	; 255
    4550:	60 81       	ld	r22, Z
    4552:	71 81       	ldd	r23, Z+1	; 0x01
    4554:	82 81       	ldd	r24, Z+2	; 0x02
    4556:	93 81       	ldd	r25, Z+3	; 0x03
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	30 e0       	ldi	r19, 0x00	; 0
    455c:	40 e2       	ldi	r20, 0x20	; 32
    455e:	51 e4       	ldi	r21, 0x41	; 65
    4560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4564:	dc 01       	movw	r26, r24
    4566:	cb 01       	movw	r24, r22
    4568:	8e 01       	movw	r16, r28
    456a:	09 59       	subi	r16, 0x99	; 153
    456c:	1f 4f       	sbci	r17, 0xFF	; 255
    456e:	bc 01       	movw	r22, r24
    4570:	cd 01       	movw	r24, r26
    4572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4576:	dc 01       	movw	r26, r24
    4578:	cb 01       	movw	r24, r22
    457a:	f8 01       	movw	r30, r16
    457c:	91 83       	std	Z+1, r25	; 0x01
    457e:	80 83       	st	Z, r24
    4580:	1f c0       	rjmp	.+62     	; 0x45c0 <stepper_rotate+0x1208>
    4582:	fe 01       	movw	r30, r28
    4584:	eb 59       	subi	r30, 0x9B	; 155
    4586:	ff 4f       	sbci	r31, 0xFF	; 255
    4588:	88 ec       	ldi	r24, 0xC8	; 200
    458a:	90 e0       	ldi	r25, 0x00	; 0
    458c:	91 83       	std	Z+1, r25	; 0x01
    458e:	80 83       	st	Z, r24
    4590:	fe 01       	movw	r30, r28
    4592:	eb 59       	subi	r30, 0x9B	; 155
    4594:	ff 4f       	sbci	r31, 0xFF	; 255
    4596:	80 81       	ld	r24, Z
    4598:	91 81       	ldd	r25, Z+1	; 0x01
    459a:	01 97       	sbiw	r24, 0x01	; 1
    459c:	f1 f7       	brne	.-4      	; 0x459a <stepper_rotate+0x11e2>
    459e:	fe 01       	movw	r30, r28
    45a0:	eb 59       	subi	r30, 0x9B	; 155
    45a2:	ff 4f       	sbci	r31, 0xFF	; 255
    45a4:	91 83       	std	Z+1, r25	; 0x01
    45a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a8:	de 01       	movw	r26, r28
    45aa:	a9 59       	subi	r26, 0x99	; 153
    45ac:	bf 4f       	sbci	r27, 0xFF	; 255
    45ae:	fe 01       	movw	r30, r28
    45b0:	e9 59       	subi	r30, 0x99	; 153
    45b2:	ff 4f       	sbci	r31, 0xFF	; 255
    45b4:	80 81       	ld	r24, Z
    45b6:	91 81       	ldd	r25, Z+1	; 0x01
    45b8:	01 97       	sbiw	r24, 0x01	; 1
    45ba:	11 96       	adiw	r26, 0x01	; 1
    45bc:	9c 93       	st	X, r25
    45be:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45c0:	fe 01       	movw	r30, r28
    45c2:	e9 59       	subi	r30, 0x99	; 153
    45c4:	ff 4f       	sbci	r31, 0xFF	; 255
    45c6:	80 81       	ld	r24, Z
    45c8:	91 81       	ldd	r25, Z+1	; 0x01
    45ca:	00 97       	sbiw	r24, 0x00	; 0
    45cc:	d1 f6       	brne	.-76     	; 0x4582 <stepper_rotate+0x11ca>
    45ce:	27 c0       	rjmp	.+78     	; 0x461e <stepper_rotate+0x1266>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45d0:	8e 01       	movw	r16, r28
    45d2:	09 59       	subi	r16, 0x99	; 153
    45d4:	1f 4f       	sbci	r17, 0xFF	; 255
    45d6:	fe 01       	movw	r30, r28
    45d8:	e7 59       	subi	r30, 0x97	; 151
    45da:	ff 4f       	sbci	r31, 0xFF	; 255
    45dc:	60 81       	ld	r22, Z
    45de:	71 81       	ldd	r23, Z+1	; 0x01
    45e0:	82 81       	ldd	r24, Z+2	; 0x02
    45e2:	93 81       	ldd	r25, Z+3	; 0x03
    45e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    45e8:	dc 01       	movw	r26, r24
    45ea:	cb 01       	movw	r24, r22
    45ec:	f8 01       	movw	r30, r16
    45ee:	91 83       	std	Z+1, r25	; 0x01
    45f0:	80 83       	st	Z, r24
    45f2:	de 01       	movw	r26, r28
    45f4:	ad 59       	subi	r26, 0x9D	; 157
    45f6:	bf 4f       	sbci	r27, 0xFF	; 255
    45f8:	fe 01       	movw	r30, r28
    45fa:	e9 59       	subi	r30, 0x99	; 153
    45fc:	ff 4f       	sbci	r31, 0xFF	; 255
    45fe:	80 81       	ld	r24, Z
    4600:	91 81       	ldd	r25, Z+1	; 0x01
    4602:	8d 93       	st	X+, r24
    4604:	9c 93       	st	X, r25
    4606:	fe 01       	movw	r30, r28
    4608:	ed 59       	subi	r30, 0x9D	; 157
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 81       	ld	r24, Z
    460e:	91 81       	ldd	r25, Z+1	; 0x01
    4610:	01 97       	sbiw	r24, 0x01	; 1
    4612:	f1 f7       	brne	.-4      	; 0x4610 <stepper_rotate+0x1258>
    4614:	fe 01       	movw	r30, r28
    4616:	ed 59       	subi	r30, 0x9D	; 157
    4618:	ff 4f       	sbci	r31, 0xFF	; 255
    461a:	91 83       	std	Z+1, r25	; 0x01
    461c:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    461e:	82 e0       	ldi	r24, 0x02	; 2
    4620:	60 e0       	ldi	r22, 0x00	; 0
    4622:	40 e0       	ldi	r20, 0x00	; 0
    4624:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    4628:	82 e0       	ldi	r24, 0x02	; 2
    462a:	61 e0       	ldi	r22, 0x01	; 1
    462c:	40 e0       	ldi	r20, 0x00	; 0
    462e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    4632:	82 e0       	ldi	r24, 0x02	; 2
    4634:	62 e0       	ldi	r22, 0x02	; 2
    4636:	40 e0       	ldi	r20, 0x00	; 0
    4638:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
    463c:	82 e0       	ldi	r24, 0x02	; 2
    463e:	63 e0       	ldi	r22, 0x03	; 3
    4640:	41 e0       	ldi	r20, 0x01	; 1
    4642:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    4646:	fe 01       	movw	r30, r28
    4648:	e1 5a       	subi	r30, 0xA1	; 161
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	80 e0       	ldi	r24, 0x00	; 0
    464e:	90 e0       	ldi	r25, 0x00	; 0
    4650:	a8 ec       	ldi	r26, 0xC8	; 200
    4652:	b1 e4       	ldi	r27, 0x41	; 65
    4654:	80 83       	st	Z, r24
    4656:	91 83       	std	Z+1, r25	; 0x01
    4658:	a2 83       	std	Z+2, r26	; 0x02
    465a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    465c:	8e 01       	movw	r16, r28
    465e:	05 5a       	subi	r16, 0xA5	; 165
    4660:	1f 4f       	sbci	r17, 0xFF	; 255
    4662:	fe 01       	movw	r30, r28
    4664:	e1 5a       	subi	r30, 0xA1	; 161
    4666:	ff 4f       	sbci	r31, 0xFF	; 255
    4668:	60 81       	ld	r22, Z
    466a:	71 81       	ldd	r23, Z+1	; 0x01
    466c:	82 81       	ldd	r24, Z+2	; 0x02
    466e:	93 81       	ldd	r25, Z+3	; 0x03
    4670:	20 e0       	ldi	r18, 0x00	; 0
    4672:	30 e0       	ldi	r19, 0x00	; 0
    4674:	4a ef       	ldi	r20, 0xFA	; 250
    4676:	54 e4       	ldi	r21, 0x44	; 68
    4678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    467c:	dc 01       	movw	r26, r24
    467e:	cb 01       	movw	r24, r22
    4680:	f8 01       	movw	r30, r16
    4682:	80 83       	st	Z, r24
    4684:	91 83       	std	Z+1, r25	; 0x01
    4686:	a2 83       	std	Z+2, r26	; 0x02
    4688:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    468a:	fe 01       	movw	r30, r28
    468c:	e5 5a       	subi	r30, 0xA5	; 165
    468e:	ff 4f       	sbci	r31, 0xFF	; 255
    4690:	60 81       	ld	r22, Z
    4692:	71 81       	ldd	r23, Z+1	; 0x01
    4694:	82 81       	ldd	r24, Z+2	; 0x02
    4696:	93 81       	ldd	r25, Z+3	; 0x03
    4698:	20 e0       	ldi	r18, 0x00	; 0
    469a:	30 e0       	ldi	r19, 0x00	; 0
    469c:	40 e8       	ldi	r20, 0x80	; 128
    469e:	5f e3       	ldi	r21, 0x3F	; 63
    46a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    46a4:	88 23       	and	r24, r24
    46a6:	44 f4       	brge	.+16     	; 0x46b8 <stepper_rotate+0x1300>
		__ticks = 1;
    46a8:	fe 01       	movw	r30, r28
    46aa:	e7 5a       	subi	r30, 0xA7	; 167
    46ac:	ff 4f       	sbci	r31, 0xFF	; 255
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	90 e0       	ldi	r25, 0x00	; 0
    46b2:	91 83       	std	Z+1, r25	; 0x01
    46b4:	80 83       	st	Z, r24
    46b6:	64 c0       	rjmp	.+200    	; 0x4780 <stepper_rotate+0x13c8>
	else if (__tmp > 65535)
    46b8:	fe 01       	movw	r30, r28
    46ba:	e5 5a       	subi	r30, 0xA5	; 165
    46bc:	ff 4f       	sbci	r31, 0xFF	; 255
    46be:	60 81       	ld	r22, Z
    46c0:	71 81       	ldd	r23, Z+1	; 0x01
    46c2:	82 81       	ldd	r24, Z+2	; 0x02
    46c4:	93 81       	ldd	r25, Z+3	; 0x03
    46c6:	20 e0       	ldi	r18, 0x00	; 0
    46c8:	3f ef       	ldi	r19, 0xFF	; 255
    46ca:	4f e7       	ldi	r20, 0x7F	; 127
    46cc:	57 e4       	ldi	r21, 0x47	; 71
    46ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    46d2:	18 16       	cp	r1, r24
    46d4:	0c f0       	brlt	.+2      	; 0x46d8 <stepper_rotate+0x1320>
    46d6:	43 c0       	rjmp	.+134    	; 0x475e <stepper_rotate+0x13a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46d8:	fe 01       	movw	r30, r28
    46da:	e1 5a       	subi	r30, 0xA1	; 161
    46dc:	ff 4f       	sbci	r31, 0xFF	; 255
    46de:	60 81       	ld	r22, Z
    46e0:	71 81       	ldd	r23, Z+1	; 0x01
    46e2:	82 81       	ldd	r24, Z+2	; 0x02
    46e4:	93 81       	ldd	r25, Z+3	; 0x03
    46e6:	20 e0       	ldi	r18, 0x00	; 0
    46e8:	30 e0       	ldi	r19, 0x00	; 0
    46ea:	40 e2       	ldi	r20, 0x20	; 32
    46ec:	51 e4       	ldi	r21, 0x41	; 65
    46ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46f2:	dc 01       	movw	r26, r24
    46f4:	cb 01       	movw	r24, r22
    46f6:	8e 01       	movw	r16, r28
    46f8:	07 5a       	subi	r16, 0xA7	; 167
    46fa:	1f 4f       	sbci	r17, 0xFF	; 255
    46fc:	bc 01       	movw	r22, r24
    46fe:	cd 01       	movw	r24, r26
    4700:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4704:	dc 01       	movw	r26, r24
    4706:	cb 01       	movw	r24, r22
    4708:	f8 01       	movw	r30, r16
    470a:	91 83       	std	Z+1, r25	; 0x01
    470c:	80 83       	st	Z, r24
    470e:	1f c0       	rjmp	.+62     	; 0x474e <stepper_rotate+0x1396>
    4710:	fe 01       	movw	r30, r28
    4712:	e9 5a       	subi	r30, 0xA9	; 169
    4714:	ff 4f       	sbci	r31, 0xFF	; 255
    4716:	88 ec       	ldi	r24, 0xC8	; 200
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	91 83       	std	Z+1, r25	; 0x01
    471c:	80 83       	st	Z, r24
    471e:	fe 01       	movw	r30, r28
    4720:	e9 5a       	subi	r30, 0xA9	; 169
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	80 81       	ld	r24, Z
    4726:	91 81       	ldd	r25, Z+1	; 0x01
    4728:	01 97       	sbiw	r24, 0x01	; 1
    472a:	f1 f7       	brne	.-4      	; 0x4728 <stepper_rotate+0x1370>
    472c:	fe 01       	movw	r30, r28
    472e:	e9 5a       	subi	r30, 0xA9	; 169
    4730:	ff 4f       	sbci	r31, 0xFF	; 255
    4732:	91 83       	std	Z+1, r25	; 0x01
    4734:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4736:	de 01       	movw	r26, r28
    4738:	a7 5a       	subi	r26, 0xA7	; 167
    473a:	bf 4f       	sbci	r27, 0xFF	; 255
    473c:	fe 01       	movw	r30, r28
    473e:	e7 5a       	subi	r30, 0xA7	; 167
    4740:	ff 4f       	sbci	r31, 0xFF	; 255
    4742:	80 81       	ld	r24, Z
    4744:	91 81       	ldd	r25, Z+1	; 0x01
    4746:	01 97       	sbiw	r24, 0x01	; 1
    4748:	11 96       	adiw	r26, 0x01	; 1
    474a:	9c 93       	st	X, r25
    474c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    474e:	fe 01       	movw	r30, r28
    4750:	e7 5a       	subi	r30, 0xA7	; 167
    4752:	ff 4f       	sbci	r31, 0xFF	; 255
    4754:	80 81       	ld	r24, Z
    4756:	91 81       	ldd	r25, Z+1	; 0x01
    4758:	00 97       	sbiw	r24, 0x00	; 0
    475a:	d1 f6       	brne	.-76     	; 0x4710 <stepper_rotate+0x1358>
    475c:	27 c0       	rjmp	.+78     	; 0x47ac <stepper_rotate+0x13f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    475e:	8e 01       	movw	r16, r28
    4760:	07 5a       	subi	r16, 0xA7	; 167
    4762:	1f 4f       	sbci	r17, 0xFF	; 255
    4764:	fe 01       	movw	r30, r28
    4766:	e5 5a       	subi	r30, 0xA5	; 165
    4768:	ff 4f       	sbci	r31, 0xFF	; 255
    476a:	60 81       	ld	r22, Z
    476c:	71 81       	ldd	r23, Z+1	; 0x01
    476e:	82 81       	ldd	r24, Z+2	; 0x02
    4770:	93 81       	ldd	r25, Z+3	; 0x03
    4772:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4776:	dc 01       	movw	r26, r24
    4778:	cb 01       	movw	r24, r22
    477a:	f8 01       	movw	r30, r16
    477c:	91 83       	std	Z+1, r25	; 0x01
    477e:	80 83       	st	Z, r24
    4780:	de 01       	movw	r26, r28
    4782:	ab 5a       	subi	r26, 0xAB	; 171
    4784:	bf 4f       	sbci	r27, 0xFF	; 255
    4786:	fe 01       	movw	r30, r28
    4788:	e7 5a       	subi	r30, 0xA7	; 167
    478a:	ff 4f       	sbci	r31, 0xFF	; 255
    478c:	80 81       	ld	r24, Z
    478e:	91 81       	ldd	r25, Z+1	; 0x01
    4790:	8d 93       	st	X+, r24
    4792:	9c 93       	st	X, r25
    4794:	fe 01       	movw	r30, r28
    4796:	eb 5a       	subi	r30, 0xAB	; 171
    4798:	ff 4f       	sbci	r31, 0xFF	; 255
    479a:	80 81       	ld	r24, Z
    479c:	91 81       	ldd	r25, Z+1	; 0x01
    479e:	01 97       	sbiw	r24, 0x01	; 1
    47a0:	f1 f7       	brne	.-4      	; 0x479e <stepper_rotate+0x13e6>
    47a2:	fe 01       	movw	r30, r28
    47a4:	eb 5a       	subi	r30, 0xAB	; 171
    47a6:	ff 4f       	sbci	r31, 0xFF	; 255
    47a8:	91 83       	std	Z+1, r25	; 0x01
    47aa:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    47ac:	82 e0       	ldi	r24, 0x02	; 2
    47ae:	60 e0       	ldi	r22, 0x00	; 0
    47b0:	40 e0       	ldi	r20, 0x00	; 0
    47b2:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
    47b6:	82 e0       	ldi	r24, 0x02	; 2
    47b8:	61 e0       	ldi	r22, 0x01	; 1
    47ba:	41 e0       	ldi	r20, 0x01	; 1
    47bc:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    47c0:	82 e0       	ldi	r24, 0x02	; 2
    47c2:	62 e0       	ldi	r22, 0x02	; 2
    47c4:	40 e0       	ldi	r20, 0x00	; 0
    47c6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
    47ca:	82 e0       	ldi	r24, 0x02	; 2
    47cc:	63 e0       	ldi	r22, 0x03	; 3
    47ce:	41 e0       	ldi	r20, 0x01	; 1
    47d0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    47d4:	fe 01       	movw	r30, r28
    47d6:	ef 5a       	subi	r30, 0xAF	; 175
    47d8:	ff 4f       	sbci	r31, 0xFF	; 255
    47da:	80 e0       	ldi	r24, 0x00	; 0
    47dc:	90 e0       	ldi	r25, 0x00	; 0
    47de:	a8 ec       	ldi	r26, 0xC8	; 200
    47e0:	b1 e4       	ldi	r27, 0x41	; 65
    47e2:	80 83       	st	Z, r24
    47e4:	91 83       	std	Z+1, r25	; 0x01
    47e6:	a2 83       	std	Z+2, r26	; 0x02
    47e8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47ea:	8e 01       	movw	r16, r28
    47ec:	03 5b       	subi	r16, 0xB3	; 179
    47ee:	1f 4f       	sbci	r17, 0xFF	; 255
    47f0:	fe 01       	movw	r30, r28
    47f2:	ef 5a       	subi	r30, 0xAF	; 175
    47f4:	ff 4f       	sbci	r31, 0xFF	; 255
    47f6:	60 81       	ld	r22, Z
    47f8:	71 81       	ldd	r23, Z+1	; 0x01
    47fa:	82 81       	ldd	r24, Z+2	; 0x02
    47fc:	93 81       	ldd	r25, Z+3	; 0x03
    47fe:	20 e0       	ldi	r18, 0x00	; 0
    4800:	30 e0       	ldi	r19, 0x00	; 0
    4802:	4a ef       	ldi	r20, 0xFA	; 250
    4804:	54 e4       	ldi	r21, 0x44	; 68
    4806:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    480a:	dc 01       	movw	r26, r24
    480c:	cb 01       	movw	r24, r22
    480e:	f8 01       	movw	r30, r16
    4810:	80 83       	st	Z, r24
    4812:	91 83       	std	Z+1, r25	; 0x01
    4814:	a2 83       	std	Z+2, r26	; 0x02
    4816:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4818:	fe 01       	movw	r30, r28
    481a:	e3 5b       	subi	r30, 0xB3	; 179
    481c:	ff 4f       	sbci	r31, 0xFF	; 255
    481e:	60 81       	ld	r22, Z
    4820:	71 81       	ldd	r23, Z+1	; 0x01
    4822:	82 81       	ldd	r24, Z+2	; 0x02
    4824:	93 81       	ldd	r25, Z+3	; 0x03
    4826:	20 e0       	ldi	r18, 0x00	; 0
    4828:	30 e0       	ldi	r19, 0x00	; 0
    482a:	40 e8       	ldi	r20, 0x80	; 128
    482c:	5f e3       	ldi	r21, 0x3F	; 63
    482e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4832:	88 23       	and	r24, r24
    4834:	44 f4       	brge	.+16     	; 0x4846 <stepper_rotate+0x148e>
		__ticks = 1;
    4836:	fe 01       	movw	r30, r28
    4838:	e5 5b       	subi	r30, 0xB5	; 181
    483a:	ff 4f       	sbci	r31, 0xFF	; 255
    483c:	81 e0       	ldi	r24, 0x01	; 1
    483e:	90 e0       	ldi	r25, 0x00	; 0
    4840:	91 83       	std	Z+1, r25	; 0x01
    4842:	80 83       	st	Z, r24
    4844:	64 c0       	rjmp	.+200    	; 0x490e <stepper_rotate+0x1556>
	else if (__tmp > 65535)
    4846:	fe 01       	movw	r30, r28
    4848:	e3 5b       	subi	r30, 0xB3	; 179
    484a:	ff 4f       	sbci	r31, 0xFF	; 255
    484c:	60 81       	ld	r22, Z
    484e:	71 81       	ldd	r23, Z+1	; 0x01
    4850:	82 81       	ldd	r24, Z+2	; 0x02
    4852:	93 81       	ldd	r25, Z+3	; 0x03
    4854:	20 e0       	ldi	r18, 0x00	; 0
    4856:	3f ef       	ldi	r19, 0xFF	; 255
    4858:	4f e7       	ldi	r20, 0x7F	; 127
    485a:	57 e4       	ldi	r21, 0x47	; 71
    485c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4860:	18 16       	cp	r1, r24
    4862:	0c f0       	brlt	.+2      	; 0x4866 <stepper_rotate+0x14ae>
    4864:	43 c0       	rjmp	.+134    	; 0x48ec <stepper_rotate+0x1534>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4866:	fe 01       	movw	r30, r28
    4868:	ef 5a       	subi	r30, 0xAF	; 175
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	60 81       	ld	r22, Z
    486e:	71 81       	ldd	r23, Z+1	; 0x01
    4870:	82 81       	ldd	r24, Z+2	; 0x02
    4872:	93 81       	ldd	r25, Z+3	; 0x03
    4874:	20 e0       	ldi	r18, 0x00	; 0
    4876:	30 e0       	ldi	r19, 0x00	; 0
    4878:	40 e2       	ldi	r20, 0x20	; 32
    487a:	51 e4       	ldi	r21, 0x41	; 65
    487c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4880:	dc 01       	movw	r26, r24
    4882:	cb 01       	movw	r24, r22
    4884:	8e 01       	movw	r16, r28
    4886:	05 5b       	subi	r16, 0xB5	; 181
    4888:	1f 4f       	sbci	r17, 0xFF	; 255
    488a:	bc 01       	movw	r22, r24
    488c:	cd 01       	movw	r24, r26
    488e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4892:	dc 01       	movw	r26, r24
    4894:	cb 01       	movw	r24, r22
    4896:	f8 01       	movw	r30, r16
    4898:	91 83       	std	Z+1, r25	; 0x01
    489a:	80 83       	st	Z, r24
    489c:	1f c0       	rjmp	.+62     	; 0x48dc <stepper_rotate+0x1524>
    489e:	fe 01       	movw	r30, r28
    48a0:	e7 5b       	subi	r30, 0xB7	; 183
    48a2:	ff 4f       	sbci	r31, 0xFF	; 255
    48a4:	88 ec       	ldi	r24, 0xC8	; 200
    48a6:	90 e0       	ldi	r25, 0x00	; 0
    48a8:	91 83       	std	Z+1, r25	; 0x01
    48aa:	80 83       	st	Z, r24
    48ac:	fe 01       	movw	r30, r28
    48ae:	e7 5b       	subi	r30, 0xB7	; 183
    48b0:	ff 4f       	sbci	r31, 0xFF	; 255
    48b2:	80 81       	ld	r24, Z
    48b4:	91 81       	ldd	r25, Z+1	; 0x01
    48b6:	01 97       	sbiw	r24, 0x01	; 1
    48b8:	f1 f7       	brne	.-4      	; 0x48b6 <stepper_rotate+0x14fe>
    48ba:	fe 01       	movw	r30, r28
    48bc:	e7 5b       	subi	r30, 0xB7	; 183
    48be:	ff 4f       	sbci	r31, 0xFF	; 255
    48c0:	91 83       	std	Z+1, r25	; 0x01
    48c2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48c4:	de 01       	movw	r26, r28
    48c6:	a5 5b       	subi	r26, 0xB5	; 181
    48c8:	bf 4f       	sbci	r27, 0xFF	; 255
    48ca:	fe 01       	movw	r30, r28
    48cc:	e5 5b       	subi	r30, 0xB5	; 181
    48ce:	ff 4f       	sbci	r31, 0xFF	; 255
    48d0:	80 81       	ld	r24, Z
    48d2:	91 81       	ldd	r25, Z+1	; 0x01
    48d4:	01 97       	sbiw	r24, 0x01	; 1
    48d6:	11 96       	adiw	r26, 0x01	; 1
    48d8:	9c 93       	st	X, r25
    48da:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48dc:	fe 01       	movw	r30, r28
    48de:	e5 5b       	subi	r30, 0xB5	; 181
    48e0:	ff 4f       	sbci	r31, 0xFF	; 255
    48e2:	80 81       	ld	r24, Z
    48e4:	91 81       	ldd	r25, Z+1	; 0x01
    48e6:	00 97       	sbiw	r24, 0x00	; 0
    48e8:	d1 f6       	brne	.-76     	; 0x489e <stepper_rotate+0x14e6>
    48ea:	27 c0       	rjmp	.+78     	; 0x493a <stepper_rotate+0x1582>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48ec:	8e 01       	movw	r16, r28
    48ee:	05 5b       	subi	r16, 0xB5	; 181
    48f0:	1f 4f       	sbci	r17, 0xFF	; 255
    48f2:	fe 01       	movw	r30, r28
    48f4:	e3 5b       	subi	r30, 0xB3	; 179
    48f6:	ff 4f       	sbci	r31, 0xFF	; 255
    48f8:	60 81       	ld	r22, Z
    48fa:	71 81       	ldd	r23, Z+1	; 0x01
    48fc:	82 81       	ldd	r24, Z+2	; 0x02
    48fe:	93 81       	ldd	r25, Z+3	; 0x03
    4900:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4904:	dc 01       	movw	r26, r24
    4906:	cb 01       	movw	r24, r22
    4908:	f8 01       	movw	r30, r16
    490a:	91 83       	std	Z+1, r25	; 0x01
    490c:	80 83       	st	Z, r24
    490e:	de 01       	movw	r26, r28
    4910:	a9 5b       	subi	r26, 0xB9	; 185
    4912:	bf 4f       	sbci	r27, 0xFF	; 255
    4914:	fe 01       	movw	r30, r28
    4916:	e5 5b       	subi	r30, 0xB5	; 181
    4918:	ff 4f       	sbci	r31, 0xFF	; 255
    491a:	80 81       	ld	r24, Z
    491c:	91 81       	ldd	r25, Z+1	; 0x01
    491e:	8d 93       	st	X+, r24
    4920:	9c 93       	st	X, r25
    4922:	fe 01       	movw	r30, r28
    4924:	e9 5b       	subi	r30, 0xB9	; 185
    4926:	ff 4f       	sbci	r31, 0xFF	; 255
    4928:	80 81       	ld	r24, Z
    492a:	91 81       	ldd	r25, Z+1	; 0x01
    492c:	01 97       	sbiw	r24, 0x01	; 1
    492e:	f1 f7       	brne	.-4      	; 0x492c <stepper_rotate+0x1574>
    4930:	fe 01       	movw	r30, r28
    4932:	e9 5b       	subi	r30, 0xB9	; 185
    4934:	ff 4f       	sbci	r31, 0xFF	; 255
    4936:	91 83       	std	Z+1, r25	; 0x01
    4938:	80 83       	st	Z, r24
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    493a:	82 e0       	ldi	r24, 0x02	; 2
    493c:	60 e0       	ldi	r22, 0x00	; 0
    493e:	40 e0       	ldi	r20, 0x00	; 0
    4940:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
    4944:	82 e0       	ldi	r24, 0x02	; 2
    4946:	61 e0       	ldi	r22, 0x01	; 1
    4948:	41 e0       	ldi	r20, 0x01	; 1
    494a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    494e:	82 e0       	ldi	r24, 0x02	; 2
    4950:	62 e0       	ldi	r22, 0x02	; 2
    4952:	40 e0       	ldi	r20, 0x00	; 0
    4954:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4958:	82 e0       	ldi	r24, 0x02	; 2
    495a:	63 e0       	ldi	r22, 0x03	; 3
    495c:	40 e0       	ldi	r20, 0x00	; 0
    495e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    4962:	fe 01       	movw	r30, r28
    4964:	ed 5b       	subi	r30, 0xBD	; 189
    4966:	ff 4f       	sbci	r31, 0xFF	; 255
    4968:	80 e0       	ldi	r24, 0x00	; 0
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	a8 ec       	ldi	r26, 0xC8	; 200
    496e:	b1 e4       	ldi	r27, 0x41	; 65
    4970:	80 83       	st	Z, r24
    4972:	91 83       	std	Z+1, r25	; 0x01
    4974:	a2 83       	std	Z+2, r26	; 0x02
    4976:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4978:	8e 01       	movw	r16, r28
    497a:	01 5c       	subi	r16, 0xC1	; 193
    497c:	1f 4f       	sbci	r17, 0xFF	; 255
    497e:	fe 01       	movw	r30, r28
    4980:	ed 5b       	subi	r30, 0xBD	; 189
    4982:	ff 4f       	sbci	r31, 0xFF	; 255
    4984:	60 81       	ld	r22, Z
    4986:	71 81       	ldd	r23, Z+1	; 0x01
    4988:	82 81       	ldd	r24, Z+2	; 0x02
    498a:	93 81       	ldd	r25, Z+3	; 0x03
    498c:	20 e0       	ldi	r18, 0x00	; 0
    498e:	30 e0       	ldi	r19, 0x00	; 0
    4990:	4a ef       	ldi	r20, 0xFA	; 250
    4992:	54 e4       	ldi	r21, 0x44	; 68
    4994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4998:	dc 01       	movw	r26, r24
    499a:	cb 01       	movw	r24, r22
    499c:	f8 01       	movw	r30, r16
    499e:	80 83       	st	Z, r24
    49a0:	91 83       	std	Z+1, r25	; 0x01
    49a2:	a2 83       	std	Z+2, r26	; 0x02
    49a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    49a6:	fe 01       	movw	r30, r28
    49a8:	ff 96       	adiw	r30, 0x3f	; 63
    49aa:	60 81       	ld	r22, Z
    49ac:	71 81       	ldd	r23, Z+1	; 0x01
    49ae:	82 81       	ldd	r24, Z+2	; 0x02
    49b0:	93 81       	ldd	r25, Z+3	; 0x03
    49b2:	20 e0       	ldi	r18, 0x00	; 0
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	40 e8       	ldi	r20, 0x80	; 128
    49b8:	5f e3       	ldi	r21, 0x3F	; 63
    49ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    49be:	88 23       	and	r24, r24
    49c0:	2c f4       	brge	.+10     	; 0x49cc <stepper_rotate+0x1614>
		__ticks = 1;
    49c2:	81 e0       	ldi	r24, 0x01	; 1
    49c4:	90 e0       	ldi	r25, 0x00	; 0
    49c6:	9e af       	std	Y+62, r25	; 0x3e
    49c8:	8d af       	std	Y+61, r24	; 0x3d
    49ca:	46 c0       	rjmp	.+140    	; 0x4a58 <stepper_rotate+0x16a0>
	else if (__tmp > 65535)
    49cc:	fe 01       	movw	r30, r28
    49ce:	ff 96       	adiw	r30, 0x3f	; 63
    49d0:	60 81       	ld	r22, Z
    49d2:	71 81       	ldd	r23, Z+1	; 0x01
    49d4:	82 81       	ldd	r24, Z+2	; 0x02
    49d6:	93 81       	ldd	r25, Z+3	; 0x03
    49d8:	20 e0       	ldi	r18, 0x00	; 0
    49da:	3f ef       	ldi	r19, 0xFF	; 255
    49dc:	4f e7       	ldi	r20, 0x7F	; 127
    49de:	57 e4       	ldi	r21, 0x47	; 71
    49e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    49e4:	18 16       	cp	r1, r24
    49e6:	64 f5       	brge	.+88     	; 0x4a40 <stepper_rotate+0x1688>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49e8:	fe 01       	movw	r30, r28
    49ea:	ed 5b       	subi	r30, 0xBD	; 189
    49ec:	ff 4f       	sbci	r31, 0xFF	; 255
    49ee:	60 81       	ld	r22, Z
    49f0:	71 81       	ldd	r23, Z+1	; 0x01
    49f2:	82 81       	ldd	r24, Z+2	; 0x02
    49f4:	93 81       	ldd	r25, Z+3	; 0x03
    49f6:	20 e0       	ldi	r18, 0x00	; 0
    49f8:	30 e0       	ldi	r19, 0x00	; 0
    49fa:	40 e2       	ldi	r20, 0x20	; 32
    49fc:	51 e4       	ldi	r21, 0x41	; 65
    49fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4a02:	dc 01       	movw	r26, r24
    4a04:	cb 01       	movw	r24, r22
    4a06:	bc 01       	movw	r22, r24
    4a08:	cd 01       	movw	r24, r26
    4a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a0e:	dc 01       	movw	r26, r24
    4a10:	cb 01       	movw	r24, r22
    4a12:	9e af       	std	Y+62, r25	; 0x3e
    4a14:	8d af       	std	Y+61, r24	; 0x3d
    4a16:	0f c0       	rjmp	.+30     	; 0x4a36 <stepper_rotate+0x167e>
    4a18:	88 ec       	ldi	r24, 0xC8	; 200
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	9c af       	std	Y+60, r25	; 0x3c
    4a1e:	8b af       	std	Y+59, r24	; 0x3b
    4a20:	8b ad       	ldd	r24, Y+59	; 0x3b
    4a22:	9c ad       	ldd	r25, Y+60	; 0x3c
    4a24:	01 97       	sbiw	r24, 0x01	; 1
    4a26:	f1 f7       	brne	.-4      	; 0x4a24 <stepper_rotate+0x166c>
    4a28:	9c af       	std	Y+60, r25	; 0x3c
    4a2a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a30:	01 97       	sbiw	r24, 0x01	; 1
    4a32:	9e af       	std	Y+62, r25	; 0x3e
    4a34:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a36:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a38:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a3a:	00 97       	sbiw	r24, 0x00	; 0
    4a3c:	69 f7       	brne	.-38     	; 0x4a18 <stepper_rotate+0x1660>
    4a3e:	16 c0       	rjmp	.+44     	; 0x4a6c <stepper_rotate+0x16b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a40:	fe 01       	movw	r30, r28
    4a42:	ff 96       	adiw	r30, 0x3f	; 63
    4a44:	60 81       	ld	r22, Z
    4a46:	71 81       	ldd	r23, Z+1	; 0x01
    4a48:	82 81       	ldd	r24, Z+2	; 0x02
    4a4a:	93 81       	ldd	r25, Z+3	; 0x03
    4a4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a50:	dc 01       	movw	r26, r24
    4a52:	cb 01       	movw	r24, r22
    4a54:	9e af       	std	Y+62, r25	; 0x3e
    4a56:	8d af       	std	Y+61, r24	; 0x3d
    4a58:	8d ad       	ldd	r24, Y+61	; 0x3d
    4a5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    4a5c:	9a af       	std	Y+58, r25	; 0x3a
    4a5e:	89 af       	std	Y+57, r24	; 0x39
    4a60:	89 ad       	ldd	r24, Y+57	; 0x39
    4a62:	9a ad       	ldd	r25, Y+58	; 0x3a
    4a64:	01 97       	sbiw	r24, 0x01	; 1
    4a66:	f1 f7       	brne	.-4      	; 0x4a64 <stepper_rotate+0x16ac>
    4a68:	9a af       	std	Y+58, r25	; 0x3a
    4a6a:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    4a6c:	82 e0       	ldi	r24, 0x02	; 2
    4a6e:	60 e0       	ldi	r22, 0x00	; 0
    4a70:	40 e0       	ldi	r20, 0x00	; 0
    4a72:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
    4a76:	82 e0       	ldi	r24, 0x02	; 2
    4a78:	61 e0       	ldi	r22, 0x01	; 1
    4a7a:	41 e0       	ldi	r20, 0x01	; 1
    4a7c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
    4a80:	82 e0       	ldi	r24, 0x02	; 2
    4a82:	62 e0       	ldi	r22, 0x02	; 2
    4a84:	41 e0       	ldi	r20, 0x01	; 1
    4a86:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4a8a:	82 e0       	ldi	r24, 0x02	; 2
    4a8c:	63 e0       	ldi	r22, 0x03	; 3
    4a8e:	40 e0       	ldi	r20, 0x00	; 0
    4a90:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    4a94:	80 e0       	ldi	r24, 0x00	; 0
    4a96:	90 e0       	ldi	r25, 0x00	; 0
    4a98:	a8 ec       	ldi	r26, 0xC8	; 200
    4a9a:	b1 e4       	ldi	r27, 0x41	; 65
    4a9c:	8d ab       	std	Y+53, r24	; 0x35
    4a9e:	9e ab       	std	Y+54, r25	; 0x36
    4aa0:	af ab       	std	Y+55, r26	; 0x37
    4aa2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4aa4:	6d a9       	ldd	r22, Y+53	; 0x35
    4aa6:	7e a9       	ldd	r23, Y+54	; 0x36
    4aa8:	8f a9       	ldd	r24, Y+55	; 0x37
    4aaa:	98 ad       	ldd	r25, Y+56	; 0x38
    4aac:	20 e0       	ldi	r18, 0x00	; 0
    4aae:	30 e0       	ldi	r19, 0x00	; 0
    4ab0:	4a ef       	ldi	r20, 0xFA	; 250
    4ab2:	54 e4       	ldi	r21, 0x44	; 68
    4ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ab8:	dc 01       	movw	r26, r24
    4aba:	cb 01       	movw	r24, r22
    4abc:	89 ab       	std	Y+49, r24	; 0x31
    4abe:	9a ab       	std	Y+50, r25	; 0x32
    4ac0:	ab ab       	std	Y+51, r26	; 0x33
    4ac2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4ac4:	69 a9       	ldd	r22, Y+49	; 0x31
    4ac6:	7a a9       	ldd	r23, Y+50	; 0x32
    4ac8:	8b a9       	ldd	r24, Y+51	; 0x33
    4aca:	9c a9       	ldd	r25, Y+52	; 0x34
    4acc:	20 e0       	ldi	r18, 0x00	; 0
    4ace:	30 e0       	ldi	r19, 0x00	; 0
    4ad0:	40 e8       	ldi	r20, 0x80	; 128
    4ad2:	5f e3       	ldi	r21, 0x3F	; 63
    4ad4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4ad8:	88 23       	and	r24, r24
    4ada:	2c f4       	brge	.+10     	; 0x4ae6 <stepper_rotate+0x172e>
		__ticks = 1;
    4adc:	81 e0       	ldi	r24, 0x01	; 1
    4ade:	90 e0       	ldi	r25, 0x00	; 0
    4ae0:	98 ab       	std	Y+48, r25	; 0x30
    4ae2:	8f a7       	std	Y+47, r24	; 0x2f
    4ae4:	3f c0       	rjmp	.+126    	; 0x4b64 <stepper_rotate+0x17ac>
	else if (__tmp > 65535)
    4ae6:	69 a9       	ldd	r22, Y+49	; 0x31
    4ae8:	7a a9       	ldd	r23, Y+50	; 0x32
    4aea:	8b a9       	ldd	r24, Y+51	; 0x33
    4aec:	9c a9       	ldd	r25, Y+52	; 0x34
    4aee:	20 e0       	ldi	r18, 0x00	; 0
    4af0:	3f ef       	ldi	r19, 0xFF	; 255
    4af2:	4f e7       	ldi	r20, 0x7F	; 127
    4af4:	57 e4       	ldi	r21, 0x47	; 71
    4af6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4afa:	18 16       	cp	r1, r24
    4afc:	4c f5       	brge	.+82     	; 0x4b50 <stepper_rotate+0x1798>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4afe:	6d a9       	ldd	r22, Y+53	; 0x35
    4b00:	7e a9       	ldd	r23, Y+54	; 0x36
    4b02:	8f a9       	ldd	r24, Y+55	; 0x37
    4b04:	98 ad       	ldd	r25, Y+56	; 0x38
    4b06:	20 e0       	ldi	r18, 0x00	; 0
    4b08:	30 e0       	ldi	r19, 0x00	; 0
    4b0a:	40 e2       	ldi	r20, 0x20	; 32
    4b0c:	51 e4       	ldi	r21, 0x41	; 65
    4b0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b12:	dc 01       	movw	r26, r24
    4b14:	cb 01       	movw	r24, r22
    4b16:	bc 01       	movw	r22, r24
    4b18:	cd 01       	movw	r24, r26
    4b1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b1e:	dc 01       	movw	r26, r24
    4b20:	cb 01       	movw	r24, r22
    4b22:	98 ab       	std	Y+48, r25	; 0x30
    4b24:	8f a7       	std	Y+47, r24	; 0x2f
    4b26:	0f c0       	rjmp	.+30     	; 0x4b46 <stepper_rotate+0x178e>
    4b28:	88 ec       	ldi	r24, 0xC8	; 200
    4b2a:	90 e0       	ldi	r25, 0x00	; 0
    4b2c:	9e a7       	std	Y+46, r25	; 0x2e
    4b2e:	8d a7       	std	Y+45, r24	; 0x2d
    4b30:	8d a5       	ldd	r24, Y+45	; 0x2d
    4b32:	9e a5       	ldd	r25, Y+46	; 0x2e
    4b34:	01 97       	sbiw	r24, 0x01	; 1
    4b36:	f1 f7       	brne	.-4      	; 0x4b34 <stepper_rotate+0x177c>
    4b38:	9e a7       	std	Y+46, r25	; 0x2e
    4b3a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4b3c:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b3e:	98 a9       	ldd	r25, Y+48	; 0x30
    4b40:	01 97       	sbiw	r24, 0x01	; 1
    4b42:	98 ab       	std	Y+48, r25	; 0x30
    4b44:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b48:	98 a9       	ldd	r25, Y+48	; 0x30
    4b4a:	00 97       	sbiw	r24, 0x00	; 0
    4b4c:	69 f7       	brne	.-38     	; 0x4b28 <stepper_rotate+0x1770>
    4b4e:	14 c0       	rjmp	.+40     	; 0x4b78 <stepper_rotate+0x17c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4b50:	69 a9       	ldd	r22, Y+49	; 0x31
    4b52:	7a a9       	ldd	r23, Y+50	; 0x32
    4b54:	8b a9       	ldd	r24, Y+51	; 0x33
    4b56:	9c a9       	ldd	r25, Y+52	; 0x34
    4b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	cb 01       	movw	r24, r22
    4b60:	98 ab       	std	Y+48, r25	; 0x30
    4b62:	8f a7       	std	Y+47, r24	; 0x2f
    4b64:	8f a5       	ldd	r24, Y+47	; 0x2f
    4b66:	98 a9       	ldd	r25, Y+48	; 0x30
    4b68:	9c a7       	std	Y+44, r25	; 0x2c
    4b6a:	8b a7       	std	Y+43, r24	; 0x2b
    4b6c:	8b a5       	ldd	r24, Y+43	; 0x2b
    4b6e:	9c a5       	ldd	r25, Y+44	; 0x2c
    4b70:	01 97       	sbiw	r24, 0x01	; 1
    4b72:	f1 f7       	brne	.-4      	; 0x4b70 <stepper_rotate+0x17b8>
    4b74:	9c a7       	std	Y+44, r25	; 0x2c
    4b76:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
    4b78:	82 e0       	ldi	r24, 0x02	; 2
    4b7a:	60 e0       	ldi	r22, 0x00	; 0
    4b7c:	40 e0       	ldi	r20, 0x00	; 0
    4b7e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    4b82:	82 e0       	ldi	r24, 0x02	; 2
    4b84:	61 e0       	ldi	r22, 0x01	; 1
    4b86:	40 e0       	ldi	r20, 0x00	; 0
    4b88:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
    4b8c:	82 e0       	ldi	r24, 0x02	; 2
    4b8e:	62 e0       	ldi	r22, 0x02	; 2
    4b90:	41 e0       	ldi	r20, 0x01	; 1
    4b92:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4b96:	82 e0       	ldi	r24, 0x02	; 2
    4b98:	63 e0       	ldi	r22, 0x03	; 3
    4b9a:	40 e0       	ldi	r20, 0x00	; 0
    4b9c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    4ba0:	80 e0       	ldi	r24, 0x00	; 0
    4ba2:	90 e0       	ldi	r25, 0x00	; 0
    4ba4:	a8 ec       	ldi	r26, 0xC8	; 200
    4ba6:	b1 e4       	ldi	r27, 0x41	; 65
    4ba8:	8f a3       	std	Y+39, r24	; 0x27
    4baa:	98 a7       	std	Y+40, r25	; 0x28
    4bac:	a9 a7       	std	Y+41, r26	; 0x29
    4bae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4bb0:	6f a1       	ldd	r22, Y+39	; 0x27
    4bb2:	78 a5       	ldd	r23, Y+40	; 0x28
    4bb4:	89 a5       	ldd	r24, Y+41	; 0x29
    4bb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    4bb8:	20 e0       	ldi	r18, 0x00	; 0
    4bba:	30 e0       	ldi	r19, 0x00	; 0
    4bbc:	4a ef       	ldi	r20, 0xFA	; 250
    4bbe:	54 e4       	ldi	r21, 0x44	; 68
    4bc0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4bc4:	dc 01       	movw	r26, r24
    4bc6:	cb 01       	movw	r24, r22
    4bc8:	8b a3       	std	Y+35, r24	; 0x23
    4bca:	9c a3       	std	Y+36, r25	; 0x24
    4bcc:	ad a3       	std	Y+37, r26	; 0x25
    4bce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4bd0:	6b a1       	ldd	r22, Y+35	; 0x23
    4bd2:	7c a1       	ldd	r23, Y+36	; 0x24
    4bd4:	8d a1       	ldd	r24, Y+37	; 0x25
    4bd6:	9e a1       	ldd	r25, Y+38	; 0x26
    4bd8:	20 e0       	ldi	r18, 0x00	; 0
    4bda:	30 e0       	ldi	r19, 0x00	; 0
    4bdc:	40 e8       	ldi	r20, 0x80	; 128
    4bde:	5f e3       	ldi	r21, 0x3F	; 63
    4be0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4be4:	88 23       	and	r24, r24
    4be6:	2c f4       	brge	.+10     	; 0x4bf2 <stepper_rotate+0x183a>
		__ticks = 1;
    4be8:	81 e0       	ldi	r24, 0x01	; 1
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	9a a3       	std	Y+34, r25	; 0x22
    4bee:	89 a3       	std	Y+33, r24	; 0x21
    4bf0:	3f c0       	rjmp	.+126    	; 0x4c70 <stepper_rotate+0x18b8>
	else if (__tmp > 65535)
    4bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    4bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    4bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    4bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    4bfa:	20 e0       	ldi	r18, 0x00	; 0
    4bfc:	3f ef       	ldi	r19, 0xFF	; 255
    4bfe:	4f e7       	ldi	r20, 0x7F	; 127
    4c00:	57 e4       	ldi	r21, 0x47	; 71
    4c02:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4c06:	18 16       	cp	r1, r24
    4c08:	4c f5       	brge	.+82     	; 0x4c5c <stepper_rotate+0x18a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4c0a:	6f a1       	ldd	r22, Y+39	; 0x27
    4c0c:	78 a5       	ldd	r23, Y+40	; 0x28
    4c0e:	89 a5       	ldd	r24, Y+41	; 0x29
    4c10:	9a a5       	ldd	r25, Y+42	; 0x2a
    4c12:	20 e0       	ldi	r18, 0x00	; 0
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	40 e2       	ldi	r20, 0x20	; 32
    4c18:	51 e4       	ldi	r21, 0x41	; 65
    4c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c1e:	dc 01       	movw	r26, r24
    4c20:	cb 01       	movw	r24, r22
    4c22:	bc 01       	movw	r22, r24
    4c24:	cd 01       	movw	r24, r26
    4c26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c2a:	dc 01       	movw	r26, r24
    4c2c:	cb 01       	movw	r24, r22
    4c2e:	9a a3       	std	Y+34, r25	; 0x22
    4c30:	89 a3       	std	Y+33, r24	; 0x21
    4c32:	0f c0       	rjmp	.+30     	; 0x4c52 <stepper_rotate+0x189a>
    4c34:	88 ec       	ldi	r24, 0xC8	; 200
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	98 a3       	std	Y+32, r25	; 0x20
    4c3a:	8f 8f       	std	Y+31, r24	; 0x1f
    4c3c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4c3e:	98 a1       	ldd	r25, Y+32	; 0x20
    4c40:	01 97       	sbiw	r24, 0x01	; 1
    4c42:	f1 f7       	brne	.-4      	; 0x4c40 <stepper_rotate+0x1888>
    4c44:	98 a3       	std	Y+32, r25	; 0x20
    4c46:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4c48:	89 a1       	ldd	r24, Y+33	; 0x21
    4c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    4c4c:	01 97       	sbiw	r24, 0x01	; 1
    4c4e:	9a a3       	std	Y+34, r25	; 0x22
    4c50:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4c52:	89 a1       	ldd	r24, Y+33	; 0x21
    4c54:	9a a1       	ldd	r25, Y+34	; 0x22
    4c56:	00 97       	sbiw	r24, 0x00	; 0
    4c58:	69 f7       	brne	.-38     	; 0x4c34 <stepper_rotate+0x187c>
    4c5a:	14 c0       	rjmp	.+40     	; 0x4c84 <stepper_rotate+0x18cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4c5c:	6b a1       	ldd	r22, Y+35	; 0x23
    4c5e:	7c a1       	ldd	r23, Y+36	; 0x24
    4c60:	8d a1       	ldd	r24, Y+37	; 0x25
    4c62:	9e a1       	ldd	r25, Y+38	; 0x26
    4c64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4c68:	dc 01       	movw	r26, r24
    4c6a:	cb 01       	movw	r24, r22
    4c6c:	9a a3       	std	Y+34, r25	; 0x22
    4c6e:	89 a3       	std	Y+33, r24	; 0x21
    4c70:	89 a1       	ldd	r24, Y+33	; 0x21
    4c72:	9a a1       	ldd	r25, Y+34	; 0x22
    4c74:	9e 8f       	std	Y+30, r25	; 0x1e
    4c76:	8d 8f       	std	Y+29, r24	; 0x1d
    4c78:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c7a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c7c:	01 97       	sbiw	r24, 0x01	; 1
    4c7e:	f1 f7       	brne	.-4      	; 0x4c7c <stepper_rotate+0x18c4>
    4c80:	9e 8f       	std	Y+30, r25	; 0x1e
    4c82:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    4c84:	82 e0       	ldi	r24, 0x02	; 2
    4c86:	60 e0       	ldi	r22, 0x00	; 0
    4c88:	41 e0       	ldi	r20, 0x01	; 1
    4c8a:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    4c8e:	82 e0       	ldi	r24, 0x02	; 2
    4c90:	61 e0       	ldi	r22, 0x01	; 1
    4c92:	40 e0       	ldi	r20, 0x00	; 0
    4c94:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	62 e0       	ldi	r22, 0x02	; 2
    4c9c:	41 e0       	ldi	r20, 0x01	; 1
    4c9e:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4ca2:	82 e0       	ldi	r24, 0x02	; 2
    4ca4:	63 e0       	ldi	r22, 0x03	; 3
    4ca6:	40 e0       	ldi	r20, 0x00	; 0
    4ca8:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	a8 ec       	ldi	r26, 0xC8	; 200
    4cb2:	b1 e4       	ldi	r27, 0x41	; 65
    4cb4:	89 8f       	std	Y+25, r24	; 0x19
    4cb6:	9a 8f       	std	Y+26, r25	; 0x1a
    4cb8:	ab 8f       	std	Y+27, r26	; 0x1b
    4cba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4cbc:	69 8d       	ldd	r22, Y+25	; 0x19
    4cbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4cc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4cc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	4a ef       	ldi	r20, 0xFA	; 250
    4cca:	54 e4       	ldi	r21, 0x44	; 68
    4ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	8d 8b       	std	Y+21, r24	; 0x15
    4cd6:	9e 8b       	std	Y+22, r25	; 0x16
    4cd8:	af 8b       	std	Y+23, r26	; 0x17
    4cda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    4cde:	7e 89       	ldd	r23, Y+22	; 0x16
    4ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    4ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    4ce4:	20 e0       	ldi	r18, 0x00	; 0
    4ce6:	30 e0       	ldi	r19, 0x00	; 0
    4ce8:	40 e8       	ldi	r20, 0x80	; 128
    4cea:	5f e3       	ldi	r21, 0x3F	; 63
    4cec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4cf0:	88 23       	and	r24, r24
    4cf2:	2c f4       	brge	.+10     	; 0x4cfe <stepper_rotate+0x1946>
		__ticks = 1;
    4cf4:	81 e0       	ldi	r24, 0x01	; 1
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	9c 8b       	std	Y+20, r25	; 0x14
    4cfa:	8b 8b       	std	Y+19, r24	; 0x13
    4cfc:	3f c0       	rjmp	.+126    	; 0x4d7c <stepper_rotate+0x19c4>
	else if (__tmp > 65535)
    4cfe:	6d 89       	ldd	r22, Y+21	; 0x15
    4d00:	7e 89       	ldd	r23, Y+22	; 0x16
    4d02:	8f 89       	ldd	r24, Y+23	; 0x17
    4d04:	98 8d       	ldd	r25, Y+24	; 0x18
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	3f ef       	ldi	r19, 0xFF	; 255
    4d0a:	4f e7       	ldi	r20, 0x7F	; 127
    4d0c:	57 e4       	ldi	r21, 0x47	; 71
    4d0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4d12:	18 16       	cp	r1, r24
    4d14:	4c f5       	brge	.+82     	; 0x4d68 <stepper_rotate+0x19b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4d16:	69 8d       	ldd	r22, Y+25	; 0x19
    4d18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4d1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4d1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4d1e:	20 e0       	ldi	r18, 0x00	; 0
    4d20:	30 e0       	ldi	r19, 0x00	; 0
    4d22:	40 e2       	ldi	r20, 0x20	; 32
    4d24:	51 e4       	ldi	r21, 0x41	; 65
    4d26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4d2a:	dc 01       	movw	r26, r24
    4d2c:	cb 01       	movw	r24, r22
    4d2e:	bc 01       	movw	r22, r24
    4d30:	cd 01       	movw	r24, r26
    4d32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d36:	dc 01       	movw	r26, r24
    4d38:	cb 01       	movw	r24, r22
    4d3a:	9c 8b       	std	Y+20, r25	; 0x14
    4d3c:	8b 8b       	std	Y+19, r24	; 0x13
    4d3e:	0f c0       	rjmp	.+30     	; 0x4d5e <stepper_rotate+0x19a6>
    4d40:	88 ec       	ldi	r24, 0xC8	; 200
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	9a 8b       	std	Y+18, r25	; 0x12
    4d46:	89 8b       	std	Y+17, r24	; 0x11
    4d48:	89 89       	ldd	r24, Y+17	; 0x11
    4d4a:	9a 89       	ldd	r25, Y+18	; 0x12
    4d4c:	01 97       	sbiw	r24, 0x01	; 1
    4d4e:	f1 f7       	brne	.-4      	; 0x4d4c <stepper_rotate+0x1994>
    4d50:	9a 8b       	std	Y+18, r25	; 0x12
    4d52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d54:	8b 89       	ldd	r24, Y+19	; 0x13
    4d56:	9c 89       	ldd	r25, Y+20	; 0x14
    4d58:	01 97       	sbiw	r24, 0x01	; 1
    4d5a:	9c 8b       	std	Y+20, r25	; 0x14
    4d5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d5e:	8b 89       	ldd	r24, Y+19	; 0x13
    4d60:	9c 89       	ldd	r25, Y+20	; 0x14
    4d62:	00 97       	sbiw	r24, 0x00	; 0
    4d64:	69 f7       	brne	.-38     	; 0x4d40 <stepper_rotate+0x1988>
    4d66:	14 c0       	rjmp	.+40     	; 0x4d90 <stepper_rotate+0x19d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d68:	6d 89       	ldd	r22, Y+21	; 0x15
    4d6a:	7e 89       	ldd	r23, Y+22	; 0x16
    4d6c:	8f 89       	ldd	r24, Y+23	; 0x17
    4d6e:	98 8d       	ldd	r25, Y+24	; 0x18
    4d70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d74:	dc 01       	movw	r26, r24
    4d76:	cb 01       	movw	r24, r22
    4d78:	9c 8b       	std	Y+20, r25	; 0x14
    4d7a:	8b 8b       	std	Y+19, r24	; 0x13
    4d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    4d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    4d80:	98 8b       	std	Y+16, r25	; 0x10
    4d82:	8f 87       	std	Y+15, r24	; 0x0f
    4d84:	8f 85       	ldd	r24, Y+15	; 0x0f
    4d86:	98 89       	ldd	r25, Y+16	; 0x10
    4d88:	01 97       	sbiw	r24, 0x01	; 1
    4d8a:	f1 f7       	brne	.-4      	; 0x4d88 <stepper_rotate+0x19d0>
    4d8c:	98 8b       	std	Y+16, r25	; 0x10
    4d8e:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(DELAY);

			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
    4d90:	82 e0       	ldi	r24, 0x02	; 2
    4d92:	60 e0       	ldi	r22, 0x00	; 0
    4d94:	41 e0       	ldi	r20, 0x01	; 1
    4d96:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
    4d9a:	82 e0       	ldi	r24, 0x02	; 2
    4d9c:	61 e0       	ldi	r22, 0x01	; 1
    4d9e:	40 e0       	ldi	r20, 0x00	; 0
    4da0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
    4da4:	82 e0       	ldi	r24, 0x02	; 2
    4da6:	62 e0       	ldi	r22, 0x02	; 2
    4da8:	40 e0       	ldi	r20, 0x00	; 0
    4daa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
			GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
    4dae:	82 e0       	ldi	r24, 0x02	; 2
    4db0:	63 e0       	ldi	r22, 0x03	; 3
    4db2:	40 e0       	ldi	r20, 0x00	; 0
    4db4:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
    4db8:	80 e0       	ldi	r24, 0x00	; 0
    4dba:	90 e0       	ldi	r25, 0x00	; 0
    4dbc:	a8 ec       	ldi	r26, 0xC8	; 200
    4dbe:	b1 e4       	ldi	r27, 0x41	; 65
    4dc0:	8b 87       	std	Y+11, r24	; 0x0b
    4dc2:	9c 87       	std	Y+12, r25	; 0x0c
    4dc4:	ad 87       	std	Y+13, r26	; 0x0d
    4dc6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    4dca:	7c 85       	ldd	r23, Y+12	; 0x0c
    4dcc:	8d 85       	ldd	r24, Y+13	; 0x0d
    4dce:	9e 85       	ldd	r25, Y+14	; 0x0e
    4dd0:	20 e0       	ldi	r18, 0x00	; 0
    4dd2:	30 e0       	ldi	r19, 0x00	; 0
    4dd4:	4a ef       	ldi	r20, 0xFA	; 250
    4dd6:	54 e4       	ldi	r21, 0x44	; 68
    4dd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ddc:	dc 01       	movw	r26, r24
    4dde:	cb 01       	movw	r24, r22
    4de0:	8f 83       	std	Y+7, r24	; 0x07
    4de2:	98 87       	std	Y+8, r25	; 0x08
    4de4:	a9 87       	std	Y+9, r26	; 0x09
    4de6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4de8:	6f 81       	ldd	r22, Y+7	; 0x07
    4dea:	78 85       	ldd	r23, Y+8	; 0x08
    4dec:	89 85       	ldd	r24, Y+9	; 0x09
    4dee:	9a 85       	ldd	r25, Y+10	; 0x0a
    4df0:	20 e0       	ldi	r18, 0x00	; 0
    4df2:	30 e0       	ldi	r19, 0x00	; 0
    4df4:	40 e8       	ldi	r20, 0x80	; 128
    4df6:	5f e3       	ldi	r21, 0x3F	; 63
    4df8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4dfc:	88 23       	and	r24, r24
    4dfe:	2c f4       	brge	.+10     	; 0x4e0a <stepper_rotate+0x1a52>
		__ticks = 1;
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	9e 83       	std	Y+6, r25	; 0x06
    4e06:	8d 83       	std	Y+5, r24	; 0x05
    4e08:	3f c0       	rjmp	.+126    	; 0x4e88 <stepper_rotate+0x1ad0>
	else if (__tmp > 65535)
    4e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    4e0c:	78 85       	ldd	r23, Y+8	; 0x08
    4e0e:	89 85       	ldd	r24, Y+9	; 0x09
    4e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	3f ef       	ldi	r19, 0xFF	; 255
    4e16:	4f e7       	ldi	r20, 0x7F	; 127
    4e18:	57 e4       	ldi	r21, 0x47	; 71
    4e1a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4e1e:	18 16       	cp	r1, r24
    4e20:	4c f5       	brge	.+82     	; 0x4e74 <stepper_rotate+0x1abc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e22:	6b 85       	ldd	r22, Y+11	; 0x0b
    4e24:	7c 85       	ldd	r23, Y+12	; 0x0c
    4e26:	8d 85       	ldd	r24, Y+13	; 0x0d
    4e28:	9e 85       	ldd	r25, Y+14	; 0x0e
    4e2a:	20 e0       	ldi	r18, 0x00	; 0
    4e2c:	30 e0       	ldi	r19, 0x00	; 0
    4e2e:	40 e2       	ldi	r20, 0x20	; 32
    4e30:	51 e4       	ldi	r21, 0x41	; 65
    4e32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e36:	dc 01       	movw	r26, r24
    4e38:	cb 01       	movw	r24, r22
    4e3a:	bc 01       	movw	r22, r24
    4e3c:	cd 01       	movw	r24, r26
    4e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e42:	dc 01       	movw	r26, r24
    4e44:	cb 01       	movw	r24, r22
    4e46:	9e 83       	std	Y+6, r25	; 0x06
    4e48:	8d 83       	std	Y+5, r24	; 0x05
    4e4a:	0f c0       	rjmp	.+30     	; 0x4e6a <stepper_rotate+0x1ab2>
    4e4c:	88 ec       	ldi	r24, 0xC8	; 200
    4e4e:	90 e0       	ldi	r25, 0x00	; 0
    4e50:	9c 83       	std	Y+4, r25	; 0x04
    4e52:	8b 83       	std	Y+3, r24	; 0x03
    4e54:	8b 81       	ldd	r24, Y+3	; 0x03
    4e56:	9c 81       	ldd	r25, Y+4	; 0x04
    4e58:	01 97       	sbiw	r24, 0x01	; 1
    4e5a:	f1 f7       	brne	.-4      	; 0x4e58 <stepper_rotate+0x1aa0>
    4e5c:	9c 83       	std	Y+4, r25	; 0x04
    4e5e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e60:	8d 81       	ldd	r24, Y+5	; 0x05
    4e62:	9e 81       	ldd	r25, Y+6	; 0x06
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	9e 83       	std	Y+6, r25	; 0x06
    4e68:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4e6a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e6c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e6e:	00 97       	sbiw	r24, 0x00	; 0
    4e70:	69 f7       	brne	.-38     	; 0x4e4c <stepper_rotate+0x1a94>
    4e72:	14 c0       	rjmp	.+40     	; 0x4e9c <stepper_rotate+0x1ae4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4e74:	6f 81       	ldd	r22, Y+7	; 0x07
    4e76:	78 85       	ldd	r23, Y+8	; 0x08
    4e78:	89 85       	ldd	r24, Y+9	; 0x09
    4e7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    4e7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e80:	dc 01       	movw	r26, r24
    4e82:	cb 01       	movw	r24, r22
    4e84:	9e 83       	std	Y+6, r25	; 0x06
    4e86:	8d 83       	std	Y+5, r24	; 0x05
    4e88:	8d 81       	ldd	r24, Y+5	; 0x05
    4e8a:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8c:	9a 83       	std	Y+2, r25	; 0x02
    4e8e:	89 83       	std	Y+1, r24	; 0x01
    4e90:	89 81       	ldd	r24, Y+1	; 0x01
    4e92:	9a 81       	ldd	r25, Y+2	; 0x02
    4e94:	01 97       	sbiw	r24, 0x01	; 1
    4e96:	f1 f7       	brne	.-4      	; 0x4e94 <stepper_rotate+0x1adc>
    4e98:	9a 83       	std	Y+2, r25	; 0x02
    4e9a:	89 83       	std	Y+1, r24	; 0x01
	else /* Left direction */
	{
		/*Description
		 * It moves with this sequence {1 , 1&4, 4, 4&2, 2, 2&3, 3, 3&1, 1}
		 */
		for(counter = 0; counter < actual_step; counter++)
    4e9c:	de 01       	movw	r26, r28
    4e9e:	a2 50       	subi	r26, 0x02	; 2
    4ea0:	bf 4f       	sbci	r27, 0xFF	; 255
    4ea2:	fe 01       	movw	r30, r28
    4ea4:	e2 50       	subi	r30, 0x02	; 2
    4ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea8:	80 81       	ld	r24, Z
    4eaa:	8f 5f       	subi	r24, 0xFF	; 255
    4eac:	8c 93       	st	X, r24
    4eae:	fe 01       	movw	r30, r28
    4eb0:	e2 50       	subi	r30, 0x02	; 2
    4eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb4:	80 81       	ld	r24, Z
    4eb6:	28 2f       	mov	r18, r24
    4eb8:	30 e0       	ldi	r19, 0x00	; 0
    4eba:	fe 01       	movw	r30, r28
    4ebc:	e3 50       	subi	r30, 0x03	; 3
    4ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec0:	80 81       	ld	r24, Z
    4ec2:	99 27       	eor	r25, r25
    4ec4:	87 fd       	sbrc	r24, 7
    4ec6:	90 95       	com	r25
    4ec8:	28 17       	cp	r18, r24
    4eca:	39 07       	cpc	r19, r25
    4ecc:	0c f4       	brge	.+2      	; 0x4ed0 <stepper_rotate+0x1b18>
    4ece:	19 ca       	rjmp	.-3022   	; 0x4302 <stepper_rotate+0xf4a>
			_delay_ms(DELAY);
		}
	}

	/* Disable the motor */
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, LOGIC_LOW);
    4ed0:	82 e0       	ldi	r24, 0x02	; 2
    4ed2:	66 e0       	ldi	r22, 0x06	; 6
    4ed4:	40 e0       	ldi	r20, 0x00	; 0
    4ed6:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, LOGIC_LOW);
    4eda:	82 e0       	ldi	r24, 0x02	; 2
    4edc:	67 e0       	ldi	r22, 0x07	; 7
    4ede:	40 e0       	ldi	r20, 0x00	; 0
    4ee0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <GPIO_writePin>
}
    4ee4:	cf 5f       	subi	r28, 0xFF	; 255
    4ee6:	de 4f       	sbci	r29, 0xFE	; 254
    4ee8:	0f b6       	in	r0, 0x3f	; 63
    4eea:	f8 94       	cli
    4eec:	de bf       	out	0x3e, r29	; 62
    4eee:	0f be       	out	0x3f, r0	; 63
    4ef0:	cd bf       	out	0x3d, r28	; 61
    4ef2:	cf 91       	pop	r28
    4ef4:	df 91       	pop	r29
    4ef6:	1f 91       	pop	r17
    4ef8:	0f 91       	pop	r16
    4efa:	08 95       	ret

00004efc <Drivers_init>:
uint8 Receive_Check(uint8 *Check_ptr);

/**-------------------------Function Section------------------------**/
/* Initializing all drivers */
void Drivers_init(void)
{
    4efc:	df 93       	push	r29
    4efe:	cf 93       	push	r28
    4f00:	cd b7       	in	r28, 0x3d	; 61
    4f02:	de b7       	in	r29, 0x3e	; 62
    4f04:	e3 97       	sbiw	r28, 0x33	; 51
    4f06:	0f b6       	in	r0, 0x3f	; 63
    4f08:	f8 94       	cli
    4f0a:	de bf       	out	0x3e, r29	; 62
    4f0c:	0f be       	out	0x3f, r0	; 63
    4f0e:	cd bf       	out	0x3d, r28	; 61
	 * UART_STOP_BIT_SELECT : 1-bit
	 * UART_CLOCK_POLARITY : A-Sync Rising
	 * baud_rate : 9600
	 *
	 */
	UART_ConfigType UART_Config = {DOUBLE_TR_SPEED, RECEIVE_INT_EN_OFF,TRANSMIT_INT_EN_OFF,EMPTY_INT_EN_OFF,RECEIVER_EN_ON,TRANSMITTER_EN_OFF,EIGHT_BIT,UBRRH_REG,ASYNCHRONOUS,PARITY_DISABLE,ONE_BIT,A_Sync_RISING_EDGE,9600};
    4f10:	ce 01       	movw	r24, r28
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	9b a7       	std	Y+43, r25	; 0x2b
    4f16:	8a a7       	std	Y+42, r24	; 0x2a
    4f18:	e8 ea       	ldi	r30, 0xA8	; 168
    4f1a:	f0 e0       	ldi	r31, 0x00	; 0
    4f1c:	fd a7       	std	Y+45, r31	; 0x2d
    4f1e:	ec a7       	std	Y+44, r30	; 0x2c
    4f20:	f0 e1       	ldi	r31, 0x10	; 16
    4f22:	fe a7       	std	Y+46, r31	; 0x2e
    4f24:	ec a5       	ldd	r30, Y+44	; 0x2c
    4f26:	fd a5       	ldd	r31, Y+45	; 0x2d
    4f28:	00 80       	ld	r0, Z
    4f2a:	8c a5       	ldd	r24, Y+44	; 0x2c
    4f2c:	9d a5       	ldd	r25, Y+45	; 0x2d
    4f2e:	01 96       	adiw	r24, 0x01	; 1
    4f30:	9d a7       	std	Y+45, r25	; 0x2d
    4f32:	8c a7       	std	Y+44, r24	; 0x2c
    4f34:	ea a5       	ldd	r30, Y+42	; 0x2a
    4f36:	fb a5       	ldd	r31, Y+43	; 0x2b
    4f38:	00 82       	st	Z, r0
    4f3a:	8a a5       	ldd	r24, Y+42	; 0x2a
    4f3c:	9b a5       	ldd	r25, Y+43	; 0x2b
    4f3e:	01 96       	adiw	r24, 0x01	; 1
    4f40:	9b a7       	std	Y+43, r25	; 0x2b
    4f42:	8a a7       	std	Y+42, r24	; 0x2a
    4f44:	9e a5       	ldd	r25, Y+46	; 0x2e
    4f46:	91 50       	subi	r25, 0x01	; 1
    4f48:	9e a7       	std	Y+46, r25	; 0x2e
    4f4a:	ee a5       	ldd	r30, Y+46	; 0x2e
    4f4c:	ee 23       	and	r30, r30
    4f4e:	51 f7       	brne	.-44     	; 0x4f24 <Drivers_init+0x28>
	UART_init(&UART_Config); /* Received to Config_ptr */
    4f50:	ce 01       	movw	r24, r28
    4f52:	01 96       	adiw	r24, 0x01	; 1
    4f54:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <UART_init>
	/* ------------------------------------------------------------------ */

	/* Initializing DC-Motor */
	DCMotor_init();
    4f58:	0e 94 f1 0e 	call	0x1de2	; 0x1de2 <DCMotor_init>
	/* ------------------------------------------------------------------ */

	/* Initializing Timer0 PWM */
	Timer0_ConfigType Timer0_PWM_Config;
	Timer0_PWM_Config.Timer0_PreScaler = F0_TIMER64; /* F_CPU/64. Assuming F_PWM = 500 Hz */
    4f5c:	83 e0       	ldi	r24, 0x03	; 3
    4f5e:	89 8b       	std	Y+17, r24	; 0x11
	Timer0_PWM_Init(&Timer0_PWM_Config);
    4f60:	ce 01       	movw	r24, r28
    4f62:	41 96       	adiw	r24, 0x11	; 17
    4f64:	0e 94 c7 0a 	call	0x158e	; 0x158e <Timer0_PWM_Init>
	/* ------------------------------------------------------------------ */

	/* Initializing LCD 4-PIN Mode */
	LCD_init();
    4f68:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_init>
	/* ------------------------------------------------------------------ */

	/* Stepper Motor Init */
	Stepper_Motor_init();
    4f6c:	0e 94 ad 19 	call	0x335a	; 0x335a <Stepper_Motor_init>
	 *  interruptOvf : Disabled
	 *  TCNT1_Value : 0
	 *  OCR1A_Value : 7813
	 *  OCR1B_Value : ---
	 */
	Timer1_ConfigType TIMER1_Config = {Normal_A,Normal_B,Channel_A_ON,Channel_B_OFF,TIMER1_FALLING_EDGE,NOISE_CANCELER_OFF,F_TIMER11024,CTC_OCR1A,ENABLE_INTERRUPT,DISABLE_INTERRUPT,DISABLE_INTERRUPT,0,7813,0};
    4f70:	ce 01       	movw	r24, r28
    4f72:	49 96       	adiw	r24, 0x19	; 25
    4f74:	98 ab       	std	Y+48, r25	; 0x30
    4f76:	8f a7       	std	Y+47, r24	; 0x2f
    4f78:	e7 e9       	ldi	r30, 0x97	; 151
    4f7a:	f0 e0       	ldi	r31, 0x00	; 0
    4f7c:	fa ab       	std	Y+50, r31	; 0x32
    4f7e:	e9 ab       	std	Y+49, r30	; 0x31
    4f80:	f1 e1       	ldi	r31, 0x11	; 17
    4f82:	fb ab       	std	Y+51, r31	; 0x33
    4f84:	e9 a9       	ldd	r30, Y+49	; 0x31
    4f86:	fa a9       	ldd	r31, Y+50	; 0x32
    4f88:	00 80       	ld	r0, Z
    4f8a:	89 a9       	ldd	r24, Y+49	; 0x31
    4f8c:	9a a9       	ldd	r25, Y+50	; 0x32
    4f8e:	01 96       	adiw	r24, 0x01	; 1
    4f90:	9a ab       	std	Y+50, r25	; 0x32
    4f92:	89 ab       	std	Y+49, r24	; 0x31
    4f94:	ef a5       	ldd	r30, Y+47	; 0x2f
    4f96:	f8 a9       	ldd	r31, Y+48	; 0x30
    4f98:	00 82       	st	Z, r0
    4f9a:	8f a5       	ldd	r24, Y+47	; 0x2f
    4f9c:	98 a9       	ldd	r25, Y+48	; 0x30
    4f9e:	01 96       	adiw	r24, 0x01	; 1
    4fa0:	98 ab       	std	Y+48, r25	; 0x30
    4fa2:	8f a7       	std	Y+47, r24	; 0x2f
    4fa4:	9b a9       	ldd	r25, Y+51	; 0x33
    4fa6:	91 50       	subi	r25, 0x01	; 1
    4fa8:	9b ab       	std	Y+51, r25	; 0x33
    4faa:	eb a9       	ldd	r30, Y+51	; 0x33
    4fac:	ee 23       	and	r30, r30
    4fae:	51 f7       	brne	.-44     	; 0x4f84 <Drivers_init+0x88>
	/* Setting the callback function*/
	Timer1_setCallBackONE(App_timer1);
    4fb0:	84 ec       	ldi	r24, 0xC4	; 196
    4fb2:	99 e2       	ldi	r25, 0x29	; 41
    4fb4:	0e 94 1b 0c 	call	0x1836	; 0x1836 <Timer1_setCallBackONE>
	Timer1_Init(&TIMER1_Config); /* Start Timer */
    4fb8:	ce 01       	movw	r24, r28
    4fba:	49 96       	adiw	r24, 0x19	; 25
    4fbc:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <Timer1_Init>

	/* ------------------------------------------------------------------ */
	/* Time Init */
	Display.AM_PM = 'A';
    4fc0:	81 e4       	ldi	r24, 0x41	; 65
    4fc2:	80 93 c4 00 	sts	0x00C4, r24

	/* ------------------------------------------------------------------ */
	/* Activating Interrupt system */
	SREG |= (1<<7);
    4fc6:	af e5       	ldi	r26, 0x5F	; 95
    4fc8:	b0 e0       	ldi	r27, 0x00	; 0
    4fca:	ef e5       	ldi	r30, 0x5F	; 95
    4fcc:	f0 e0       	ldi	r31, 0x00	; 0
    4fce:	80 81       	ld	r24, Z
    4fd0:	80 68       	ori	r24, 0x80	; 128
    4fd2:	8c 93       	st	X, r24
}
    4fd4:	e3 96       	adiw	r28, 0x33	; 51
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	f8 94       	cli
    4fda:	de bf       	out	0x3e, r29	; 62
    4fdc:	0f be       	out	0x3f, r0	; 63
    4fde:	cd bf       	out	0x3d, r28	; 61
    4fe0:	cf 91       	pop	r28
    4fe2:	df 91       	pop	r29
    4fe4:	08 95       	ret

00004fe6 <main>:

/* ------------------------------------------------------------------ */

int main()
{
    4fe6:	df 93       	push	r29
    4fe8:	cf 93       	push	r28
    4fea:	cd b7       	in	r28, 0x3d	; 61
    4fec:	de b7       	in	r29, 0x3e	; 62
    4fee:	29 97       	sbiw	r28, 0x09	; 9
    4ff0:	0f b6       	in	r0, 0x3f	; 63
    4ff2:	f8 94       	cli
    4ff4:	de bf       	out	0x3e, r29	; 62
    4ff6:	0f be       	out	0x3f, r0	; 63
    4ff8:	cd bf       	out	0x3d, r28	; 61
	/**-----------------------Local Variables----------------------**/
	/* Receive UART data unit = unsigned 8 bit variable (unsigned char) */
	volatile uint8 const l_Received_Data_Size = 8;
    4ffa:	88 e0       	ldi	r24, 0x08	; 8
    4ffc:	8e 83       	std	Y+6, r24	; 0x06
	volatile uint8 l_Received_Data[l_Received_Data_Size];
    4ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    5000:	88 2f       	mov	r24, r24
    5002:	90 e0       	ldi	r25, 0x00	; 0
    5004:	2d b7       	in	r18, 0x3d	; 61
    5006:	3e b7       	in	r19, 0x3e	; 62
    5008:	28 1b       	sub	r18, r24
    500a:	39 0b       	sbc	r19, r25
    500c:	0f b6       	in	r0, 0x3f	; 63
    500e:	f8 94       	cli
    5010:	3e bf       	out	0x3e, r19	; 62
    5012:	0f be       	out	0x3f, r0	; 63
    5014:	2d bf       	out	0x3d, r18	; 61
    5016:	8d b7       	in	r24, 0x3d	; 61
    5018:	9e b7       	in	r25, 0x3e	; 62
    501a:	01 96       	adiw	r24, 0x01	; 1
    501c:	99 87       	std	Y+9, r25	; 0x09
    501e:	88 87       	std	Y+8, r24	; 0x08
    5020:	88 85       	ldd	r24, Y+8	; 0x08
    5022:	99 85       	ldd	r25, Y+9	; 0x09
    5024:	00 96       	adiw	r24, 0x00	; 0
    5026:	99 87       	std	Y+9, r25	; 0x09
    5028:	88 87       	std	Y+8, r24	; 0x08
    502a:	28 85       	ldd	r18, Y+8	; 0x08
    502c:	39 85       	ldd	r19, Y+9	; 0x09
    502e:	3d 83       	std	Y+5, r19	; 0x05
    5030:	2c 83       	std	Y+4, r18	; 0x04

	/* Speed Value */
	uint8 l_Speed_Value = 0;
    5032:	1b 82       	std	Y+3, r1	; 0x03

	/* Rotational Degree */
	sint8 l_Rot_Degree = 0;
    5034:	1a 82       	std	Y+2, r1	; 0x02

	/* Current rotational angle */
	volatile sint8 l_Current_Angle = 0;
    5036:	1f 82       	std	Y+7, r1	; 0x07

	/* Check flag */
	uint8 flag = FALSE;
    5038:	19 82       	std	Y+1, r1	; 0x01

	/**-----------------------Pre-start Section--------------------**/

	/* Initializing all drivers: UART, DCMotor, Timer0, LCD, Stepper Motor */
	Drivers_init();
    503a:	0e 94 7e 27 	call	0x4efc	; 0x4efc <Drivers_init>

	/**-----------------------Main Section-------------------------**/
	while(1)
	{

		flag = FALSE; 				/* Return to FALSE after each loop */
    503e:	19 82       	std	Y+1, r1	; 0x01
    5040:	10 c0       	rjmp	.+32     	; 0x5062 <main+0x7c>

		while(!flag) 				/* Check point */
		{
			/* Wait for data to be received and then based on it will perform another actions */
			UART_receiveString(l_Received_Data,l_Received_Data_Size);
    5042:	8c 81       	ldd	r24, Y+4	; 0x04
    5044:	9d 81       	ldd	r25, Y+5	; 0x05
    5046:	2e 81       	ldd	r18, Y+6	; 0x06
    5048:	62 2f       	mov	r22, r18
    504a:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <UART_receiveString>

			if('C' == Receive_Check(l_Received_Data)) /* If the first step check was correct cont */
    504e:	8c 81       	ldd	r24, Y+4	; 0x04
    5050:	9d 81       	ldd	r25, Y+5	; 0x05
    5052:	0e 94 14 29 	call	0x5228	; 0x5228 <Receive_Check>
    5056:	83 34       	cpi	r24, 0x43	; 67
    5058:	19 f4       	brne	.+6      	; 0x5060 <main+0x7a>
			{
				flag = TRUE;
    505a:	81 e0       	ldi	r24, 0x01	; 1
    505c:	89 83       	std	Y+1, r24	; 0x01
    505e:	01 c0       	rjmp	.+2      	; 0x5062 <main+0x7c>
			}
			else
			{
				flag = FALSE;
    5060:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{

		flag = FALSE; 				/* Return to FALSE after each loop */

		while(!flag) 				/* Check point */
    5062:	89 81       	ldd	r24, Y+1	; 0x01
    5064:	88 23       	and	r24, r24
    5066:	69 f3       	breq	.-38     	; 0x5042 <main+0x5c>
		/*------------------------------------------------------------*/

		/*----------- Convert String to intger ----------*/

		/* Get the speed value */
		l_Speed_Value = String_Intger_Converter(l_Received_Data[0], l_Received_Data[1], l_Received_Data[2]);
    5068:	ec 81       	ldd	r30, Y+4	; 0x04
    506a:	fd 81       	ldd	r31, Y+5	; 0x05
    506c:	80 81       	ld	r24, Z
    506e:	ec 81       	ldd	r30, Y+4	; 0x04
    5070:	fd 81       	ldd	r31, Y+5	; 0x05
    5072:	21 81       	ldd	r18, Z+1	; 0x01
    5074:	ec 81       	ldd	r30, Y+4	; 0x04
    5076:	fd 81       	ldd	r31, Y+5	; 0x05
    5078:	92 81       	ldd	r25, Z+2	; 0x02
    507a:	62 2f       	mov	r22, r18
    507c:	49 2f       	mov	r20, r25
    507e:	0e 94 e5 28 	call	0x51ca	; 0x51ca <String_Intger_Converter>
    5082:	8b 83       	std	Y+3, r24	; 0x03
		/* Get the rotational degree */
		l_Rot_Degree = String_Intger_Converter('0', l_Received_Data[4], l_Received_Data[5]);
    5084:	ec 81       	ldd	r30, Y+4	; 0x04
    5086:	fd 81       	ldd	r31, Y+5	; 0x05
    5088:	24 81       	ldd	r18, Z+4	; 0x04
    508a:	ec 81       	ldd	r30, Y+4	; 0x04
    508c:	fd 81       	ldd	r31, Y+5	; 0x05
    508e:	95 81       	ldd	r25, Z+5	; 0x05
    5090:	80 e3       	ldi	r24, 0x30	; 48
    5092:	62 2f       	mov	r22, r18
    5094:	49 2f       	mov	r20, r25
    5096:	0e 94 e5 28 	call	0x51ca	; 0x51ca <String_Intger_Converter>
    509a:	8a 83       	std	Y+2, r24	; 0x02


		/*-------------------LCD display---------------*/

		/* Init LCD everytime just for special reasons */
		LCD_init();
    509c:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <LCD_init>
		LCD_clearScreen();
    50a0:	0e 94 a3 19 	call	0x3346	; 0x3346 <LCD_clearScreen>

		/* Display the Speed */
		LCD_moveCursor(0, 0);
    50a4:	80 e0       	ldi	r24, 0x00	; 0
    50a6:	60 e0       	ldi	r22, 0x00	; 0
    50a8:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
		LCD_displayString("Speed: ");
    50ac:	80 e6       	ldi	r24, 0x60	; 96
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
		LCD_moveCursor(0, 7);
    50b4:	80 e0       	ldi	r24, 0x00	; 0
    50b6:	67 e0       	ldi	r22, 0x07	; 7
    50b8:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
		LCD_intgerToString(l_Speed_Value);
    50bc:	8b 81       	ldd	r24, Y+3	; 0x03
    50be:	88 2f       	mov	r24, r24
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>
		if(l_Speed_Value >= 100)
    50c6:	8b 81       	ldd	r24, Y+3	; 0x03
    50c8:	84 36       	cpi	r24, 0x64	; 100
    50ca:	18 f4       	brcc	.+6      	; 0x50d2 <main+0xec>
			/* Do nothing */
		}
		else
		{
			/* Leave a space after to remove the zero */
			LCD_displayCharacter(' ');
    50cc:	80 e2       	ldi	r24, 0x20	; 32
    50ce:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_displayCharacter>
		}
		/*-----------------------------------*/

		/* Display the rotational angle */
		LCD_moveCursor(0, 15);
    50d2:	80 e0       	ldi	r24, 0x00	; 0
    50d4:	6f e0       	ldi	r22, 0x0F	; 15
    50d6:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>

		if('R' == l_Received_Data[6] || ('0' == l_Received_Data[5] && '0' == l_Received_Data[4] ))
    50da:	ec 81       	ldd	r30, Y+4	; 0x04
    50dc:	fd 81       	ldd	r31, Y+5	; 0x05
    50de:	86 81       	ldd	r24, Z+6	; 0x06
    50e0:	82 35       	cpi	r24, 0x52	; 82
    50e2:	51 f0       	breq	.+20     	; 0x50f8 <main+0x112>
    50e4:	ec 81       	ldd	r30, Y+4	; 0x04
    50e6:	fd 81       	ldd	r31, Y+5	; 0x05
    50e8:	85 81       	ldd	r24, Z+5	; 0x05
    50ea:	80 33       	cpi	r24, 0x30	; 48
    50ec:	51 f4       	brne	.+20     	; 0x5102 <main+0x11c>
    50ee:	ec 81       	ldd	r30, Y+4	; 0x04
    50f0:	fd 81       	ldd	r31, Y+5	; 0x05
    50f2:	84 81       	ldd	r24, Z+4	; 0x04
    50f4:	80 33       	cpi	r24, 0x30	; 48
    50f6:	29 f4       	brne	.+10     	; 0x5102 <main+0x11c>
		{
			LCD_displayString("Direction: +");
    50f8:	88 e6       	ldi	r24, 0x68	; 104
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
    5100:	04 c0       	rjmp	.+8      	; 0x510a <main+0x124>
		}
		else
		{
			LCD_displayString("Direction: -");
    5102:	85 e7       	ldi	r24, 0x75	; 117
    5104:	90 e0       	ldi	r25, 0x00	; 0
    5106:	0e 94 e6 18 	call	0x31cc	; 0x31cc <LCD_displayString>
		}
		LCD_moveCursor(0, 27);
    510a:	80 e0       	ldi	r24, 0x00	; 0
    510c:	6b e1       	ldi	r22, 0x1B	; 27
    510e:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>

		LCD_intgerToString(l_Rot_Degree);
    5112:	8a 81       	ldd	r24, Y+2	; 0x02
    5114:	99 27       	eor	r25, r25
    5116:	87 fd       	sbrc	r24, 7
    5118:	90 95       	com	r25
    511a:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>
		/*---------------------------------------------------------------*/

		/*---------------DC Motor------------*/
		if('F' == l_Received_Data[3])
    511e:	ec 81       	ldd	r30, Y+4	; 0x04
    5120:	fd 81       	ldd	r31, Y+5	; 0x05
    5122:	83 81       	ldd	r24, Z+3	; 0x03
    5124:	86 34       	cpi	r24, 0x46	; 70
    5126:	e9 f4       	brne	.+58     	; 0x5162 <main+0x17c>
		{
			DcMotor_Rotate(Anti_ClockWise, ((255*l_Speed_Value)/100));
    5128:	8b 81       	ldd	r24, Y+3	; 0x03
    512a:	48 2f       	mov	r20, r24
    512c:	50 e0       	ldi	r21, 0x00	; 0
    512e:	ca 01       	movw	r24, r20
    5130:	9c 01       	movw	r18, r24
    5132:	22 0f       	add	r18, r18
    5134:	33 1f       	adc	r19, r19
    5136:	c9 01       	movw	r24, r18
    5138:	96 95       	lsr	r25
    513a:	98 2f       	mov	r25, r24
    513c:	88 27       	eor	r24, r24
    513e:	97 95       	ror	r25
    5140:	87 95       	ror	r24
    5142:	82 1b       	sub	r24, r18
    5144:	93 0b       	sbc	r25, r19
    5146:	84 0f       	add	r24, r20
    5148:	95 1f       	adc	r25, r21
    514a:	24 e6       	ldi	r18, 0x64	; 100
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	b9 01       	movw	r22, r18
    5150:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    5154:	cb 01       	movw	r24, r22
    5156:	98 2f       	mov	r25, r24
    5158:	81 e0       	ldi	r24, 0x01	; 1
    515a:	69 2f       	mov	r22, r25
    515c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DcMotor_Rotate>
    5160:	1c c0       	rjmp	.+56     	; 0x519a <main+0x1b4>
		}
		else
		{
			DcMotor_Rotate(ClockWise, ((255*l_Speed_Value)/100));
    5162:	8b 81       	ldd	r24, Y+3	; 0x03
    5164:	48 2f       	mov	r20, r24
    5166:	50 e0       	ldi	r21, 0x00	; 0
    5168:	ca 01       	movw	r24, r20
    516a:	9c 01       	movw	r18, r24
    516c:	22 0f       	add	r18, r18
    516e:	33 1f       	adc	r19, r19
    5170:	c9 01       	movw	r24, r18
    5172:	96 95       	lsr	r25
    5174:	98 2f       	mov	r25, r24
    5176:	88 27       	eor	r24, r24
    5178:	97 95       	ror	r25
    517a:	87 95       	ror	r24
    517c:	82 1b       	sub	r24, r18
    517e:	93 0b       	sbc	r25, r19
    5180:	84 0f       	add	r24, r20
    5182:	95 1f       	adc	r25, r21
    5184:	24 e6       	ldi	r18, 0x64	; 100
    5186:	30 e0       	ldi	r19, 0x00	; 0
    5188:	b9 01       	movw	r22, r18
    518a:	0e 94 c2 2a 	call	0x5584	; 0x5584 <__divmodhi4>
    518e:	cb 01       	movw	r24, r22
    5190:	98 2f       	mov	r25, r24
    5192:	80 e0       	ldi	r24, 0x00	; 0
    5194:	69 2f       	mov	r22, r25
    5196:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DcMotor_Rotate>
		}

		/*---------------Stepper Motor------------*/
		if( 'R' == l_Received_Data[6] )
    519a:	ec 81       	ldd	r30, Y+4	; 0x04
    519c:	fd 81       	ldd	r31, Y+5	; 0x05
    519e:	86 81       	ldd	r24, Z+6	; 0x06
    51a0:	82 35       	cpi	r24, 0x52	; 82
    51a2:	49 f4       	brne	.+18     	; 0x51b6 <main+0x1d0>
		{
			stepper_rotate(Right_Direction, l_Rot_Degree,l_Current_Angle);
    51a4:	9f 81       	ldd	r25, Y+7	; 0x07
    51a6:	81 e0       	ldi	r24, 0x01	; 1
    51a8:	6a 81       	ldd	r22, Y+2	; 0x02
    51aa:	49 2f       	mov	r20, r25
    51ac:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <stepper_rotate>
			l_Current_Angle = l_Rot_Degree;
    51b0:	8a 81       	ldd	r24, Y+2	; 0x02
    51b2:	8f 83       	std	Y+7, r24	; 0x07
    51b4:	44 cf       	rjmp	.-376    	; 0x503e <main+0x58>
		}
		else
		{
			stepper_rotate(Left_Direction, l_Rot_Degree, l_Current_Angle);
    51b6:	9f 81       	ldd	r25, Y+7	; 0x07
    51b8:	80 e0       	ldi	r24, 0x00	; 0
    51ba:	6a 81       	ldd	r22, Y+2	; 0x02
    51bc:	49 2f       	mov	r20, r25
    51be:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <stepper_rotate>
			l_Current_Angle = (l_Rot_Degree * (-1));
    51c2:	8a 81       	ldd	r24, Y+2	; 0x02
    51c4:	81 95       	neg	r24
    51c6:	8f 83       	std	Y+7, r24	; 0x07
    51c8:	3a cf       	rjmp	.-396    	; 0x503e <main+0x58>

000051ca <String_Intger_Converter>:

/**-------------------------Function Section------------------------**/

/* Converts String to int */
uint8 String_Intger_Converter(uint8 First, uint8 Second, uint8 Third)
{
    51ca:	df 93       	push	r29
    51cc:	cf 93       	push	r28
    51ce:	00 d0       	rcall	.+0      	; 0x51d0 <String_Intger_Converter+0x6>
    51d0:	0f 92       	push	r0
    51d2:	cd b7       	in	r28, 0x3d	; 61
    51d4:	de b7       	in	r29, 0x3e	; 62
    51d6:	89 83       	std	Y+1, r24	; 0x01
    51d8:	6a 83       	std	Y+2, r22	; 0x02
    51da:	4b 83       	std	Y+3, r20	; 0x03
	return (((First-'0')*100) +((Second-'0')*10)+((Third-'0')));
    51dc:	89 81       	ldd	r24, Y+1	; 0x01
    51de:	28 2f       	mov	r18, r24
    51e0:	30 e0       	ldi	r19, 0x00	; 0
    51e2:	84 e6       	ldi	r24, 0x64	; 100
    51e4:	90 e0       	ldi	r25, 0x00	; 0
    51e6:	ac 01       	movw	r20, r24
    51e8:	24 9f       	mul	r18, r20
    51ea:	c0 01       	movw	r24, r0
    51ec:	25 9f       	mul	r18, r21
    51ee:	90 0d       	add	r25, r0
    51f0:	34 9f       	mul	r19, r20
    51f2:	90 0d       	add	r25, r0
    51f4:	11 24       	eor	r1, r1
    51f6:	48 2f       	mov	r20, r24
    51f8:	8a 81       	ldd	r24, Y+2	; 0x02
    51fa:	88 2f       	mov	r24, r24
    51fc:	90 e0       	ldi	r25, 0x00	; 0
    51fe:	9c 01       	movw	r18, r24
    5200:	22 0f       	add	r18, r18
    5202:	33 1f       	adc	r19, r19
    5204:	c9 01       	movw	r24, r18
    5206:	88 0f       	add	r24, r24
    5208:	99 1f       	adc	r25, r25
    520a:	88 0f       	add	r24, r24
    520c:	99 1f       	adc	r25, r25
    520e:	82 0f       	add	r24, r18
    5210:	93 1f       	adc	r25, r19
    5212:	94 2f       	mov	r25, r20
    5214:	98 0f       	add	r25, r24
    5216:	8b 81       	ldd	r24, Y+3	; 0x03
    5218:	89 0f       	add	r24, r25
    521a:	80 5d       	subi	r24, 0xD0	; 208
}
    521c:	0f 90       	pop	r0
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	cf 91       	pop	r28
    5224:	df 91       	pop	r29
    5226:	08 95       	ret

00005228 <Receive_Check>:

/**-----------------------Check Section-----------------------------**/

/* Check on the received command if it applies to our terms */
uint8 Receive_Check(uint8 *Check_ptr)
{
    5228:	df 93       	push	r29
    522a:	cf 93       	push	r28
    522c:	00 d0       	rcall	.+0      	; 0x522e <Receive_Check+0x6>
    522e:	0f 92       	push	r0
    5230:	cd b7       	in	r28, 0x3d	; 61
    5232:	de b7       	in	r29, 0x3e	; 62
    5234:	9a 83       	std	Y+2, r25	; 0x02
    5236:	89 83       	std	Y+1, r24	; 0x01
	/* Check on the last char which is should be 'E' */
	if('E' == Check_ptr[7]) /* If it equals 0 or 1 */
    5238:	89 81       	ldd	r24, Y+1	; 0x01
    523a:	9a 81       	ldd	r25, Y+2	; 0x02
    523c:	fc 01       	movw	r30, r24
    523e:	37 96       	adiw	r30, 0x07	; 7
    5240:	80 81       	ld	r24, Z
    5242:	85 34       	cpi	r24, 0x45	; 69
    5244:	59 f4       	brne	.+22     	; 0x525c <Receive_Check+0x34>
	{
		/* Change E to become '\0' as it should be */
		Check_ptr[7] = '\0';
    5246:	89 81       	ldd	r24, Y+1	; 0x01
    5248:	9a 81       	ldd	r25, Y+2	; 0x02
    524a:	fc 01       	movw	r30, r24
    524c:	37 96       	adiw	r30, 0x07	; 7
    524e:	10 82       	st	Z, r1
	{
		return 'I';
	}
	/*-----------------------------------*/
	/* Check on the first char */
	if('0' == Check_ptr[0] || '1' == Check_ptr[0]) /* If it equals 0 or 1 */
    5250:	e9 81       	ldd	r30, Y+1	; 0x01
    5252:	fa 81       	ldd	r31, Y+2	; 0x02
    5254:	80 81       	ld	r24, Z
    5256:	80 33       	cpi	r24, 0x30	; 48
    5258:	21 f4       	brne	.+8      	; 0x5262 <Receive_Check+0x3a>
    525a:	0b c0       	rjmp	.+22     	; 0x5272 <Receive_Check+0x4a>
		/* Change E to become '\0' as it should be */
		Check_ptr[7] = '\0';
	}
	else
	{
		return 'I';
    525c:	89 e4       	ldi	r24, 0x49	; 73
    525e:	8b 83       	std	Y+3, r24	; 0x03
    5260:	8c c0       	rjmp	.+280    	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the first char */
	if('0' == Check_ptr[0] || '1' == Check_ptr[0]) /* If it equals 0 or 1 */
    5262:	e9 81       	ldd	r30, Y+1	; 0x01
    5264:	fa 81       	ldd	r31, Y+2	; 0x02
    5266:	80 81       	ld	r24, Z
    5268:	81 33       	cpi	r24, 0x31	; 49
    526a:	19 f0       	breq	.+6      	; 0x5272 <Receive_Check+0x4a>
	{
		/* Do nothing */
	}
	else
	{
		return 'I';
    526c:	89 e4       	ldi	r24, 0x49	; 73
    526e:	8b 83       	std	Y+3, r24	; 0x03
    5270:	84 c0       	rjmp	.+264    	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the Second char */
	if(Check_ptr[1] >= 48 && Check_ptr[1] <= 57) /* If it's in between 0 and 9 */
    5272:	89 81       	ldd	r24, Y+1	; 0x01
    5274:	9a 81       	ldd	r25, Y+2	; 0x02
    5276:	fc 01       	movw	r30, r24
    5278:	31 96       	adiw	r30, 0x01	; 1
    527a:	80 81       	ld	r24, Z
    527c:	80 33       	cpi	r24, 0x30	; 48
    527e:	78 f0       	brcs	.+30     	; 0x529e <Receive_Check+0x76>
    5280:	89 81       	ldd	r24, Y+1	; 0x01
    5282:	9a 81       	ldd	r25, Y+2	; 0x02
    5284:	fc 01       	movw	r30, r24
    5286:	31 96       	adiw	r30, 0x01	; 1
    5288:	80 81       	ld	r24, Z
    528a:	8a 33       	cpi	r24, 0x3A	; 58
    528c:	40 f4       	brcc	.+16     	; 0x529e <Receive_Check+0x76>
	{
		return 'I';
	}
	/*-----------------------------------*/
	/* Check on the Third char */
	if(Check_ptr[2] >= 48 && Check_ptr[2] <= 57) /* If it's in between 0 and 9 */
    528e:	89 81       	ldd	r24, Y+1	; 0x01
    5290:	9a 81       	ldd	r25, Y+2	; 0x02
    5292:	fc 01       	movw	r30, r24
    5294:	32 96       	adiw	r30, 0x02	; 2
    5296:	80 81       	ld	r24, Z
    5298:	80 33       	cpi	r24, 0x30	; 48
    529a:	98 f0       	brcs	.+38     	; 0x52c2 <Receive_Check+0x9a>
    529c:	03 c0       	rjmp	.+6      	; 0x52a4 <Receive_Check+0x7c>
	{
		/* Do nothing */
	}
	else
	{
		return 'I';
    529e:	89 e4       	ldi	r24, 0x49	; 73
    52a0:	8b 83       	std	Y+3, r24	; 0x03
    52a2:	6b c0       	rjmp	.+214    	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the Third char */
	if(Check_ptr[2] >= 48 && Check_ptr[2] <= 57) /* If it's in between 0 and 9 */
    52a4:	89 81       	ldd	r24, Y+1	; 0x01
    52a6:	9a 81       	ldd	r25, Y+2	; 0x02
    52a8:	fc 01       	movw	r30, r24
    52aa:	32 96       	adiw	r30, 0x02	; 2
    52ac:	80 81       	ld	r24, Z
    52ae:	8a 33       	cpi	r24, 0x3A	; 58
    52b0:	40 f4       	brcc	.+16     	; 0x52c2 <Receive_Check+0x9a>
	{
		return 'I';
	}
	/*-----------------------------------*/
	/* Check on the 4th char */
	if('F' ==  Check_ptr[3] || 'B' == Check_ptr[3]) /* If it equals 'F' or 'B' */
    52b2:	89 81       	ldd	r24, Y+1	; 0x01
    52b4:	9a 81       	ldd	r25, Y+2	; 0x02
    52b6:	fc 01       	movw	r30, r24
    52b8:	33 96       	adiw	r30, 0x03	; 3
    52ba:	80 81       	ld	r24, Z
    52bc:	86 34       	cpi	r24, 0x46	; 70
    52be:	21 f4       	brne	.+8      	; 0x52c8 <Receive_Check+0xa0>
    52c0:	0d c0       	rjmp	.+26     	; 0x52dc <Receive_Check+0xb4>
	{
		/* Do nothing */
	}
	else
	{
		return 'I';
    52c2:	89 e4       	ldi	r24, 0x49	; 73
    52c4:	8b 83       	std	Y+3, r24	; 0x03
    52c6:	59 c0       	rjmp	.+178    	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the 4th char */
	if('F' ==  Check_ptr[3] || 'B' == Check_ptr[3]) /* If it equals 'F' or 'B' */
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	9a 81       	ldd	r25, Y+2	; 0x02
    52cc:	fc 01       	movw	r30, r24
    52ce:	33 96       	adiw	r30, 0x03	; 3
    52d0:	80 81       	ld	r24, Z
    52d2:	82 34       	cpi	r24, 0x42	; 66
    52d4:	19 f0       	breq	.+6      	; 0x52dc <Receive_Check+0xb4>
	{
		/* Do nothing */
	}
	else
	{
		return 'I';
    52d6:	89 e4       	ldi	r24, 0x49	; 73
    52d8:	8b 83       	std	Y+3, r24	; 0x03
    52da:	4f c0       	rjmp	.+158    	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the 5th char */
	if(Check_ptr[4] >= 48 && Check_ptr[4] <= 52) /* If it's in between 0 and 4 */
    52dc:	89 81       	ldd	r24, Y+1	; 0x01
    52de:	9a 81       	ldd	r25, Y+2	; 0x02
    52e0:	fc 01       	movw	r30, r24
    52e2:	34 96       	adiw	r30, 0x04	; 4
    52e4:	80 81       	ld	r24, Z
    52e6:	80 33       	cpi	r24, 0x30	; 48
    52e8:	78 f0       	brcs	.+30     	; 0x5308 <Receive_Check+0xe0>
    52ea:	89 81       	ldd	r24, Y+1	; 0x01
    52ec:	9a 81       	ldd	r25, Y+2	; 0x02
    52ee:	fc 01       	movw	r30, r24
    52f0:	34 96       	adiw	r30, 0x04	; 4
    52f2:	80 81       	ld	r24, Z
    52f4:	85 33       	cpi	r24, 0x35	; 53
    52f6:	40 f4       	brcc	.+16     	; 0x5308 <Receive_Check+0xe0>
	{
		return 'I';
	}
	/*-----------------------------------*/
	/* Check on the 6th char */
	if(Check_ptr[5] >= 48 && Check_ptr[5] <= 57) /* If it's in between 0 and 9 and make sure it's between 0 and 45*/
    52f8:	89 81       	ldd	r24, Y+1	; 0x01
    52fa:	9a 81       	ldd	r25, Y+2	; 0x02
    52fc:	fc 01       	movw	r30, r24
    52fe:	35 96       	adiw	r30, 0x05	; 5
    5300:	80 81       	ld	r24, Z
    5302:	80 33       	cpi	r24, 0x30	; 48
    5304:	58 f1       	brcs	.+86     	; 0x535c <Receive_Check+0x134>
    5306:	03 c0       	rjmp	.+6      	; 0x530e <Receive_Check+0xe6>
	{
		/* Do nothing */
	}
	else
	{
		return 'I';
    5308:	89 e4       	ldi	r24, 0x49	; 73
    530a:	8b 83       	std	Y+3, r24	; 0x03
    530c:	36 c0       	rjmp	.+108    	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the 6th char */
	if(Check_ptr[5] >= 48 && Check_ptr[5] <= 57) /* If it's in between 0 and 9 and make sure it's between 0 and 45*/
    530e:	89 81       	ldd	r24, Y+1	; 0x01
    5310:	9a 81       	ldd	r25, Y+2	; 0x02
    5312:	fc 01       	movw	r30, r24
    5314:	35 96       	adiw	r30, 0x05	; 5
    5316:	80 81       	ld	r24, Z
    5318:	8a 33       	cpi	r24, 0x3A	; 58
    531a:	00 f5       	brcc	.+64     	; 0x535c <Receive_Check+0x134>
	{
		if(Check_ptr[4] == 52) /* The rotational degree was 4X then X should be between 0 and 5 */
    531c:	89 81       	ldd	r24, Y+1	; 0x01
    531e:	9a 81       	ldd	r25, Y+2	; 0x02
    5320:	fc 01       	movw	r30, r24
    5322:	34 96       	adiw	r30, 0x04	; 4
    5324:	80 81       	ld	r24, Z
    5326:	84 33       	cpi	r24, 0x34	; 52
    5328:	89 f4       	brne	.+34     	; 0x534c <Receive_Check+0x124>
		{
			if(Check_ptr[5] >= 48 && Check_ptr[5] <= 53) /* 0 ~ 5 */
    532a:	89 81       	ldd	r24, Y+1	; 0x01
    532c:	9a 81       	ldd	r25, Y+2	; 0x02
    532e:	fc 01       	movw	r30, r24
    5330:	35 96       	adiw	r30, 0x05	; 5
    5332:	80 81       	ld	r24, Z
    5334:	80 33       	cpi	r24, 0x30	; 48
    5336:	38 f0       	brcs	.+14     	; 0x5346 <Receive_Check+0x11e>
    5338:	89 81       	ldd	r24, Y+1	; 0x01
    533a:	9a 81       	ldd	r25, Y+2	; 0x02
    533c:	fc 01       	movw	r30, r24
    533e:	35 96       	adiw	r30, 0x05	; 5
    5340:	80 81       	ld	r24, Z
    5342:	86 33       	cpi	r24, 0x36	; 54
    5344:	18 f0       	brcs	.+6      	; 0x534c <Receive_Check+0x124>
			{
				/* Do nothing */
			}
			else
			{
				return 'I';
    5346:	89 e4       	ldi	r24, 0x49	; 73
    5348:	8b 83       	std	Y+3, r24	; 0x03
    534a:	17 c0       	rjmp	.+46     	; 0x537a <Receive_Check+0x152>
	{
		return 'I';
	}
	/*-----------------------------------*/
	/* Check on the 7th char */
	if('L' ==  Check_ptr[6] || 'R' == Check_ptr[6]) /* If it equals 'L' or 'R' */
    534c:	89 81       	ldd	r24, Y+1	; 0x01
    534e:	9a 81       	ldd	r25, Y+2	; 0x02
    5350:	fc 01       	movw	r30, r24
    5352:	36 96       	adiw	r30, 0x06	; 6
    5354:	80 81       	ld	r24, Z
    5356:	8c 34       	cpi	r24, 0x4C	; 76
    5358:	21 f4       	brne	.+8      	; 0x5362 <Receive_Check+0x13a>
    535a:	0d c0       	rjmp	.+26     	; 0x5376 <Receive_Check+0x14e>
			}
		}
	}
	else
	{
		return 'I';
    535c:	89 e4       	ldi	r24, 0x49	; 73
    535e:	8b 83       	std	Y+3, r24	; 0x03
    5360:	0c c0       	rjmp	.+24     	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/
	/* Check on the 7th char */
	if('L' ==  Check_ptr[6] || 'R' == Check_ptr[6]) /* If it equals 'L' or 'R' */
    5362:	89 81       	ldd	r24, Y+1	; 0x01
    5364:	9a 81       	ldd	r25, Y+2	; 0x02
    5366:	fc 01       	movw	r30, r24
    5368:	36 96       	adiw	r30, 0x06	; 6
    536a:	80 81       	ld	r24, Z
    536c:	82 35       	cpi	r24, 0x52	; 82
    536e:	19 f0       	breq	.+6      	; 0x5376 <Receive_Check+0x14e>
	{
		/* Do nothing */
	}
	else
	{
		return 'I';
    5370:	89 e4       	ldi	r24, 0x49	; 73
    5372:	8b 83       	std	Y+3, r24	; 0x03
    5374:	02 c0       	rjmp	.+4      	; 0x537a <Receive_Check+0x152>
	}
	/*-----------------------------------*/

	/* Return correct if it has passed all the prev checks */
	return 'C';
    5376:	83 e4       	ldi	r24, 0x43	; 67
    5378:	8b 83       	std	Y+3, r24	; 0x03
    537a:	8b 81       	ldd	r24, Y+3	; 0x03
}
    537c:	0f 90       	pop	r0
    537e:	0f 90       	pop	r0
    5380:	0f 90       	pop	r0
    5382:	cf 91       	pop	r28
    5384:	df 91       	pop	r29
    5386:	08 95       	ret

00005388 <App_timer1>:
/*
 * Description:
 * This will be the function which will be called back by the Timer
 */
void App_timer1()
{
    5388:	df 93       	push	r29
    538a:	cf 93       	push	r28
    538c:	cd b7       	in	r28, 0x3d	; 61
    538e:	de b7       	in	r29, 0x3e	; 62
	/**-----------------------Local Variables----------------------**/

	/**-----------------------Main Section-------------------------**/
	/** The main thing that will change everything is Seconds, So, we have to check it at first **/
	if(Display.Second_ONE == 9 && Display.Second_TWO == 5) /* If the first and Second digits were at max no. 59 */
    5390:	80 91 be 00 	lds	r24, 0x00BE
    5394:	89 30       	cpi	r24, 0x09	; 9
    5396:	09 f0       	breq	.+2      	; 0x539a <App_timer1+0x12>
    5398:	56 c0       	rjmp	.+172    	; 0x5446 <App_timer1+0xbe>
    539a:	80 91 bf 00 	lds	r24, 0x00BF
    539e:	85 30       	cpi	r24, 0x05	; 5
    53a0:	09 f0       	breq	.+2      	; 0x53a4 <App_timer1+0x1c>
    53a2:	51 c0       	rjmp	.+162    	; 0x5446 <App_timer1+0xbe>
	{
		/*  Then we will Inc the next but let's make sure the next not at it's max digits */
		if(Display.Minute_ONE == 9) /* If the first Digit in Minute was 9 So, it's as it's max no. */
    53a4:	80 91 c0 00 	lds	r24, 0x00C0
    53a8:	89 30       	cpi	r24, 0x09	; 9
    53aa:	09 f0       	breq	.+2      	; 0x53ae <App_timer1+0x26>
    53ac:	42 c0       	rjmp	.+132    	; 0x5432 <App_timer1+0xaa>
		{
			/* Then we will inc. the next which is Minute Two but let's make sure it's not at it's max no. */
			if(Display.Minute_TWO == 5) /* If second digit in Minute was 5 then it's at it's max no. */
    53ae:	80 91 c1 00 	lds	r24, 0x00C1
    53b2:	85 30       	cpi	r24, 0x05	; 5
    53b4:	91 f5       	brne	.+100    	; 0x541a <App_timer1+0x92>
			{
				/* Then we will inc the next which is the Hours but, let's make sure again */
				if(Display.Hour_ONE == 2)  /* If the FIRST digit in hours was at it's max */
    53b6:	80 91 c2 00 	lds	r24, 0x00C2
    53ba:	82 30       	cpi	r24, 0x02	; 2
    53bc:	01 f5       	brne	.+64     	; 0x53fe <App_timer1+0x76>
				{
					if(Display.Hour_TWO == 1) /* If the SECOND digit in hours was at it's max */
    53be:	80 91 c3 00 	lds	r24, 0x00C3
    53c2:	81 30       	cpi	r24, 0x01	; 1
    53c4:	61 f4       	brne	.+24     	; 0x53de <App_timer1+0x56>
					{
						/* Reset */
						if(Display.AM_PM == 'A')
    53c6:	80 91 c4 00 	lds	r24, 0x00C4
    53ca:	81 34       	cpi	r24, 0x41	; 65
    53cc:	21 f4       	brne	.+8      	; 0x53d6 <App_timer1+0x4e>
						{
							Display.AM_PM = 'P';
    53ce:	80 e5       	ldi	r24, 0x50	; 80
    53d0:	80 93 c4 00 	sts	0x00C4, r24
    53d4:	49 c0       	rjmp	.+146    	; 0x5468 <App_timer1+0xe0>
						}
						else
						{
							Display.AM_PM = 'A';
    53d6:	81 e4       	ldi	r24, 0x41	; 65
    53d8:	80 93 c4 00 	sts	0x00C4, r24
    53dc:	45 c0       	rjmp	.+138    	; 0x5468 <App_timer1+0xe0>
						}
					}
					else  /* Means Hour_TWO not at it's max != 5 So, Inc. it */
					{
						Display.Hour_TWO++;
    53de:	80 91 c3 00 	lds	r24, 0x00C3
    53e2:	8f 5f       	subi	r24, 0xFF	; 255
    53e4:	80 93 c3 00 	sts	0x00C3, r24
						Display.Second_ONE = 0;
    53e8:	10 92 be 00 	sts	0x00BE, r1
						Display.Second_TWO = 0;
    53ec:	10 92 bf 00 	sts	0x00BF, r1
						Display.Minute_ONE = 0;
    53f0:	10 92 c0 00 	sts	0x00C0, r1
						Display.Minute_TWO = 0;
    53f4:	10 92 c1 00 	sts	0x00C1, r1
						Display.Hour_ONE = 0;
    53f8:	10 92 c2 00 	sts	0x00C2, r1
    53fc:	35 c0       	rjmp	.+106    	; 0x5468 <App_timer1+0xe0>
					}
				}
				else /* Means Hour_ONE not at it's max != 9 So, Inc. it */
				{
					Display.Hour_ONE++	;
    53fe:	80 91 c2 00 	lds	r24, 0x00C2
    5402:	8f 5f       	subi	r24, 0xFF	; 255
    5404:	80 93 c2 00 	sts	0x00C2, r24
					Display.Second_ONE = 0;
    5408:	10 92 be 00 	sts	0x00BE, r1
					Display.Second_TWO = 0;
    540c:	10 92 bf 00 	sts	0x00BF, r1
					Display.Minute_ONE = 0;
    5410:	10 92 c0 00 	sts	0x00C0, r1
					Display.Minute_TWO = 0;
    5414:	10 92 c1 00 	sts	0x00C1, r1
    5418:	27 c0       	rjmp	.+78     	; 0x5468 <App_timer1+0xe0>
				}
			}
			else /* Means Minute_TWO not at it's max != 5 So, Inc. it */
			{
				Display.Second_ONE = 0;
    541a:	10 92 be 00 	sts	0x00BE, r1
				Display.Second_TWO = 0;
    541e:	10 92 bf 00 	sts	0x00BF, r1
				Display.Minute_ONE = 0;
    5422:	10 92 c0 00 	sts	0x00C0, r1
				Display.Minute_TWO++;
    5426:	80 91 c1 00 	lds	r24, 0x00C1
    542a:	8f 5f       	subi	r24, 0xFF	; 255
    542c:	80 93 c1 00 	sts	0x00C1, r24
    5430:	1b c0       	rjmp	.+54     	; 0x5468 <App_timer1+0xe0>
			}
		}
		else /* Means Minute_ONE not at it's max != 9 So, Inc. it */
		{
			Display.Second_ONE = 0;
    5432:	10 92 be 00 	sts	0x00BE, r1
			Display.Second_TWO = 0;
    5436:	10 92 bf 00 	sts	0x00BF, r1
			Display.Minute_ONE++;
    543a:	80 91 c0 00 	lds	r24, 0x00C0
    543e:	8f 5f       	subi	r24, 0xFF	; 255
    5440:	80 93 c0 00 	sts	0x00C0, r24
    5444:	11 c0       	rjmp	.+34     	; 0x5468 <App_timer1+0xe0>
		}
	}
	else if(Display.Second_ONE == 9) /* Means the Second_TWO not at it's max no.!= 5 So, Inc it */
    5446:	80 91 be 00 	lds	r24, 0x00BE
    544a:	89 30       	cpi	r24, 0x09	; 9
    544c:	41 f4       	brne	.+16     	; 0x545e <App_timer1+0xd6>
	{
		Display.Second_ONE = 0;
    544e:	10 92 be 00 	sts	0x00BE, r1
		Display.Second_TWO++;
    5452:	80 91 bf 00 	lds	r24, 0x00BF
    5456:	8f 5f       	subi	r24, 0xFF	; 255
    5458:	80 93 bf 00 	sts	0x00BF, r24
    545c:	05 c0       	rjmp	.+10     	; 0x5468 <App_timer1+0xe0>
	}
	else /* Means the Second_ONE not at it's max no.!= 9 So, Inc it */
	{
		Display.Second_ONE++;
    545e:	80 91 be 00 	lds	r24, 0x00BE
    5462:	8f 5f       	subi	r24, 0xFF	; 255
    5464:	80 93 be 00 	sts	0x00BE, r24
	}
	LCD_Time_Display();
    5468:	0e 94 39 2a 	call	0x5472	; 0x5472 <LCD_Time_Display>
}
    546c:	cf 91       	pop	r28
    546e:	df 91       	pop	r29
    5470:	08 95       	ret

00005472 <LCD_Time_Display>:
/*
 * Description:
 * Display time on LCD
 */
void LCD_Time_Display(void)
{
    5472:	df 93       	push	r29
    5474:	cf 93       	push	r28
    5476:	cd b7       	in	r28, 0x3d	; 61
    5478:	de b7       	in	r29, 0x3e	; 62
	/* Display Time format as Time: 00:00:00 AM */
	LCD_displayStringRowColumn(1, 6, "Time: "); /* Displaying Time: */
    547a:	22 e8       	ldi	r18, 0x82	; 130
    547c:	30 e0       	ldi	r19, 0x00	; 0
    547e:	81 e0       	ldi	r24, 0x01	; 1
    5480:	66 e0       	ldi	r22, 0x06	; 6
    5482:	a9 01       	movw	r20, r18
    5484:	0e 94 51 19 	call	0x32a2	; 0x32a2 <LCD_displayStringRowColumn>

	if(Display.AM_PM == 'A') /* Displaying AM or PM */
    5488:	80 91 c4 00 	lds	r24, 0x00C4
    548c:	81 34       	cpi	r24, 0x41	; 65
    548e:	41 f4       	brne	.+16     	; 0x54a0 <LCD_Time_Display+0x2e>
	{
		LCD_displayStringRowColumn(1, 21, "AM");
    5490:	29 e8       	ldi	r18, 0x89	; 137
    5492:	30 e0       	ldi	r19, 0x00	; 0
    5494:	81 e0       	ldi	r24, 0x01	; 1
    5496:	65 e1       	ldi	r22, 0x15	; 21
    5498:	a9 01       	movw	r20, r18
    549a:	0e 94 51 19 	call	0x32a2	; 0x32a2 <LCD_displayStringRowColumn>
    549e:	07 c0       	rjmp	.+14     	; 0x54ae <LCD_Time_Display+0x3c>
	}
	else
	{
		LCD_displayStringRowColumn(1, 21, "PM");
    54a0:	2c e8       	ldi	r18, 0x8C	; 140
    54a2:	30 e0       	ldi	r19, 0x00	; 0
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	65 e1       	ldi	r22, 0x15	; 21
    54a8:	a9 01       	movw	r20, r18
    54aa:	0e 94 51 19 	call	0x32a2	; 0x32a2 <LCD_displayStringRowColumn>
	}
	/* Displaying Hours */
	LCD_moveCursor(1, 12);
    54ae:	81 e0       	ldi	r24, 0x01	; 1
    54b0:	6c e0       	ldi	r22, 0x0C	; 12
    54b2:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_intgerToString(Display.Hour_TWO);
    54b6:	80 91 c3 00 	lds	r24, 0x00C3
    54ba:	88 2f       	mov	r24, r24
    54bc:	90 e0       	ldi	r25, 0x00	; 0
    54be:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>
	LCD_moveCursor(1, 13);
    54c2:	81 e0       	ldi	r24, 0x01	; 1
    54c4:	6d e0       	ldi	r22, 0x0D	; 13
    54c6:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_intgerToString(Display.Hour_ONE);
    54ca:	80 91 c2 00 	lds	r24, 0x00C2
    54ce:	88 2f       	mov	r24, r24
    54d0:	90 e0       	ldi	r25, 0x00	; 0
    54d2:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>

	LCD_displayCharRowColumn(1, 14, ':');
    54d6:	81 e0       	ldi	r24, 0x01	; 1
    54d8:	6e e0       	ldi	r22, 0x0E	; 14
    54da:	4a e3       	ldi	r20, 0x3A	; 58
    54dc:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_displayCharRowColumn>

	/* Displaying Minutes */
	LCD_moveCursor(1, 15);
    54e0:	81 e0       	ldi	r24, 0x01	; 1
    54e2:	6f e0       	ldi	r22, 0x0F	; 15
    54e4:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_intgerToString(Display.Minute_TWO);
    54e8:	80 91 c1 00 	lds	r24, 0x00C1
    54ec:	88 2f       	mov	r24, r24
    54ee:	90 e0       	ldi	r25, 0x00	; 0
    54f0:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>
	LCD_moveCursor(1, 16);
    54f4:	81 e0       	ldi	r24, 0x01	; 1
    54f6:	60 e1       	ldi	r22, 0x10	; 16
    54f8:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_intgerToString(Display.Minute_ONE);
    54fc:	80 91 c0 00 	lds	r24, 0x00C0
    5500:	88 2f       	mov	r24, r24
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>

	LCD_displayCharRowColumn(1, 17, ':');
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	61 e1       	ldi	r22, 0x11	; 17
    550c:	4a e3       	ldi	r20, 0x3A	; 58
    550e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <LCD_displayCharRowColumn>

	/* Displaying Seconds */
	LCD_moveCursor(1, 18);
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	62 e1       	ldi	r22, 0x12	; 18
    5516:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_intgerToString(Display.Second_TWO);
    551a:	80 91 bf 00 	lds	r24, 0x00BF
    551e:	88 2f       	mov	r24, r24
    5520:	90 e0       	ldi	r25, 0x00	; 0
    5522:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>
	LCD_moveCursor(1, 19);
    5526:	81 e0       	ldi	r24, 0x01	; 1
    5528:	63 e1       	ldi	r22, 0x13	; 19
    552a:	0e 94 0f 19 	call	0x321e	; 0x321e <LCD_moveCursor>
	LCD_intgerToString(Display.Second_ONE);
    552e:	80 91 be 00 	lds	r24, 0x00BE
    5532:	88 2f       	mov	r24, r24
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_intgerToString>

	LCD_displayCharacter(' ');
    553a:	80 e2       	ldi	r24, 0x20	; 32
    553c:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <LCD_displayCharacter>
}
    5540:	cf 91       	pop	r28
    5542:	df 91       	pop	r29
    5544:	08 95       	ret

00005546 <__mulsi3>:
    5546:	62 9f       	mul	r22, r18
    5548:	d0 01       	movw	r26, r0
    554a:	73 9f       	mul	r23, r19
    554c:	f0 01       	movw	r30, r0
    554e:	82 9f       	mul	r24, r18
    5550:	e0 0d       	add	r30, r0
    5552:	f1 1d       	adc	r31, r1
    5554:	64 9f       	mul	r22, r20
    5556:	e0 0d       	add	r30, r0
    5558:	f1 1d       	adc	r31, r1
    555a:	92 9f       	mul	r25, r18
    555c:	f0 0d       	add	r31, r0
    555e:	83 9f       	mul	r24, r19
    5560:	f0 0d       	add	r31, r0
    5562:	74 9f       	mul	r23, r20
    5564:	f0 0d       	add	r31, r0
    5566:	65 9f       	mul	r22, r21
    5568:	f0 0d       	add	r31, r0
    556a:	99 27       	eor	r25, r25
    556c:	72 9f       	mul	r23, r18
    556e:	b0 0d       	add	r27, r0
    5570:	e1 1d       	adc	r30, r1
    5572:	f9 1f       	adc	r31, r25
    5574:	63 9f       	mul	r22, r19
    5576:	b0 0d       	add	r27, r0
    5578:	e1 1d       	adc	r30, r1
    557a:	f9 1f       	adc	r31, r25
    557c:	bd 01       	movw	r22, r26
    557e:	cf 01       	movw	r24, r30
    5580:	11 24       	eor	r1, r1
    5582:	08 95       	ret

00005584 <__divmodhi4>:
    5584:	97 fb       	bst	r25, 7
    5586:	09 2e       	mov	r0, r25
    5588:	07 26       	eor	r0, r23
    558a:	0a d0       	rcall	.+20     	; 0x55a0 <__divmodhi4_neg1>
    558c:	77 fd       	sbrc	r23, 7
    558e:	04 d0       	rcall	.+8      	; 0x5598 <__divmodhi4_neg2>
    5590:	2e d0       	rcall	.+92     	; 0x55ee <__udivmodhi4>
    5592:	06 d0       	rcall	.+12     	; 0x55a0 <__divmodhi4_neg1>
    5594:	00 20       	and	r0, r0
    5596:	1a f4       	brpl	.+6      	; 0x559e <__divmodhi4_exit>

00005598 <__divmodhi4_neg2>:
    5598:	70 95       	com	r23
    559a:	61 95       	neg	r22
    559c:	7f 4f       	sbci	r23, 0xFF	; 255

0000559e <__divmodhi4_exit>:
    559e:	08 95       	ret

000055a0 <__divmodhi4_neg1>:
    55a0:	f6 f7       	brtc	.-4      	; 0x559e <__divmodhi4_exit>
    55a2:	90 95       	com	r25
    55a4:	81 95       	neg	r24
    55a6:	9f 4f       	sbci	r25, 0xFF	; 255
    55a8:	08 95       	ret

000055aa <__udivmodsi4>:
    55aa:	a1 e2       	ldi	r26, 0x21	; 33
    55ac:	1a 2e       	mov	r1, r26
    55ae:	aa 1b       	sub	r26, r26
    55b0:	bb 1b       	sub	r27, r27
    55b2:	fd 01       	movw	r30, r26
    55b4:	0d c0       	rjmp	.+26     	; 0x55d0 <__udivmodsi4_ep>

000055b6 <__udivmodsi4_loop>:
    55b6:	aa 1f       	adc	r26, r26
    55b8:	bb 1f       	adc	r27, r27
    55ba:	ee 1f       	adc	r30, r30
    55bc:	ff 1f       	adc	r31, r31
    55be:	a2 17       	cp	r26, r18
    55c0:	b3 07       	cpc	r27, r19
    55c2:	e4 07       	cpc	r30, r20
    55c4:	f5 07       	cpc	r31, r21
    55c6:	20 f0       	brcs	.+8      	; 0x55d0 <__udivmodsi4_ep>
    55c8:	a2 1b       	sub	r26, r18
    55ca:	b3 0b       	sbc	r27, r19
    55cc:	e4 0b       	sbc	r30, r20
    55ce:	f5 0b       	sbc	r31, r21

000055d0 <__udivmodsi4_ep>:
    55d0:	66 1f       	adc	r22, r22
    55d2:	77 1f       	adc	r23, r23
    55d4:	88 1f       	adc	r24, r24
    55d6:	99 1f       	adc	r25, r25
    55d8:	1a 94       	dec	r1
    55da:	69 f7       	brne	.-38     	; 0x55b6 <__udivmodsi4_loop>
    55dc:	60 95       	com	r22
    55de:	70 95       	com	r23
    55e0:	80 95       	com	r24
    55e2:	90 95       	com	r25
    55e4:	9b 01       	movw	r18, r22
    55e6:	ac 01       	movw	r20, r24
    55e8:	bd 01       	movw	r22, r26
    55ea:	cf 01       	movw	r24, r30
    55ec:	08 95       	ret

000055ee <__udivmodhi4>:
    55ee:	aa 1b       	sub	r26, r26
    55f0:	bb 1b       	sub	r27, r27
    55f2:	51 e1       	ldi	r21, 0x11	; 17
    55f4:	07 c0       	rjmp	.+14     	; 0x5604 <__udivmodhi4_ep>

000055f6 <__udivmodhi4_loop>:
    55f6:	aa 1f       	adc	r26, r26
    55f8:	bb 1f       	adc	r27, r27
    55fa:	a6 17       	cp	r26, r22
    55fc:	b7 07       	cpc	r27, r23
    55fe:	10 f0       	brcs	.+4      	; 0x5604 <__udivmodhi4_ep>
    5600:	a6 1b       	sub	r26, r22
    5602:	b7 0b       	sbc	r27, r23

00005604 <__udivmodhi4_ep>:
    5604:	88 1f       	adc	r24, r24
    5606:	99 1f       	adc	r25, r25
    5608:	5a 95       	dec	r21
    560a:	a9 f7       	brne	.-22     	; 0x55f6 <__udivmodhi4_loop>
    560c:	80 95       	com	r24
    560e:	90 95       	com	r25
    5610:	bc 01       	movw	r22, r24
    5612:	cd 01       	movw	r24, r26
    5614:	08 95       	ret

00005616 <__prologue_saves__>:
    5616:	2f 92       	push	r2
    5618:	3f 92       	push	r3
    561a:	4f 92       	push	r4
    561c:	5f 92       	push	r5
    561e:	6f 92       	push	r6
    5620:	7f 92       	push	r7
    5622:	8f 92       	push	r8
    5624:	9f 92       	push	r9
    5626:	af 92       	push	r10
    5628:	bf 92       	push	r11
    562a:	cf 92       	push	r12
    562c:	df 92       	push	r13
    562e:	ef 92       	push	r14
    5630:	ff 92       	push	r15
    5632:	0f 93       	push	r16
    5634:	1f 93       	push	r17
    5636:	cf 93       	push	r28
    5638:	df 93       	push	r29
    563a:	cd b7       	in	r28, 0x3d	; 61
    563c:	de b7       	in	r29, 0x3e	; 62
    563e:	ca 1b       	sub	r28, r26
    5640:	db 0b       	sbc	r29, r27
    5642:	0f b6       	in	r0, 0x3f	; 63
    5644:	f8 94       	cli
    5646:	de bf       	out	0x3e, r29	; 62
    5648:	0f be       	out	0x3f, r0	; 63
    564a:	cd bf       	out	0x3d, r28	; 61
    564c:	09 94       	ijmp

0000564e <__epilogue_restores__>:
    564e:	2a 88       	ldd	r2, Y+18	; 0x12
    5650:	39 88       	ldd	r3, Y+17	; 0x11
    5652:	48 88       	ldd	r4, Y+16	; 0x10
    5654:	5f 84       	ldd	r5, Y+15	; 0x0f
    5656:	6e 84       	ldd	r6, Y+14	; 0x0e
    5658:	7d 84       	ldd	r7, Y+13	; 0x0d
    565a:	8c 84       	ldd	r8, Y+12	; 0x0c
    565c:	9b 84       	ldd	r9, Y+11	; 0x0b
    565e:	aa 84       	ldd	r10, Y+10	; 0x0a
    5660:	b9 84       	ldd	r11, Y+9	; 0x09
    5662:	c8 84       	ldd	r12, Y+8	; 0x08
    5664:	df 80       	ldd	r13, Y+7	; 0x07
    5666:	ee 80       	ldd	r14, Y+6	; 0x06
    5668:	fd 80       	ldd	r15, Y+5	; 0x05
    566a:	0c 81       	ldd	r16, Y+4	; 0x04
    566c:	1b 81       	ldd	r17, Y+3	; 0x03
    566e:	aa 81       	ldd	r26, Y+2	; 0x02
    5670:	b9 81       	ldd	r27, Y+1	; 0x01
    5672:	ce 0f       	add	r28, r30
    5674:	d1 1d       	adc	r29, r1
    5676:	0f b6       	in	r0, 0x3f	; 63
    5678:	f8 94       	cli
    567a:	de bf       	out	0x3e, r29	; 62
    567c:	0f be       	out	0x3f, r0	; 63
    567e:	cd bf       	out	0x3d, r28	; 61
    5680:	ed 01       	movw	r28, r26
    5682:	08 95       	ret

00005684 <itoa>:
    5684:	fb 01       	movw	r30, r22
    5686:	9f 01       	movw	r18, r30
    5688:	e8 94       	clt
    568a:	42 30       	cpi	r20, 0x02	; 2
    568c:	c4 f0       	brlt	.+48     	; 0x56be <itoa+0x3a>
    568e:	45 32       	cpi	r20, 0x25	; 37
    5690:	b4 f4       	brge	.+44     	; 0x56be <itoa+0x3a>
    5692:	4a 30       	cpi	r20, 0x0A	; 10
    5694:	29 f4       	brne	.+10     	; 0x56a0 <itoa+0x1c>
    5696:	97 fb       	bst	r25, 7
    5698:	1e f4       	brtc	.+6      	; 0x56a0 <itoa+0x1c>
    569a:	90 95       	com	r25
    569c:	81 95       	neg	r24
    569e:	9f 4f       	sbci	r25, 0xFF	; 255
    56a0:	64 2f       	mov	r22, r20
    56a2:	77 27       	eor	r23, r23
    56a4:	0e 94 f7 2a 	call	0x55ee	; 0x55ee <__udivmodhi4>
    56a8:	80 5d       	subi	r24, 0xD0	; 208
    56aa:	8a 33       	cpi	r24, 0x3A	; 58
    56ac:	0c f0       	brlt	.+2      	; 0x56b0 <itoa+0x2c>
    56ae:	89 5d       	subi	r24, 0xD9	; 217
    56b0:	81 93       	st	Z+, r24
    56b2:	cb 01       	movw	r24, r22
    56b4:	00 97       	sbiw	r24, 0x00	; 0
    56b6:	a1 f7       	brne	.-24     	; 0x56a0 <itoa+0x1c>
    56b8:	16 f4       	brtc	.+4      	; 0x56be <itoa+0x3a>
    56ba:	5d e2       	ldi	r21, 0x2D	; 45
    56bc:	51 93       	st	Z+, r21
    56be:	10 82       	st	Z, r1
    56c0:	c9 01       	movw	r24, r18
    56c2:	0c 94 63 2b 	jmp	0x56c6	; 0x56c6 <strrev>

000056c6 <strrev>:
    56c6:	dc 01       	movw	r26, r24
    56c8:	fc 01       	movw	r30, r24
    56ca:	67 2f       	mov	r22, r23
    56cc:	71 91       	ld	r23, Z+
    56ce:	77 23       	and	r23, r23
    56d0:	e1 f7       	brne	.-8      	; 0x56ca <strrev+0x4>
    56d2:	32 97       	sbiw	r30, 0x02	; 2
    56d4:	04 c0       	rjmp	.+8      	; 0x56de <strrev+0x18>
    56d6:	7c 91       	ld	r23, X
    56d8:	6d 93       	st	X+, r22
    56da:	70 83       	st	Z, r23
    56dc:	62 91       	ld	r22, -Z
    56de:	ae 17       	cp	r26, r30
    56e0:	bf 07       	cpc	r27, r31
    56e2:	c8 f3       	brcs	.-14     	; 0x56d6 <strrev+0x10>
    56e4:	08 95       	ret

000056e6 <_exit>:
    56e6:	f8 94       	cli

000056e8 <__stop_program>:
    56e8:	ff cf       	rjmp	.-2      	; 0x56e8 <__stop_program>

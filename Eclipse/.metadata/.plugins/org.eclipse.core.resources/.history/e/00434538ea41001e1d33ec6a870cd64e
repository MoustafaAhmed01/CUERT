/******************************************************************************
 *
 * Module: Common - Platform Types Abstraction
 *
 * File Name: Stepper_Motor.h
 *
 * Description: types for AVR
 *
 * Date Created: 21/8/2023
 *
 * Author: Moustafa Ahmed
 *
 *******************************************************************************/

/**-------------------------INCLUDES Section------------------------**/
#include "Header/Stepper_Motor.h"

#include "../Libraries/Libraries.h"
#include "../MCAL/Header/GPIO.h"

/**-------------------------Function Definition Section-------------**/
/*
 * Description:
 * Initializing Stepper Motor
 */
void Stepper_Motor_init()
{
	/* Initialize stepper motor pins as outputs */
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, PIN_OUTPUT);
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, PIN_OUTPUT);
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, PIN_OUTPUT);
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, PIN_OUTPUT);

	/* Enable Pins direction */
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, PIN_OUTPUT);
	GPIO_setupPinDirection(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, PIN_OUTPUT);

	/* Disable stepper motor */
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, LOGIC_LOW);
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, LOGIC_LOW);
}
/*-------------------------------------------------------------------*/
/*
 * Description:
 * Step the motor in a given direction
 */
void stepper_rotate(Stepper_Motor_State direction, uint8 angle)
{
	/**-----------------------Local Variables----------------------**/
	uint8 counter = 0; /* Counter for the FOR loop */

	uint8 steps = angle; /* Calculate the number of steps */

	/**-----------------------Main Section-------------------------**/

	/* Activate the motor */
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, LOGIC_HIGH);
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, LOGIC_HIGH);


	for(counter = 0; counter < 3; counter++)
	{
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_HIGH);
		_delay_ms(10);

		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN1, LOGIC_HIGH);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN2, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN3, LOGIC_LOW);
		GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_IN4, LOGIC_LOW);
		_delay_ms(10);
	}
_delay_ms(10000);
	/* Disable the motor */
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN1, LOGIC_LOW);
	GPIO_writePin(STEPPER_MOTOR_OUTPUT_PORT, STEPPER_MOTOR_EN2, LOGIC_LOW);
}

/**---------------------------------END-----------------------------**/

